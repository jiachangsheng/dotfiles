{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "rendersettings", "icon": "LOP/rendersettings", "group": "rendering", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Render Settings"], "extent": [0, 20]}, {"type": "summary", "indent": 0, "text": ["Creates or edits a UsdRenderSettings prim, which holds the general settings for rendering the scene."], "extent": [130, 239]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [239, 254], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["A UsdRenderSettings prim holds global render settings for\n    rendering the scene, as well as a list of ", {"type": "code", "text": ["UsdRenderProduct"]}, " prims representing the rendered files/buffers, and which ", {"type": "em", "text": ["purposes"]}, " should be rendered."], "extent": [254, 473]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Render settings prims must be somewhere under ", {"type": "code", "text": ["/Render"]}, " in the scene graph tree."], "extent": [473, 561]}], "container": true}]}, {"level": 2, "id": "oview", "container": true, "type": "h", "indent": 0, "text": ["Creating vs. editing prims"], "extent": [5350, 5391], "body": [{"type": "para", "indent": 0, "text": ["This node belongs to a class of ", {"type": "strong", "text": ["nodes that create or edit USD prims directly"]}, ". These nodes operate in ", {"type": "em", "text": ["Create mode"]}, " or ", {"type": "em", "text": ["Edit mode"]}, ". This is controlled by a ", {"type": "ui", "text": ["Create primitives"]}, " checkbox or a ", {"type": "em", "text": ["Create/Edit popup menu"]}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim. The ", {"type": "em", "text": ["Edit mode"]}, " has two variations. ", {"type": "em", "text": ["Edit"]}, " will not modify primitives which have a ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, ". ", {"type": "em", "text": ["Force edit"]}, " will modify a primitive regardless of the existence or value of this attribute. This attribute can be set on a primitive using the ", {"scheme": null, "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitives LOP"], "fullpath": "/nodes/lop/configureprimitive.html"}, "."], "extent": [5391, 6053]}, {"type": "para", "indent": 0, "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute."], "extent": [6053, 6183]}, {"type": "para", "indent": 0, "text": ["In addition to that, any connectable USD attributes (i.e., the ones in the ", {"type": "code", "text": ["inputs:"]}, " namespace) will have menu items that allow disconnecting them from their sources."], "extent": [6183, 6351]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6351, 6357], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6384, 6408], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6428, 6447]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6447, 6468], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6468, 6554]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6554, 6574], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6574, 6651]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6651, 6833]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6833, 6845], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6845, 7002]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7002, 7025], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7025, 7214]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7214, 7231], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7231, 7313]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [593, 605], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Sampling Behavior"], "extent": [2242, 2262], "body": [{"type": "para", "indent": 4, "text": ["Cooking this node can generate many USD time samples, rather than just a single time sample at the current time. This can be equivalent to having a ", {"scheme": "Node", "value": "/nodes/lop/cache", "type": "link", "text": ["Cache LOP"], "fullpath": "/nodes/lop/cache.html"}, " following this node, but it will evaluate much faster, and does not cache data from any other nodes. This allows animated data to be authored to USD without introducing a node time dependency which would then cause all following nodes to also be time dependent. This can vastly improve playback performance of some LOP Networks."], "extent": [2262, 2771]}, {"type": "para", "indent": 4, "text": ["In all sampling modes, if a parameter on this node does not vary with time, and does not rely on other time sampled data from the stage, only a single default value will be generated in USD for the corresponding attribute. USD time samples are only generated for parameters that may vary over time."], "extent": [2771, 3075]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Sample Current Frame"], "extent": [3075, 3101], "body": [{"type": "para", "indent": 8, "text": ["A single time sample will be generated for the current time."], "extent": [3101, 3171]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range If Input Is Not Time Dependent"], "extent": [3171, 3226], "body": [{"type": "para", "indent": 8, "text": ["If the input to this node is time dependent, this node behaves as if it is in ", {"type": "code", "text": ["Sample current frame"]}, " mode. Otherwise it behaves as if it is in ", {"type": "code", "text": ["Sample frame range"]}, " mode."], "extent": [3226, 3405]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range"], "extent": [3405, 3429], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameter is used to generate multiple times at which this node\u2019s parameters are evaluated, and a USD time sample is created for each attribute at each one of these times."], "extent": [3429, 3632]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [3632, 3647], "body": [{"type": "para", "indent": 4, "text": ["When the ", {"type": "ui", "text": ["Sampling behavior"]}, " is ", {"type": "code", "text": ["Sample frame range"]}, ", this parameter controls the number and spacing of base time samples to be generated by this node. The default values of this parameter are ", {"type": "code", "text": ["@fstart"]}, ", ", {"type": "code", "text": ["@fend"]}, ", and ", {"type": "code", "text": ["@finc"]}, ". These values correspond to the start, end, and step size of the global Houdini animation settings when interacting with Houdini. When using a ROP node to generate a range of frames, these values correspond to the start, end, and increment values specified on the ROP node being executed. This default ensures that a USD file written to disk will contain time samples for exactly the frame range requested by the ROP (regardless of the Houdini animation settings)."], "extent": [3647, 4343]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Subframe Sampling"], "extent": [56, 79], "body": [{"type": "para", "indent": 8, "text": ["For each primary sample generated by this node, these parameters can cause additional samples to be generated around that primary sample time. This is most often used to ensure that accurate data exists at exactly the camera shutter open and close times, as well as at the primary sample time."], "extent": [79, 382]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter"], "extent": [382, 395], "body": [{"type": "para", "indent": 8, "text": ["Controls the method used to specify the shutter open and close times relative to the primary sample times."], "extent": [395, 511]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Specify Manually"], "extent": [511, 537], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Shutter Open/Close"]}, " parameter values provide exact offset values relative to the primary sample time."], "extent": [537, 659]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Use Camera Prim"], "extent": [659, 684], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Camera Prim"]}, " parameter provides the scene graph path of a camera primitive from which the shutter open and close times are extracted to provide the offset values relative to the primary time sample."], "extent": [684, 903]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter Open/Close"], "extent": [903, 927], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Shutter"]}, " is set to ", {"type": "ui", "text": ["Specify Manually"]}, ", these two offset values are added to the primary sample time to indicate the shutter open and close times. The open time should be less than or equal to zero, and the close time should be greater than or equal to zero."], "extent": [927, 1204]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera Prim"], "extent": [1204, 1221], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Shutter"]}, " is set to ", {"type": "ui", "text": ["Use Camera Prim"]}, ", this is the scene graph path of a camera prim on the input node\u2019s stage. The shutter open and close attribute values are read from this primitive."], "extent": [1221, 1425]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Samples"], "extent": [1425, 1438], "body": [{"type": "para", "indent": 8, "text": ["The number of subframe samples to create for each primary sample. These samples are evenly distributed between the shutter open and close times. Note that such an even distribution may or may not create a sample at exactly the primary sample time."], "extent": [1438, 1695]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Always Include Frame Sample"], "extent": [1695, 1728], "body": [{"type": "para", "indent": 8, "text": ["When turned on, forces a sample to be created at exactly the primary sample time. If the ", {"type": "ui", "text": ["Samples"]}, " value, together with the shutter open and close times, already place a sample at the primary sample time, turning on this option has no effect. Otherwise, this option causes an addition sample to be added. This means that the actual number of samples per primary sample may in fact be one more than the number specified in the ", {"type": "ui", "text": ["Samples"]}, " parameter."], "extent": [1728, 2189]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Action"], "extent": [50, 62], "body": [{"type": "para", "indent": 8, "text": ["Whether this node should create new prims, or edit existing prims. In addition, the ", {"type": "code", "text": ["Force Edit"]}, " option can be chosen to cause this node to ignore the ", {"type": "code", "text": ["houdini:editable"]}, " attribute on prims, and always edit the specified attributes. This is in contrast to the ", {"type": "code", "text": ["Edit"]}, " mode which will trigger a warning and not set attributes on prims with the ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, "."], "extent": [88, 483]}], "container": true, "attrs": {"id": "createprims"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitive Path"], "extent": [483, 503], "body": [{"type": "para", "indent": 8, "text": ["In create mode, this lets you control where in the scene graph to create the prim(s)."], "extent": [526, 621]}, {"type": "para", "indent": 8, "text": ["The default is usually ", {"type": "code", "text": ["/$OS"]}, ". This creates a primitive at the root level with the same name as the node (for example, ", {"type": "code", "text": ["/tube1"]}, "). This is a useful default for preventing naming conflicts, but terrible for organization. You should try to remember to change the ", {"type": "ui", "text": ["Primitive path"]}, " to a better value when you create prims."], "extent": [621, 950]}, {"type": "para", "indent": 8, "text": ["For example, instead of naming models after the node that created them, you might want to name them after the geometry inside, and organize them under a ", {"type": "code", "text": ["/Models"]}, " branch."], "extent": [950, 1130]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Create primitives"]}, " section contains basic controls for how to create the new prim(s)."], "extent": [1130, 1230]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitives"], "extent": [1230, 1246], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, the node has a ", {"type": "ui", "text": ["Primitive pattern"]}, " parameter. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern.html"}, " for advanced matching, including matching all prims in a collection."], "extent": [1272, 1633]}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Initialize Parameters"], "extent": [1633, 1660], "body": [{"type": "para", "indent": 8, "text": ["Changes the state of all control menu parameters to ", {"type": "code", "text": ["Do Nothing"]}, ", so that this node will not apply any changes. Also grabs the current values of each property from the first ", {"type": "ui", "text": ["Primitives"]}, " match, and sets the values of the corresponding parameters to match. This means that changing any parameter\u2019s control menu to ", {"type": "code", "text": ["Set or Create"]}, " mode will set the property to its current value, making it easier to apply changes to an existing value rather than setting a brand new value."], "extent": [1686, 2169]}], "container": true, "attrs": {"id": "initforedit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Primitives"], "extent": [7360, 7380], "body": [{"type": "para", "indent": 4, "text": ["This section only appears when the node is creating primitives."], "extent": [7380, 7449]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [7449, 7467]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to create a new cube primitive at ", {"type": "code", "text": ["/world/objects/cube1"]}, " on an empty stage: Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Define"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to ", {"type": "q", "text": ["Xform"]}, "."], "extent": [7467, 7649]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to override the radius of a sphere at ", {"type": "code", "text": ["/world/objects/sphere1"]}, ": Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Over"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to None. This makes sure the primitive types of any existing ancestor prims are not be modified by this node."], "extent": [7649, 7915]}], "container": true}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Primitive Count"], "extent": [7915, 7936], "body": [{"type": "para", "indent": 8, "text": ["The number of primitives to create."], "extent": [7936, 7981]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Primitive Kind"], "extent": [7981, 8001], "body": [{"type": "para", "indent": 8, "text": ["Set all created prims to have this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd.html#kinds", "fragment": "#kinds"}, "."], "extent": [8024, 8095]}], "container": true, "attrs": {"id": "primkind"}}, {"type": "dt", "indent": 4, "text": ["Primitive Specifier"], "extent": [8095, 8120], "body": [{"type": "para", "indent": 8, "text": ["The USD operator to use when creating the new prims."], "extent": [8144, 8206]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Define"], "extent": [8206, 8222], "body": [{"type": "para", "indent": 12, "text": ["Authors a completely new prim. Use this if you want to create a brand new prim or replace an existing prim."], "extent": [8222, 8343]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Over"], "extent": [8343, 8357], "body": [{"type": "para", "indent": 12, "text": ["Authors an override of an existing prim. Attributes not explicitly authored on this prim will get their values from the existing prim on the lower layer."], "extent": [8357, 8524]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Class"], "extent": [8524, 8539], "body": [{"type": "para", "indent": 12, "text": ["Define a primitive class. This is usually not necessary unless you are doing deep USD magic."], "extent": [8539, 8645]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "specifier"}}, {"type": "dt", "indent": 4, "text": ["Class Ancestor"], "extent": [8645, 8665], "body": [{"type": "para", "indent": 8, "text": ["If the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Define"]}, " or ", {"type": "code", "text": ["Over"]}, ", this parameter will cause some ancestor primitives to be authored with a specifier of ", {"type": "code", "text": ["Class"]}, ". This makes it easy to create an ", {"type": "code", "text": ["Over"]}, " or ", {"type": "code", "text": ["Define"]}, " within a ", {"type": "code", "text": ["Class"]}, " without having to use two separate nodes. When the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Class"]}, ", this parameter is disabled because the entire primitive hierarchy is already authored as ", {"type": "code", "text": ["Class"]}, " primitives."], "extent": [8693, 9095]}], "container": true, "attrs": {"id": "classancestor"}}, {"type": "dt", "indent": 4, "text": ["Parent Primitive Type"], "extent": [9095, 9122], "body": [{"type": "para", "indent": 8, "text": ["If any parents of a path in ", {"type": "ui", "text": ["Primitive paths"]}, " do not exist, this node will automatically create them. In this case, it will create parent nodes of this type."], "extent": [9151, 9321]}], "container": true, "attrs": {"id": "parentprimtype"}}], "container": true}], "container": true, "role": "item"}], "container": true}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Standard"], "extent": [773, 788], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Products"], "extent": [788, 803], "body": [{"type": "para", "indent": 8, "text": ["A list of paths to UsdRenderProduct prims, representing the rendered outputs. If you don\u2019t specify any explicit products, the renderer should by default output an RGB image using the render settings on this node, to a default display or image name."], "extent": [826, 1084]}], "container": true, "attrs": {"id": "products"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Included Purposes"], "extent": [1084, 1107], "body": [{"type": "para", "indent": 8, "text": ["A list of ", {"type": "em", "text": ["purpose"]}, " tokens (such as ", {"type": "code", "text": ["render"]}, " (final render), ", {"type": "code", "text": ["proxy"]}, ", and ", {"type": "code", "text": ["guide"]}, ", from ", {"type": "code", "text": ["UsdGeomImageable"]}, "). Only geometry with its purpose set to one of these tokens will be sent to the renderer. The ", {"type": "code", "text": ["default"]}, " purpose is the purpose for all geometry that doesn\u2019t have an explicitly set purpose, so you will usually want to include it."], "extent": [1138, 1483]}, {"type": "para", "indent": 8, "text": ["(This cannot be specified per-product because it is a statement of which geometry is present.)"], "extent": [1483, 1587]}], "container": true, "attrs": {"id": "includedPurposes"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Material Binding Purposes"], "extent": [1587, 1618], "body": [{"type": "para", "indent": 8, "text": ["A list of material purpose tokens to consider when resolving material bindings."], "extent": [1656, 1745]}], "container": true, "attrs": {"id": "materialBindingPurposes"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera"], "extent": [1745, 1757], "body": [{"type": "para", "indent": 8, "text": ["Path to a USD camera (", {"type": "code", "text": ["UsdGeomCamera"]}, ") prim to render the scene from."], "extent": [1778, 1857]}], "container": true, "attrs": {"id": "camera"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution Mode"], "extent": [1857, 1878], "body": [{"type": "para", "indent": 8, "text": ["Use the USD Camera\u2019s aperture aspect ratio to automatically set one dimension of the resolution."], "extent": [1901, 2007]}, {"type": "para", "indent": 8, "text": ["The computed parm is set using an expression, but is locked to prevent accidental edits."], "extent": [2007, 2105]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Manual"], "extent": [2105, 2121], "body": [{"type": "para", "indent": 12, "text": ["Set the resolution height and width values."], "extent": [2121, 2178]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Width, Compute Height from Aperture"], "extent": [2178, 2227], "body": [{"type": "para", "indent": 12, "text": ["Set the width size, while height is computed from the width and the camera aspect ratio."], "extent": [2227, 2329]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Height, Compute Width from Aperture"], "extent": [2329, 2378], "body": [{"type": "para", "indent": 12, "text": ["Set the height size, while width is computed from the width and the camera aspect ratio."], "extent": [2378, 2480]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "res_mode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution"], "extent": [2480, 2496], "body": [{"type": "para", "indent": 8, "text": ["The horizontal and vertical size of the output image, in pixels."], "extent": [2521, 2595]}], "container": true, "attrs": {"id": "resolution"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Disable Motion Blur"], "extent": [2595, 2620], "body": [{"type": "para", "indent": 8, "text": ["Turn off motion blur.  This is equivalent to overriding the camera\u2019s ", {"type": "ui", "text": ["Shutter Close"]}, " parameter to be equal to its ", {"type": "ui", "text": ["Shutter Open"]}, " time, to produce a zero-width shutter interval."], "extent": [2652, 2842]}], "container": true, "attrs": {"id": "disableMotionBlur"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Disable Depth Of Field"], "extent": [2842, 2870], "body": [{"type": "para", "indent": 8, "text": ["Turn off depth of field rendering.  This is equivalent to overriding the camera\u2019s ", {"type": "ui", "text": ["F-Stop"]}, " parameter to ", {"type": "code", "text": ["0.0"]}, "."], "extent": [2904, 3026]}], "container": true, "attrs": {"id": "disableDepthOfField"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Aspect Ratio Conform Policy"], "extent": [3026, 3059], "body": [{"type": "para", "indent": 8, "text": ["What to do if the aspect ratio of the output image (", {"type": "ui", "text": ["Resolution"]}, " width divided by height) doesn\u2019t match the aspect ratio of the camera aperture (controlled by attributes on the camera). This allows a standard renderer to do something reasonable when you switch between cameras."], "extent": [3098, 3387]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Expand Aperture"], "extent": [3387, 3412], "body": [{"type": "para", "indent": 12, "text": ["If necessary, expand the camera aperture to match the image."], "extent": [3412, 3486]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Crop Aperture"], "extent": [3486, 3509], "body": [{"type": "para", "indent": 12, "text": ["If necessary, crop the camera aperture to match the image."], "extent": [3509, 3581]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Width"], "extent": [3581, 3612], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture width to match the image."], "extent": [3612, 3692]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Height"], "extent": [3692, 3724], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture height to match the image."], "extent": [3724, 3805]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Pixel Aspect Ratio"], "extent": [3805, 3840], "body": [{"type": "para", "indent": 12, "text": ["Change the aspect ratio of the image to match the camera."], "extent": [3840, 3911]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "aspectRatioConformPolicy"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Data Window NDC"], "extent": [3911, 3932], "body": [{"type": "para", "indent": 8, "text": ["Directs the renderer to only render within this window of the entire output image. You specify the window as ", {"type": "code", "text": ["minX, minY, maxX, maxY"]}, ", where each number is a normalized value from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, ". ", {"type": "code", "text": ["0, 0"]}, " is the bottom left, ", {"type": "code", "text": ["1, 1"]}, " is the top right, ", {"type": "code", "text": ["0.5, 0.5"]}, " is the center, and so on. The default is ", {"type": "code", "text": ["0, 0, 1, 1"]}, " (no cropping). Note that you can use ", {"type": "em", "text": ["negative"]}, " values. For example, ", {"type": "code", "text": ["-0.1, -0.1, 1.1, 1.1"]}, " will give you 10% overscan on each side."], "extent": [3960, 4411]}, {"type": "para", "indent": 8, "text": ["You can use this window to temporarily ", {"type": "em", "text": ["crop"]}, " the render to a smaller region, for testing purposes."], "extent": [4411, 4520]}, {"type": "para", "indent": 8, "text": ["Pixels are only rendered if they are ", {"type": "em", "text": ["fully"]}, " inside the window."], "extent": [4520, 4593]}, {"type": "para", "indent": 8, "text": ["The normalized coordinates map to the image ", {"type": "em", "text": ["after"]}, " any adjustments by the ", {"type": "ui", "text": ["Aspect ratio conform policy"]}, "."], "extent": [4593, 4710]}], "container": true, "attrs": {"id": "dataWindowNDC"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pixel Aspect Ratio"], "extent": [4710, 4734], "body": [{"type": "para", "indent": 8, "text": ["The aspect ratio (width/height) of image ", {"type": "em", "text": ["pixels"]}, " (", {"type": "em", "text": ["not"]}, " the image itself).\n        The default is ", {"type": "code", "text": ["1.0"]}, ", indicating square pixels."], "extent": [4765, 4907]}], "container": true, "attrs": {"id": "pixelAspectRatio"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "karma", "container": true, "type": "h", "indent": 0, "text": ["Karma"], "extent": [4907, 4927], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Global"], "extent": [4927, 4943], "body": [{"level": 3, "type": "sep", "indent": 0, "text": [" Rendering "], "extent": [4943, 4962]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Engine Settings"], "role": "item", "extent": [4962, 4982], "body": [{"type": "para", "indent": 4, "text": ["Select the UI for the specified rendering engine."], "extent": [5036, 5091]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["CPU"], "extent": [5091, 5100], "body": [{"type": "para", "indent": 8, "text": ["Shows the parameters for Karma CPU"], "extent": [5100, 5144]}], "container": true}, {"type": "dt", "indent": 4, "text": ["XPU"], "extent": [5144, 5153], "body": [{"type": "para", "indent": 8, "text": ["Shows the parameters for Karma XPU"], "extent": [5153, 5197]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:global:engine", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Image Mode"], "role": "item", "extent": [5197, 5211], "body": [{"type": "para", "indent": 4, "text": ["Determines how the image will be rendered."], "extent": [5268, 5316]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["progressive"]}], "extent": [5316, 5335], "body": [{"type": "para", "indent": 8, "text": ["The entire image will be progressively rendered, so the whole image resolves at the same time.  This mode gives you a sense of what the whole image will look like without waiting for the render to complete."], "extent": [5335, 5550]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bucket"]}], "extent": [5550, 5564], "body": [{"type": "para", "indent": 8, "text": ["Each bucket renders to completion before advancing to the next bucket.  This mode  lets you see what the final quality will be like without waiting for the whole image to render."], "extent": [5564, 5752]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Note: When rendering for IPR, Karma will use progressive rendering until the IPR preview passes are complete."], "extent": [5752, 5867]}], "container": true, "attrs": {"id": "karma:global:imagemode", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Progressive Passes"], "role": "item", "extent": [5867, 5889], "body": [{"type": "para", "indent": 4, "text": ["When rendering in bucket mode (see ", {"type": "code", "text": ["imagemode"]}, "), this is the number of progressive passes over the image to perform before switching to bucket mode."], "extent": [5954, 6108]}], "container": true, "attrs": {"id": "karma:global:progressivepasses", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Bucket Size"], "role": "item", "extent": [6108, 6123], "body": [{"type": "para", "indent": 4, "text": ["Karma breaks down an image into multiple buckets for rendering. This is the side length (in pixels) of the square bucket. The default is 32, specifying a 32 pixel x 32 pixel bucket. Threads operate at the bucket level, so it might be useful to lower the bucket size if there are only a few buckets that are particularly expensive. That way the expensive areas can be divided across more threads."], "extent": [6181, 6582]}, {"type": "para", "indent": 4, "text": ["For example, if the image is mostly empty, but there\u2019s a distant object that fits within single 32 x 32 bucket, then that object will only be rendered using 1 thread. If you switch to a 16 x 16 bucket, then the object might be split across 4 buckets and have 4 threads working on it."], "extent": [6582, 6871]}, {"type": "para", "indent": 4, "text": ["Ideally changing the bucket size doesn\u2019t change the results, but Karma measures variance across pixels within the current bucket, so if you set it to a low value, for example 4, Karma only has ", {"type": "code", "text": ["4 x 4 = 16"]}, " pixels to look at, so Karma will tend to make very poor variance estimates. This can show up as black pixels, where pixel rendering terminated prematurely due to a bad variance estimate."], "extent": [6871, 7269]}], "container": true, "attrs": {"id": "karma:global:bucketsize", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Bucket Order"], "role": "item", "extent": [7269, 7285], "body": [{"type": "para", "indent": 4, "text": ["Specifies which buckets are rendered first. Values can be:"], "extent": [7344, 7408]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["middle"]}], "extent": [7408, 7422], "body": [{"type": "para", "indent": 8, "text": ["Buckets start from the middle of the image."], "extent": [7422, 7474]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["top"]}], "extent": [7474, 7485], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the top of the image are rendered first."], "extent": [7485, 7545]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bottom"]}], "extent": [7545, 7559], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the bottom of the image are rendered first."], "extent": [7559, 7622]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["left"]}], "extent": [7622, 7634], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the left side of the image are rendered first."], "extent": [7634, 7700]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["right"]}], "extent": [7700, 7713], "body": [{"type": "para", "indent": 8, "text": ["Buckets at the right side of the image are rendered first."], "extent": [7713, 7781]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Note: When rendering to mplay, the user can click to focus on an area to render."], "extent": [7781, 7868]}], "container": true, "attrs": {"id": "karma:global:bucketorder", "kagroup": "Rendering"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Sampling "], "extent": [7868, 7885]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Pixel Samples"], "role": "item", "extent": [7885, 7903], "body": [{"type": "para", "indent": 4, "text": ["The number of ray-samples sent through each pixel.  More samples will\n    result in a less noisy image. Also known as ", {"type": "q", "text": ["Primary Samples"]}, "."], "extent": [7965, 8107]}], "container": true, "attrs": {"id": "karma:global:samplesperpixel", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Path Traced Samples"], "role": "item", "extent": [8107, 8130], "body": [{"type": "para", "indent": 4, "text": ["The number of ray-samples sent through each pixel when using the path\n    traced convergence mode.  More samples will result in a less noisy image."], "extent": [8194, 8347]}], "container": true, "attrs": {"id": "karma:global:pathtracedsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Image Blur"], "role": "item", "extent": [8347, 8361], "body": [{"type": "para", "indent": 4, "text": ["If you turn this off, Karma still calculates velocities, but sends all camera rays at shutter open, so the image will not have any apparent motion blur. This may be useful if you simply don\u2019t want any motion blur. For example, if you want to add motion blur in post/compositing, but you still need the renderer to be aware of motion blur so that it saves out the proper motion vectors to an AOV."], "extent": [8418, 8819]}], "container": true, "attrs": {"id": "karma:global:image_blur", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Screendoor Limit"], "role": "item", "extent": [8819, 8839], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling/VolumeSamplingStochastic.jpg", "type": "img", "text": ""}], "role": "item", "extent": [8901, 8976]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["The number of transparent samples to be shaded as a ray travels through\n    partially opaque objects. Increasing this value will result in less noise\n    in partially opaque objects and is generally less costly than increasing\n    Pixel samples, Volume Step Rate, or Min and Max ray samples. This parameter\n    will not have any effect on noise from Indirect Sources however."], "extent": [8976, 9357]}], "container": true, "attrs": {"id": "karma:global:screendoorlimit", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Convergence Mode"], "role": "item", "extent": [9357, 9377], "body": [{"type": "para", "indent": 4, "text": ["When set to Path Traced, maximum of 1 indirect ray is generated per\n    bounce. When set to Automatic, the number of indirect rays is calculated\n    based on initial noise estimate, target noise threshold, and the maximum\n    number of camera rays. Also note that under Automatic mode, number of\n    samples for direct lighting is adjusted based on noise estimate as well."], "extent": [9440, 9818]}], "container": true, "attrs": {"id": "karma:global:convergence_mode", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Russian Roulette Cutoff Depth"], "role": "item", "extent": [9818, 9851], "body": [{"type": "para", "indent": 4, "text": ["Depth at which indirect rays start to get stochastically pruned based on\n    ray throughput."], "extent": [9920, 10018]}], "container": true, "attrs": {"id": "karma:global:russianroulette_cutoff", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Sampling Mode"], "role": "item", "extent": [10018, 10041], "body": [{"type": "para", "indent": 4, "text": ["Whether Karma should perform uniform sampling of lights or whether\n    rendering should use the light tree. The light tree can be significantly\n    faster for scenes that have large numbers of lights."], "extent": [10107, 10313]}, {"type": "para", "indent": 4, "text": ["Some lights cannot be added to the light tree, and will all be sampled by Karma:"], "extent": [10313, 10399]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Dome Lights"], "extent": [10399, 10417]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Distant Lights"], "extent": [10417, 10438]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Point Lights"], "extent": [10438, 10457]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Lights with Light Filters"], "extent": [10457, 10489]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Lights with shaping controls (i.e. spot lights)"], "extent": [10489, 10544]}], "container": true}], "container": true, "attrs": {"id": "karma:global:light_sampling_mode", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "extent": [10544, 10570], "body": [{"type": "para", "indent": 4, "text": ["This is a global control to improve sampling quality for all lights. This\n    acts as a multiplier on the individual light quality controls.  Increasing\n    the quality will improve direct light sampling as well as\n    shadows/occlusion."], "extent": [10639, 10882]}], "container": true, "attrs": {"id": "karma:global:light_sampling_quality", "kagroup": "Sampling"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Indirect Guiding "], "extent": [10882, 10907]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Enable Indirect Guiding"], "role": "item", "extent": [10907, 10935], "body": [{"type": "para", "indent": 4, "text": ["When eabled, Karma collects radiance information on every shading point\n    during the render and uses it to guide indirect bounce rays, rather than\n    just relying on the BSDF sampling distribution. This can improve\n    ", {"type": "q", "text": ["difficult"]}, " lighting (for example, caustics, and mostly indirect lighting)\n    but does add a bit of overhead. Before using this, you can try rendering\n    direct and indirect AOVs to see where the noise is. If the noise is mostly\n    caused by the direct lighting, there may be very little benefit."], "extent": [11004, 11531]}], "container": true, "attrs": {"id": "karma:global:guiding_enable", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Training Samples"], "role": "item", "extent": [11531, 11560], "body": [{"type": "para", "indent": 4, "text": ["The number of primary samples that karma will collect radiance information\n    from. When set to 0, karma will collect information and refine guiding\n    field throughout the entire render. If greater than zero, it will only do\n    that until the specified number of samples and the remaining samples will\n    be rendered using the guiding field but without refining it any further."], "extent": [11630, 12018]}], "container": true, "attrs": {"id": "karma:global:guiding_samples", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Guiding Spatial Filter"], "role": "item", "extent": [12018, 12053], "body": [{"type": "para", "indent": 4, "text": ["Applies blur to spatial component of path guiding samples while training.\n    Can be increased to reduce grid-like artifacts at the cost of efficiency.\n    Deprecated in 20.0."], "extent": [12129, 12310]}], "container": true, "attrs": {"id": "karma:global:guiding_spatialfilter", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Guiding Directional Filter"], "role": "item", "extent": [12310, 12349], "body": [{"type": "para", "indent": 4, "text": ["Applies blur to directional component of path guiding samples while\n    training. Can be increased to reduce grid-like artifacts at the cost of\n    efficiency.\n    Deprecated in 20.0."], "extent": [12429, 12618]}], "container": true, "attrs": {"id": "karma:global:guiding_directionalfilter", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Guiding Deterministic"], "role": "item", "extent": [12618, 12652], "body": [{"type": "para", "indent": 4, "text": ["Attempts to produce deterministic result at increased render cost. Note\n    that full determinism isn\u2019t possible with multi-threaded renders since\n    there may be tiny variations on geometry between runs (applies to any\n    multi-threaded geometry processing such as precomputing normals,\n    displacement, subdivision). This normally does not affect non-guided\n    renders, but can cause butterfly effect with indirect guiding since the\n    smallest variation may affect how the guiding field is built, which causes\n    indirect rays to go in different directions, which leads to even more\n    variation in the next iteration, and so on."], "extent": [12728, 13373]}], "container": true, "attrs": {"id": "karma:global:guiding_deterministic", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Guiding Components"], "role": "item", "extent": [13373, 13404], "body": [{"type": "para", "indent": 4, "text": ["List of BSDF components that use guiding for sampling when indirect guiding\n    is enabled."], "extent": [13477, 13574]}], "container": true, "attrs": {"id": "karma:global:guiding_components", "kagroup": "Indirect Guiding"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Guiding Render From Scratch Post-Training"], "role": "item", "extent": [13574, 13628], "body": [{"type": "para", "indent": 4, "text": ["Clears AOVs when training is completed for indirect guiding so that the\n    pixel values accumulated during the training phase don\u2019t contribute to the\n    final render."], "extent": [13703, 13877]}], "container": true, "attrs": {"id": "karma:global:guiding_clearbuffers", "kagroup": "Indirect Guiding"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Shading "], "extent": [13877, 13893]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Ray Bias"], "role": "item", "extent": [13893, 13906], "body": [{"type": "para", "indent": 4, "text": ["The minimum distance used when testing if ", {"type": "em", "text": ["secondary rays"]}, " from a surface intersect with other objects in the scene. The distance is measure from surface along the direction of the ray. Objects within the ray bias distance are ignored."], "extent": [13959, 14200]}], "container": true, "attrs": {"id": "karma:global:raybias", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Automatic Ray Bias"], "role": "item", "extent": [14200, 14222], "body": [{"type": "para", "indent": 4, "text": ["Automatically compute ideal ray bias. Under Karma CPU, automatic bias\n    applies to everything except procedural mesh and continued rays for\n    partially opaque surfaces and nested dielectrics (the ", {"type": "q", "text": ["Ray Bias"]}, " property\n    is still used for those cases). Under Karma XPU, automatic bias applies to\n    polymesh path bounce and polymesh shadow rays only.  For everything else\n    (eg SSS, rounded-edge, nested dielectrics, points, curves etc\u2026) the \n    ", {"type": "q", "text": ["Ray Bias"]}, " property is still used."], "extent": [14279, 14774]}], "container": true, "attrs": {"id": "karma:global:autoraybias", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Constrain by Maximum Roughness"], "role": "item", "extent": [14774, 14808], "body": [{"type": "para", "indent": 4, "text": ["Roughness parameter in GGX BSDFs are clamped by the maximum roughness value\n    propagated down the ray chain in pathtracing. Enabling this option can cut\n    out a lot of noise in indirect specular (in particular, cases where glossy\n    surface is reflected by a rough specular surface) at the cost of a bit of\n    accuracy."], "extent": [14871, 15202]}], "container": true, "attrs": {"id": "karma:global:constrainmaxrough", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Color Limit"], "role": "item", "extent": [15202, 15217], "body": [{"type": "para", "indent": 4, "text": ["The maximum value a shading sample is allowed to contribute to an LPE image\n    plane to reduce appearance of ", {"type": "q", "text": ["fireflies"]}, " caused by undersampling of \n    extremely bright light sources. Note that reducing this value can result in\n    an overall reduction in the amount of light in your scene."], "extent": [15273, 15571]}], "container": true, "attrs": {"id": "karma:global:colorlimit", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Shared Color Limit"], "role": "item", "extent": [15571, 15593], "body": [{"type": "para", "indent": 4, "text": ["When enabled, indirect bounces use Color Limit value and Indirect Color\n    Limit parameter is ignored."], "extent": [15658, 15767]}], "container": true, "attrs": {"id": "karma:global:colorlimitindlinked", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Indirect Color Limit"], "role": "item", "extent": [15767, 15791], "body": [{"type": "para", "indent": 4, "text": ["Color limit applied to indirect bounce only. Note that this parameter is\n    ignored unless Shared Color Limit toggle is disabled."], "extent": [15855, 15991]}], "container": true, "attrs": {"id": "karma:global:colorlimitindirect", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Enable Depth of Field"], "role": "item", "extent": [15991, 16016], "body": [{"type": "para", "indent": 4, "text": ["Enable depth of field rendering."], "extent": [16072, 16110]}], "container": true, "attrs": {"id": "karma:global:enable_dof", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Automatic Headlight Creation"], "role": "item", "extent": [16110, 16142], "body": [{"type": "para", "indent": 4, "text": ["If there are no lights in the scene, a headlight is created by default. To\n    disable, turn off this checkbox. Note that this parameter is deprecated in\n    favor of ", {"type": "code", "text": ["Headlight Mode"]}, " in ", {"type": "code", "text": ["USD Render ROP"]}, " or ", {"type": "code", "text": ["--headlight"]}, " commandline\n    argument in ", {"type": "code", "text": ["husk"]}, "."], "extent": [16201, 16463]}], "container": true, "attrs": {"id": "karma:global:autoheadlight", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Background Holdouts Occlude Shadows"], "role": "item", "extent": [16463, 16501], "body": [{"type": "para", "indent": 4, "text": ["Prevent background holdouts from receiving shadows from non-holdouts if the\n    shadow rays are occluded by background holdouts. Disabling this can be\n    helpful in scenarios where the holdout mesh (and thus the cutout shape of\n    the shadow) doesn\u2019t match the shadows in the photo exactly, so you'd rather\n    render out the whole shadow and roto out unwanted parts in comp.\n    Note: Unsuppored under XPU."], "extent": [16562, 16977]}], "container": true, "attrs": {"id": "karma:global:bgoccludeshadow", "kagroup": "Shading"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Ambient Occlusion "], "extent": [16977, 17003]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Disable Lighting"], "role": "item", "extent": [17003, 17024], "body": [{"type": "para", "indent": 4, "text": ["Disable all lighting and material evaluation, using only the display color\n    to shade primitives."], "extent": [17096, 17201]}], "container": true, "attrs": {"id": "karma:global:disable_lighting", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Override Lighting"], "role": "item", "extent": [17201, 17222], "body": [{"type": "para", "indent": 4, "text": ["Override lighting in the scene.  There are several options:"], "extent": [17295, 17360]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Off: Use the lighting as defined on the USD stage"], "extent": [17360, 17416]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Emissive Objects:  Disable all light sources so that only emissive objects (geometry lights) are enabled."], "extent": [17416, 17528]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Headlight:  Disable all light sources and create a headlight"], "extent": [17528, 17595]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Dome Light:  Disable all light sources and create a dome light"], "extent": [17595, 17665]}], "container": true}], "container": true, "attrs": {"id": "karma:global:override_lighting", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Headlight AO Samples"], "role": "item", "extent": [17665, 17689], "body": [{"type": "para", "indent": 4, "text": ["When rendering in headlight mode, perform this many ambient occlusion\n    samples per shade."], "extent": [17760, 17858]}], "container": true, "attrs": {"id": "karma:global:head_ao_samples", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Headlight AO Distance"], "role": "item", "extent": [17858, 17883], "body": [{"type": "para", "indent": 4, "text": ["When rendering in headlight mode with ambient occlusion shading, this\n    distance is used for occlusion testing.  Smaller values will result in\n    faster, but less accurate shading."], "extent": [17955, 18144]}], "container": true, "attrs": {"id": "karma:global:head_ao_distance", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Headlight Fog Color"], "role": "item", "extent": [18144, 18167], "body": [{"type": "para", "indent": 4, "text": ["The color of the depthcue fog for disabled lighting."], "extent": [18242, 18300]}], "container": true, "attrs": {"id": "karma:global:head_depthcue_color", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Headlight Fog Alpha"], "role": "item", "extent": [18300, 18323], "body": [{"type": "para", "indent": 4, "text": ["The alpha for depthcue fog when lighting is disabled."], "extent": [18398, 18457]}], "container": true, "attrs": {"id": "karma:global:head_depthcue_alpha", "kagroup": "Ambient Occlusion"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Headlight Fog Distance"], "role": "item", "extent": [18457, 18483], "body": [{"type": "para", "indent": 4, "text": ["The near/far distance for depth cue fog when lighting is disabled.  If the\n    far distance is less than the near distance, fog will be disabled."], "extent": [18554, 18705]}], "container": true, "attrs": {"id": "karma:global:head_depthcue_z", "kagroup": "Ambient Occlusion"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Dicing "], "extent": [18705, 18720]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Camera"], "role": "item", "extent": [18720, 18738], "body": [{"type": "para", "indent": 4, "text": ["Specifies a camera that is used for dicing complicated surfaces.  This can\n    provide consistent dicing of surfaces when the viewing camera is moving."], "extent": [18795, 18952]}], "container": true, "attrs": {"id": "karma:global:dicingcamera", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Offscreen Quality"], "role": "item", "extent": [18952, 18973], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the shading quality scale factor for geometry that\n    is not directly visible to the camera. For geometry that is outside the\n    field of view (ie. visible only to secondary rays), karma will smoothly\n    reduce the shading quality based on the angle between the geometry and the\n    edge of the viewing frustum.  Smaller values can increase performance\n    particularly in scenes where the camera is within the displacement bound of\n    nearby geometry, where it permits the hidden primitives to be diced more\n    coarsely than those that are directly visible."], "extent": [19034, 19627]}], "container": true, "attrs": {"id": "karma:global:offscreenquality", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Quality Scale"], "role": "item", "extent": [19627, 19651], "body": [{"type": "para", "indent": 4, "text": ["This parameter is a global multiplier for dicing quality of all objects."], "extent": [19714, 19792]}], "container": true, "attrs": {"id": "karma:global:dicingqualityscale", "kagroup": "Dicing"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Image "], "extent": [19792, 19806]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Image Filters"], "role": "item", "extent": [19806, 19824], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["Image filters"], "fullpath": "/solaris/filters.html"}, " post-process the filtered pixels to produce the final image. This parameter takes a string containg a JSON-encoded list of filters and their arguments. Usually you don\u2019t need to craft this value by hand, it\u2019s computed by the Karma LOP from the values of filter-related parameters. See ", {"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["Karma filters"], "fullpath": "/solaris/filters.html"}, " for more information."], "extent": [19879, 20257]}], "container": true, "attrs": {"id": "karma:global:imagefilter", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Pixel Filter"], "role": "item", "extent": [20257, 20273], "body": [{"type": "para", "indent": 4, "text": ["Specifies the distribution of samples over pixels.  A box filter will\n    distribute samples randomly over the interior of each individual pixel.  A\n    Gaussian filter will distribute samples in a disk around the pixel center,\n    but with a Gaussian distribution (instead of a uniform distribution)."], "extent": [20328, 20635]}], "container": true, "attrs": {"id": "karma:global:pixelfilter", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Pixel Filter Size"], "role": "item", "extent": [20635, 20656], "body": [{"type": "para", "indent": 4, "text": ["This is the size of the Pixel Filter.  A Guassian filter with a filter size\n    of 1.8 will be slightly less blurry than a Gaussian filter with a filter\n    size of 2.0."], "extent": [20715, 20890]}], "container": true, "attrs": {"id": "karma:global:pixelfiltersize", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Sample Filter"], "role": "item", "extent": [20890, 20907], "body": [{"type": "para", "indent": 4, "text": ["Sample filters are used to modify samples before they are sent to pixel\n    filters."], "extent": [20963, 21053]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a list of filters.  These filters are specified as\n    a JSON list."], "extent": [21053, 21151]}], "container": true, "attrs": {"id": "karma:global:samplefilter", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Pixel Oracle"], "role": "item", "extent": [21151, 21167], "body": [{"type": "para", "indent": 4, "text": ["When rendering, a Pixel Oracle tells karma which pixels need additional\n    sampling and which pixels are converged. This parameter tells karma which oracle to use."], "extent": [21222, 21392]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["uniform"]}], "extent": [21392, 21407], "body": [{"type": "para", "indent": 8, "text": ["Uniformly distribute rays to each pixel.  Each pixel will always get the same number of ray-samples."], "extent": [21407, 21517]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["variance"]}], "extent": [21517, 21533], "body": [{"type": "para", "indent": 8, "text": ["Distribute rays based on variance in the rendered image."], "extent": [21533, 21599]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:global:pixeloracle", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Use Background"], "role": "item", "extent": [21599, 21617], "body": [{"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Off"]}, " disables Background IPR Filter. ", {"type": "q", "text": ["Auto"]}, " enables it only for IPR. ", {"type": "q", "text": ["On"]}, "\n    enables it for both IPR and off-line rendering."], "extent": [21675, 21807]}], "container": true, "attrs": {"id": "karma:global:use_background", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Background IPR Filter"], "role": "item", "extent": [21807, 21832], "body": [{"type": "para", "indent": 4, "text": ["JSON list of ", {"scheme": null, "value": "/solaris/filters", "type": "link", "text": ["image filters"], "fullpath": "/solaris/filters.html"}, " specifically for background image preview and\n    slap-comp of shadows and other holdout elements."], "extent": [21896, 22046]}], "container": true, "attrs": {"id": "karma:global:background_iprfilter", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["DCM Use Hit Distance"], "role": "item", "extent": [22046, 22070], "body": [{"type": "para", "indent": 4, "text": ["When enabled, Z and Zback channels in deep EXR use distance to the camera\n    instead of projected depth. This can be useful for deep compositing renders\n    with custom lens shaders that do not use perspective projection (e.g.\n    polar)."], "extent": [22128, 22373]}], "container": true, "attrs": {"id": "karma:global:dcm_usehitdist", "kagroup": "Image"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Advanced "], "extent": [22373, 22390]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cache Limit"], "role": "item", "extent": [22390, 22406], "body": [{"type": "para", "indent": 4, "text": ["Whether to use a fixed size cache (", {"type": "code", "text": ["karma:global:cachesize"]}, ") or whether to use a proportion of physical memory (", {"type": "code", "text": ["karma:global:cacheratio"]}, ")"], "extent": [22467, 22611]}], "container": true, "attrs": {"id": "karma:global:usecacheratio", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cache Memory Ratio"], "role": "item", "extent": [22611, 22633], "body": [{"type": "para", "indent": 4, "text": ["The proportion of physical memory Karma will use for its unified cache."], "extent": [22691, 22768]}, {"type": "para", "indent": 4, "text": ["For example, with the default ", {"type": "code", "text": ["vm_cacheratio"]}, " of ", {"type": "code", "text": ["0.25"]}, " and 16 Gb of\n    physical memory, Karma will use 4 Gb for its unified cache."], "extent": [22768, 22906]}, {"type": "para", "indent": 4, "text": ["The unified cache stores dynamic, unloadable data used by the render\n    including the following:"], "extent": [22906, 23009]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["2D ", {"type": "code", "text": [".rat"]}, " texture tiles"], "extent": [23009, 23039]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["3D ", {"type": "code", "text": [".i3d"]}, " texture tiles"], "extent": [23039, 23069]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["3D ", {"type": "code", "text": [".pc"]}, " point cloud pages (when not preloaded into memory)"], "extent": [23069, 23136]}], "container": true}, {"type": "para", "indent": 4, "text": ["Note:  This value is only used for off-line rendering, not IPR."], "extent": [23136, 23205]}], "container": true, "attrs": {"id": "karma:global:cacheratio", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cache Size (MB)"], "role": "item", "extent": [23205, 23224], "body": [{"type": "para", "indent": 4, "text": ["An explicit memory limit for the unified shading cache.  This is deprecated\n    in favor of using the ", {"type": "ui", "text": ["Cache Memory Ratio"]}, "."], "extent": [23281, 23412]}, {"type": "para", "indent": 4, "text": ["Note:  This value is only used for off-line rendering, not IPR."], "extent": [23412, 23481]}], "container": true, "attrs": {"id": "karma:global:cachesize", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Override Object Settings"], "role": "item", "extent": [23481, 23509], "body": [{"type": "para", "indent": 4, "text": ["Normally, geometry settings specified in the ", {"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": ["Render Settings LOP"], "fullpath": "/nodes/lop/rendersettings.html"}, " provide default values for objects. Each object can override the value of the default. With this parameter, the defaults specified on the Render Settings primitive will override the setting on every object."], "extent": [23571, 23874]}, {"type": "para", "indent": 4, "text": ["This property changes the behavior of corresponding properties on the ", {"type": "ui", "text": ["Default Geometry Settings"]}, ". Those properties act as fallbacks in case no local values exist directly on the prims, but by providing property names to the ", {"type": "ui", "text": ["Override Geometry Settings"]}, " field, you can tell Karma to change the behavior from a fallback to an override, but only for those properties."], "extent": [23874, 24249]}, {"type": "para", "indent": 4, "text": ["This parameter specifies a pattern of object property names whose values\n    will taken from the render settings, overriding any per-object settings.\n    For example, setting the pattern to ", {"type": "code", "text": ["diffuselimit"]}, " will override the\n    diffuse limit for all objects with the value specified on the render\n    settings LOP."], "extent": [24249, 24568]}, {"type": "para", "indent": 4, "text": ["You can use Houdini\u2019s standard ", {"scheme": null, "value": "/network/patterns", "type": "link", "text": ["pattern matching"], "fullpath": "/network/patterns.html"}, " syntax to override multiple properties at once. For example ", {"type": "code", "text": ["dicingdepth*"]}, " would match ", {"type": "code", "text": ["dicingdepthmin"]}, " and ", {"type": "code", "text": ["dicingdepthmax"]}, ". An example for a more complicated pattern is ", {"type": "code", "text": ["dicingdepth*,fakecaustic*,^fakecausticsopacity"]}, "."], "extent": [24568, 24862]}], "container": true, "attrs": {"id": "karma:global:overrideobject", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Random Seed"], "role": "item", "extent": [24862, 24877], "body": [{"type": "para", "indent": 4, "text": ["This is the random seed to use for the render."], "extent": [24935, 24987]}], "container": true, "attrs": {"id": "karma:global:randomseed", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cancel Render on Missing Texture"], "role": "item", "extent": [24987, 25023], "body": [{"type": "para", "indent": 4, "text": ["Enabling this option will cause karma to stop the render with an error if it encounters a missing texture map."], "extent": [25090, 25206]}], "container": true, "attrs": {"id": "karma:global:abortmissingtexture", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cancel Render on No Working GPU Devices"], "role": "item", "extent": [25206, 25249], "body": [{"type": "para", "indent": 4, "text": ["Enabling this option will cause karma to stop the render with an error if no working gpu devices are discovered."], "extent": [25313, 25431]}], "container": true, "attrs": {"id": "karma:global:abortnogpudevice", "kagroup": "Rendering"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Export Components"], "role": "item", "extent": [25431, 25452], "body": [{"type": "para", "indent": 4, "text": ["A whitespace-separated list of shading component names that will be\n    computed for export. If you have defined new component labels in your\n    materials, these can be added to the list so that they are exported for\n    per-component export planes. If you are not using some components, remove\n    them from the list to improve render efficiency."], "extent": [25512, 25866]}, {"type": "para", "indent": 4, "text": ["PBR light exports assume that this list is complete - that is, all\n    components created by shaders are listed. If there are unlisted components,\n    light exports may be missing illumination from these components."], "extent": [25866, 26087]}], "container": true, "attrs": {"id": "karma:global:exportcomponents", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Components"], "role": "item", "extent": [26087, 26109], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like diffuse\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [26170, 26437]}], "container": true, "attrs": {"id": "karma:global:diffusecomponents", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refract Components"], "role": "item", "extent": [26437, 26459], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like refract\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [26520, 26787]}], "container": true, "attrs": {"id": "karma:global:refractcomponents", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Components"], "role": "item", "extent": [26787, 26808], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like volume\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."], "extent": [26868, 27134]}], "container": true, "attrs": {"id": "karma:global:volumecomponents", "kagroup": "Image"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Components"], "role": "item", "extent": [27134, 27152], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of component types that will behave like subsurface\n    scatter bounces.  This will affect which reflection scope is used based on\n    the ray type and also which bounce limit to use.  Uncategorized component\n    types are assumed to be reflections."], "extent": [27209, 27487]}], "container": true, "attrs": {"id": "karma:global:ssscomponents", "kagroup": "Image"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" IPR "], "extent": [27487, 27499]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["IPR Inc Random"], "role": "item", "extent": [27499, 27518], "body": [{"type": "para", "indent": 4, "text": ["When rendering to the Solaris viewport, this causes each render to start\n    with a new random seed."], "extent": [27574, 27680]}], "container": true, "attrs": {"id": "karma:global:ipr_inc_random", "kagroup": "IPR"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["IPR Downsample Factor"], "role": "item", "extent": [27680, 27705], "body": [{"type": "para", "indent": 4, "text": ["The initial ", {"scheme": null, "value": "#karma:global:bucketsize", "type": "link", "text": ["bucket size"], "exists": true}, " for IPR rendering."], "extent": [27761, 27836]}], "container": true, "attrs": {"id": "karma:global:ipr_proxydepth", "kagroup": "IPR"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["IPR Denoise Bucket Size"], "role": "item", "extent": [27836, 27863], "body": [{"type": "para", "indent": 4, "text": ["As buckets are rendered, the coarse ", {"scheme": null, "value": "#karma:global:bucketsize", "type": "link", "text": ["bucket size"], "exists": true}, " decreases.\n    This specifies the bucket size at which Karma runs the de-noising filter on the image."], "extent": [27930, 28112]}], "container": true, "attrs": {"id": "karma:global:ipr_proxy_for_imagefilter", "kagroup": "IPR"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["IPR Reserve Threads"], "role": "item", "extent": [28112, 28135], "body": [{"type": "para", "indent": 4, "text": ["When rendering in IPR mode, reserve this number of threads for other\n    Houdini tasks."], "extent": [28196, 28289]}], "container": true, "attrs": {"id": "karma:global:ipr_reserve_threads", "kagroup": "IPR"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["IPR Continuous Dicing"], "role": "item", "extent": [28289, 28314], "body": [{"type": "para", "indent": 4, "text": ["When rendering in IPR mode, this setting controls whether Karma will\n    re-dice displacements and sub-division surface when the view transform\n    changes.  Continuous re-dicing of geometry can add significant time to\n    start-up time for the render, but will provide more accurate results."], "extent": [28380, 28679]}], "container": true, "attrs": {"id": "karma:global:ipr_continuous_dicing", "kagroup": "Dicing"}}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Texture Baking "], "extent": [28679, 28702]}, {"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Map Type"], "role": "item", "extent": [28702, 28715], "body": [{"type": "para", "indent": 4, "text": ["Type of texture baking to do. Can choose between UDIM and PTex texture\n    baking."], "extent": [28781, 28869]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_type", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Object ID"], "role": "item", "extent": [28869, 28882], "body": [{"type": "para", "indent": 4, "text": ["Object ID for the object that will be unwrapped for texture baking. Texture\n    baking will look for the objects in the scene that have the corresponding\n    object ID per type (low resolution, cage and high resolution) and assigns\n    them accordingly. There should only be one object per type "], "extent": [28953, 29254]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_object_id", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Tile"], "role": "item", "extent": [29254, 29262], "body": [{"type": "para", "indent": 4, "text": ["Tile number that this scene will be texture baking. For UDIM texture baking\n    this is the UDIM index (between 1001 and 9999). For PTEX texture baking,\n    faces are laid out onto paginated grids ordered from largest to smallest\n    area. The tile number refers to which page is being baked currently."], "extent": [29336, 29644]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_texture_tile", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["PTex Minimum Resolution"], "role": "item", "extent": [29644, 29671], "body": [{"type": "para", "indent": 4, "text": ["Minimum resolution of a single PTex face when doing PTex texture baking."], "extent": [29745, 29823]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_ptex_min_res", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["PTex Maximum Resolution"], "role": "item", "extent": [29823, 29850], "body": [{"type": "para", "indent": 4, "text": ["Maximum resolution of a single PTex face when doing PTex texture baking."], "extent": [29924, 30002]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_ptex_max_res", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["PTex Small Face Percent"], "role": "item", "extent": [30002, 30029], "body": [{"type": "para", "indent": 4, "text": ["Used with PTex relative scaling. Refers to how many quads should\n    approximately have resolutions less than the minimum resolution in relative\n    scaling. This value is only an estimate based on the approximate\n    lengths/widths of each face."], "extent": [30105, 30357]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_ptex_small_pct", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["PTex Relative Scaling"], "role": "item", "extent": [30357, 30382], "body": [{"type": "para", "indent": 4, "text": ["Used to enable relative scaling for PTex. Relative scaling attempts to\n    adjust the resolution of the PTex faces rendered based on the size of the\n    meshes and the Texture Baking Small Face Percent. Relative scaling will\n    adjust the minimum resolution so that a percent of the faces have less\n    resolution than this minimum. This percent is the Texture Baking Small Face\n    Percent"], "extent": [30458, 30855]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_ptex_rel_scale", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["PTex Scale"], "role": "item", "extent": [30855, 30869], "body": [{"type": "para", "indent": 4, "text": ["Used to adjust the scaling of PTex face resolutions when doing PTex baking."], "extent": [30941, 31023]}], "container": true, "attrs": {"id": "karma:global:uvunwrap_ptex_scale", "kagroup": "Texture Baking"}}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Default Geometry Settings"], "extent": [31023, 31057], "body": []}, {"level": 3, "type": "sep", "indent": 0, "text": [" Motion Blur "], "extent": [31057, 31078], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Enable Motion Blur"], "role": "item", "extent": [1776, 1799], "body": [{"type": "para", "indent": 4, "text": ["Whether to enable motion blur.  Changing this in the display options will\n    require a restart of the render."], "extent": [1854, 1970]}], "container": true, "attrs": {"id": "karma:object:mblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Velocity Blur"], "role": "item", "extent": [2692, 2709], "body": [{"type": "para", "indent": 4, "text": ["This parameter lets you choose what type of ", {"type": "em", "text": ["geometry velocity blur"]}, " to do on an object, if any. Separate from ", {"type": "em", "text": ["transform blur"]}, " and ", {"type": "em", "text": ["deformation blur"]}, ", you can render motion blur based on point movement, using attributes stored on the points that record change over time. You should use this type of blur if the number points in the geometry changes over time (for example, a particle simulation where points are born and die)."], "extent": [2764, 3197]}, {"type": "para", "indent": 4, "text": ["If your geometry changes topology frame-to-frame, Karma will not be able to interpolate the geometry to correctly calculate Motion Blur. In these cases, motion blur can use a ", {"type": "code", "text": ["velocities"]}, " and/or ", {"type": "code", "text": ["accelerations"]}, " attribute which is consistent even while the underlying geometry is changing. The surface of a fluid simulation is a good example of this. In this case, and other types of simulation data, the solvers will automatically create the velocity attribute."], "extent": [3197, 3664]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "text": [" "], "role": "item", "extent": [3664, 3675], "body": [{"type": "para", "indent": 8, "text": ["In Solaris, ", {"type": "code", "text": ["velocities"]}, ", ", {"type": "code", "text": ["accelerations"]}, ", and ", {"type": "code", "text": ["angularVelocities"]}, " attributes are equivalent to ", {"type": "code", "text": ["v"]}, ", ", {"type": "code", "text": ["accel"]}, ", and ", {"type": "code", "text": ["w"]}, " in SOPs, respectively."], "extent": [3675, 3825]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [3825, 3847], "body": [{"type": "para", "indent": 8, "text": ["Do not render motion blur on this object, even if the renderer is set to allow motion blur."], "extent": [3847, 3948]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [3948, 3967], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, you must compute and store point velocities in a point attribute ", {"type": "code", "text": ["velocities"]}, ". The renderer uses this attribute, if it exists, to render velocity motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["velocities"]}, " attribute may be created automatically by simulation nodes (such as particle DOPs), or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [3967, 4395]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [4395, 4478]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [4478, 4501], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, you must compute and store point acceleration in a point attribute ", {"type": "code", "text": ["accelerations"]}, ". The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [4501, 4927]}, {"type": "para", "indent": 8, "text": ["When Acceleration Blur is on, if the geometry has a ", {"type": "em", "text": ["angular velocity"]}, " attribute (", {"type": "code", "text": ["w"]}, "), rapid rotation will also be blurred. This should be a vector attribute, where the components represent rotation speeds in radians per second around X, Y, and Z."], "extent": [4927, 5185]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Velocity Blur"]}, " or ", {"type": "q", "text": ["Acceleration Blur"]}, ", deformation blur is not applied to the object. When this is set to ", {"type": "q", "text": ["Acceleration Blur"]}, ", use the ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, " property to set the number of acceleration samples."], "extent": [5185, 5430]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5430, 5440], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_velocity.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5440, 5500], "body": [{"type": "summary", "indent": 12, "text": ["Velocity motion blur used the velocity attribute (", {"type": "code", "text": ["velocities"]}, ") to do linear motion blur."], "extent": [5500, 5608]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5608, 5618], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5618, 5682], "body": [{"type": "summary", "indent": 12, "text": ["Acceleration motion blur uses the change in velocity to more accurately blur objects turning at high speed."], "extent": [5682, 5808]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5808, 5818], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_angular_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5818, 5890], "body": [{"type": "summary", "indent": 12, "text": ["Angular acceleration blur works with object spin, such as these fast-spinning cubes."], "extent": [5890, 5994]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Motion Samples from Stage"], "role": "item", "extent": [1970, 1999], "body": [{"type": "para", "indent": 4, "text": ["Instead of choosing the motion samples explicitly, Karma can also choose\n    the motion samples based on the samples authored on the Usd stage.  This\n    option will choose just the right number of samples to capture the motion\n    described on the stage."], "extent": [2065, 2326]}, {"type": "para", "indent": 4, "text": ["This setting applies to both transform and deformation motion samples for\n    both geometry and instances."], "extent": [2326, 2438]}, {"type": "para", "indent": 4, "text": ["Note:  If the samples on the stage don\u2019t align with the shutter times on\n    the camera, it\u2019s possible there will be some minor interpolation issues\n    over the first and last segments (since motion will be truncated rather\n    than interpolated)."], "extent": [2438, 2692]}], "container": true, "attrs": {"id": "karma:object:samplesfromstage", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Geometry Time Samples"], "role": "item", "extent": [5994, 6019], "body": [{"type": "para", "indent": 4, "text": ["The number of sub-frame samples to compute when rendering ", {"type": "em", "text": ["deformation"]}, " motion blur over the shutter open time. The default is 1 (sample only at the start of the shutter time), giving ", {"type": "strong", "text": ["no"]}, " deformation blur by default. If you want rapidly deforming geometry to blur properly, you must increase this value to 2 or more. Note that this value is limited by the number of sub-samples available in the USD file being rendered.  An exception to this is the USD Skel deformer which allows."], "extent": [6079, 6566]}, {"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Deformation"]}, " may refer to simple transformations at the Geometry (SOP) level, or actual surface deformation, such as a character or object which changes shape rapidly over the course of a frame."], "extent": [6566, 6767]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamplesSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [6767, 6834]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Objects whose deformations are quite complex within a single frame will require a higher number of Geo Time Samples."], "extent": [6834, 6956]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamples.jpg", "type": "img", "text": ""}], "role": "item", "extent": [6956, 7017]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Deformation blur also lets you blur ", {"type": "em", "text": ["attribute change"]}, " over the shutter time. For example, if point colors are changing rapidly as the object moves, you can blur the ", {"type": "code", "text": ["Cd"]}, " attribute."], "extent": [7017, 7204]}, {"type": "para", "indent": 4, "text": ["Increasing the number of Geo Time Samples ", {"type": "strong", "text": ["can have an impact"]}, " on the amount of memory Karma uses.  For each additional Sample, Karma must retain a copy of the geometry in memory while it samples across the shutter time. When optimizing your renders, it is a good idea to find the minimum number of Geo Time Samples necessary to create a smooth motion trail."], "extent": [7204, 7568]}, {"type": "para", "indent": 4, "text": ["Deformation blur is ignored for objects that have ", {"scheme": null, "value": "/render/blur#velocity", "type": "link", "text": ["Velocity motion blur"], "fullpath": "/render/blur.html#velocity", "fragment": "#velocity"}, " turned on."], "extent": [7568, 7679]}], "container": true, "attrs": {"id": "karma:object:geosamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Transform Time Samples"], "role": "item", "extent": [7679, 7705], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to compute when rendering ", {"type": "em", "text": ["transformation"]}, " motion blur over the shutter open time.  The default is 2 samples (at the start and end of the shutter time), giving one blurred segment."], "extent": [7767, 7975]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [7975, 8039]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["If you have object moving and changing direction extremely quickly, you might want to increase the number of samples to capture the sub-frame direction changes."], "extent": [8039, 8205]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleComplex.jpg", "type": "img", "text": ""}], "role": "item", "extent": [8205, 8270]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In the above example, it requires 40 transformation samples to correctly render the complex motion that occurs within one frame. (This amount of change within a single frame is very unusual and only used as a demonstration.)"], "extent": [8270, 8500]}, {"type": "para", "indent": 4, "text": ["Transformation blur simulates blur by interpolating each object\u2019s transformation between frames, so it\u2019s cheap to compute but does not capture surface deformation. To enable blurring deforming geometry, increase ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, "."], "extent": [8500, 8750]}], "container": true, "attrs": {"id": "karma:object:xformsamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Instance Velocity Blur"], "role": "item", "extent": [8750, 8776], "body": [{"type": "para", "indent": 4, "text": ["When defining motion blur on instances, the transform of each instance can be blurred in addition to any motion blur occurring on the prototype.  This option controls how the instance will compute the motion blur of the transform on each instance.  For example, when instancing prototypes to a particle system, you'd likely want to use velocity blur to compute motion blur (the transform on the prototype would be blurred by the velocity on the particles)."], "extent": [8840, 9302]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [9302, 9324], "body": [{"type": "para", "indent": 8, "text": ["Use deformation blur of the instance to compute the blur on the transform."], "extent": [9324, 9408]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [9408, 9427], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, the instance must be a point instancer with velocity attributes on the points."], "extent": [9427, 9537]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [9537, 9620]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [9620, 9643], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, the instance must be a point instancer with point velocities and acceleration values.  The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point Velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "; this will be converted to ", {"type": "code", "text": ["accelerations"]}, " when the SOP geometry is converted to USD."], "extent": [9643, 10157]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:instance_vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Instance Motion Samples"], "role": "item", "extent": [10157, 10184], "body": [{"type": "para", "indent": 4, "text": ["When motion blur on instances is computed using Acceleration Blur or Deformation Blur, this parameter specifies the number of motion segments used for motion blur."], "extent": [10250, 10419]}], "container": true, "attrs": {"id": "karma:object:instance_samples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Motion Blur Style"], "role": "item", "extent": [10419, 10440], "body": [{"type": "para", "indent": 4, "text": ["Specifies the style of motion the object has."], "extent": [10499, 10550]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Rotation Blur (default)"], "extent": [10550, 10579], "body": [{"type": "para", "indent": 8, "text": ["Rotates the object around the origin.  This is ideal for objects that spin."], "extent": [10579, 10664]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Linear Blur"], "extent": [10664, 10681], "body": [{"type": "para", "indent": 8, "text": ["This style of motion will not preserve the volume of rotating objects and will have linear motion instead of rotational arcs. Should only be used in special cases, i.e. with pivot transformations. Linear blur linearly interpolates the coefficients of the transformation matrix to achieve a correct blur."], "extent": [10681, 10994]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:blurstyle", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Velocity Blur Scale"], "role": "item", "extent": [27138, 27168], "body": [{"type": "para", "indent": 4, "text": ["Velocity multiplier used to reduce or exaggerate amount of motion blur on\n    volumes."], "extent": [27234, 27326]}], "container": true, "attrs": {"id": "karma:object:volumevblurscale", "kagroup": "Motion Blur"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Sampling "], "extent": [31660, 31677], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Samples"], "role": "item", "extent": [14975, 14994], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect diffuse shading.  A value of one\n    translates to roughly one additional diffuse sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional diffuse\n    samples per shading computation."], "extent": [15055, 15307]}], "container": true, "attrs": {"id": "karma:object:diffusesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflect Samples"], "role": "item", "extent": [15307, 15326], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect reflection shading.  A value of one\n    translates to roughly one additional reflection sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional reflection\n    samples per shading computation."], "extent": [15387, 15648]}], "container": true, "attrs": {"id": "karma:object:reflectsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refract Samples"], "role": "item", "extent": [15648, 15667], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect refraction shading.  A value of one\n    translates to roughly one additional refraction sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional refraction\n    samples per shading computation."], "extent": [15728, 15989]}], "container": true, "attrs": {"id": "karma:object:refractsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Samples"], "role": "item", "extent": [15989, 16007], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect volumetric shading.  A value of one\n    translates to roughly one additional volumetric sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional volumetric\n    samples per shading computation."], "extent": [16067, 16328]}], "container": true, "attrs": {"id": "karma:object:volumesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Samples"], "role": "item", "extent": [16328, 16343], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect sub-surface scattering shading.  A value\n    of one translates to roughly one additional sub-surface scattering sample\n    per shading computation.  A sample of 4 translates to roughly 4 additional\n    sub-surface scattering samples per shading computation."], "extent": [16400, 16697]}], "container": true, "attrs": {"id": "karma:object:ssssamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Step Rate"], "role": "item", "extent": [23927, 23947], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling_tab/VolumeQuality.jpg", "type": "img", "text": ""}], "role": "item", "extent": [24008, 24076]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["How finely or coarsely a volume is sampled as a ray travels through it.\n    Volumetric objects are made up of 3d structures called Voxels, the\n    value of this parameter represents the number of voxels a ray will\n    travel through before performing another sample."], "extent": [24076, 24348]}, {"type": "para", "indent": 4, "text": ["The default value is ", {"type": "code", "text": ["0.25"]}, ", which means that every one of every four\n    voxels will be sampled. A value of ", {"type": "code", "text": ["1"]}, " would mean that all voxels are\n    sampled and a value of 2 would mean that all voxels are sampled twice. This\n    means that the volume step rate value behaves in a similar way to pixel\n    samples, acting as a multiplier on the total number of samples for\n    volumetric objects."], "extent": [24348, 24748]}, {"type": "para", "indent": 4, "text": ["Keep in mind that increasing the volume step rate can dramatically increase\n    render times, so it should only be adjusted when necessary. Also, while\n    increasing the default from ", {"type": "code", "text": ["0.25"]}, " can reduce volumetric noise, increasing\n    the value beyond ", {"type": "code", "text": ["1"]}, " will rarely see similar results."], "extent": [24748, 25042]}], "container": true, "attrs": {"id": "karma:object:volumesteprate", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Secondary Noise Level"], "role": "item", "extent": [36957, 36983], "body": [{"type": "para", "indent": 4, "text": ["Noise threshold to determine the number of indirect rays cast for indirect bounce when the Convergence Mode is set to ", {"type": "q", "text": ["Automatic"]}, ". Decreasing this threshold (for example, to ", {"type": "code", "text": ["0.001"]}, ") will theoretically send more indirect rays and decrease noise, however the ", {"type": "q", "text": ["extra"]}, " rays will likely be cancelled out by the ", {"type": "ui", "text": ["Max Ray Samples"]}, " parameter. The correct way to decrease noise is to increase the number of samples per pixel, rather than change this threshold."], "extent": [37047, 37507]}, {"type": "para", "indent": 4, "text": ["If you are using Variance Pixel Oracle, you should set the same value for both threshold parameters. Setting the oracle\u2019s threshold lower may make the indirect component reach its threshold sooner and cast fewer indirect rays, but the oracle decides to cast more expensive camera rays because the amount of final noise in the beauty pass is higher than the oracle\u2019s threshold."], "extent": [37507, 37889]}], "container": true, "attrs": {"id": "karma:object:varianceaa_thresh", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Min Secondary Samples"], "role": "item", "extent": [37889, 37915], "body": [{"type": "para", "indent": 4, "text": ["Minimum number of rays to cast in per-component variance anti-aliasing."], "extent": [37983, 38060]}], "container": true, "attrs": {"id": "karma:object:varianceaa_minsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Max Secondary Samples"], "role": "item", "extent": [38060, 38086], "body": [{"type": "para", "indent": 4, "text": ["Maximum number of rays to cast in per-component variance anti-aliasing."], "extent": [38154, 38231]}], "container": true, "attrs": {"id": "karma:object:varianceaa_maxsamples", "kagroup": "Sampling"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Limits "], "extent": [32402, 32417], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Limit"], "role": "item", "extent": [16697, 16714], "body": [{"type": "para", "indent": 4, "text": ["The number of times diffuse rays can propagate through your scene."], "extent": [16771, 16843]}, {"type": "para", "indent": 4, "text": ["Unlike the Reflect and Refract Limits, this parameter will increase the overall amount of light in your scene and contribute to the majority of global illumination. With this parameter set above zero diffuse surfaces will accumulate light from other objects in addition to direct light sources."], "extent": [16843, 17143]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17143, 17153], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17153, 17226], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 0"], "extent": [17226, 17261]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17261, 17271], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17271, 17344], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 1"], "extent": [17344, 17379]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17379, 17389], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17389, 17462], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 2"], "extent": [17462, 17497]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In this example, increasing the Diffuse Limit has a dramatic effect on the appearance of the final image. To replicate realistic lighting conditions, it is often necessary to increase the Diffuse Limit. However, since the amount of light contribution usually decreases with each diffuse bounce, increasing the Diffuse Limit beyond 4 does little to improve the visual fidelity of a scene. Additionally, increasing the Diffuse Limit can dramatically increase noise levels and render times."], "extent": [17497, 17990]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/DiffuseSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17990, 18063]}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:diffuselimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflection Limit"], "role": "item", "extent": [18336, 18356], "body": [{"type": "para", "indent": 4, "text": ["The number of times a ray can be reflected in your scene."], "extent": [18413, 18476]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [18476, 18541]}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [18541, 18610], "body": [{"type": "para", "indent": 8, "text": ["This example shows a classic ", {"type": "q", "text": ["Hall of Mirrors"]}, " scenario with the subject placed between two mirrors."], "extent": [18610, 18720]}, {"type": "para", "indent": 8, "text": ["This effectively creates an infinite series of reflections."], "extent": [18720, 18789]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [18789, 18861]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is reflected in an object, it is considered a direct reflection. Therefore, even with Reflect Limit set to 0, you will still see specular reflections of light sources."], "extent": [18861, 19078]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19078, 19088], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19088, 19164], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 0"], "extent": [19164, 19202]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19202, 19212], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19212, 19288], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 1"], "extent": [19288, 19326]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19326, 19336], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19336, 19412], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 2"], "extent": [19412, 19450]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["From this camera angle the reflection limits are very obvious and have a large impact on the accuracy of the final image. However, in most cases the        reflection limit will be more subtle, allowing you to reduce the number of reflections in your scene and optimize the time it takes to render them."], "extent": [19450, 19759]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:reflectlimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refraction Limit"], "role": "item", "extent": [19793, 19813], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19870, 19935], "body": [{"type": "para", "indent": 8, "text": ["This parameter control the number of times a ray be refracted in your scene."], "extent": [19935, 20021]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [20021, 20091], "body": [{"type": "para", "indent": 8, "text": ["This example shows a simple scene with ten grids all in a row."], "extent": [20091, 20163]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20163, 20235], "body": [{"type": "para", "indent": 8, "text": ["By applying a refractive shader, we will be able see through the grids to an image of a sunset in the background."], "extent": [20235, 20358]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20358, 20431], "body": [{"type": "para", "indent": 8, "text": ["From this camera angle, in order for the image to be accurate, the refraction limit must match the number of grids that that are in the scene. However, most scenes will not have this number of refractive objects all in a row and so it is possible to reduce the refract limit without affecting the final image while also reducing the time it takes to render them."], "extent": [20431, 20803]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitSurfaces.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20803, 20876], "body": [{"type": "para", "indent": 8, "text": ["Keep in mind that this Refract Limit refers to the number of surfaces that the ray must travel through, not the number of objects."], "extent": [20876, 21016]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is refracted through a surface, it is considered a direct refraction. Therefore, even with Refract Limit set to 0, you will see refractions of Light Sources. However, since most objects in your scene will have at least two surfaces between it and the light source, direct refractions are often not evident in your final render."], "extent": [21016, 21393]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:refractlimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Limit"], "role": "item", "extent": [21427, 21443], "body": [{"type": "para", "indent": 4, "text": ["The number of times a volumetric ray can propagate through a scene. It functions in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [21499, 21642]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [21642, 21706]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Increasing the Volume Limit parameter will result in much more realistic volumetric effects. This is especially noticeable in situations where only part of a volume is receiving direct lighting. Also, in order for a volumetric object to receive indirect light from other objects, the Volume Limit parameter must be set above 0."], "extent": [21706, 22039]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [22039, 22110]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["With the Volume Limit set to values above zero, the fog volume takes on the characteristic light scattering you would expect from light traveling through a volume. However, as with the Diffuse Limit, the light contribution generally decreases with each bounced ray and therefore using values above 4 does not necessarily result in a noticeably more realistic image."], "extent": [22110, 22481]}, {"type": "para", "indent": 4, "text": ["Also, increasing the value of this parameter can dramatically increase the amount of time spent rendering volumetric images."], "extent": [22481, 22611]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:volumelimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Limit"], "role": "item", "extent": [22645, 22658], "body": [{"type": "para", "indent": 4, "text": ["The number of times a SSS ray can propagate through a scene. It functions\n    in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [22711, 22851]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:ssslimit", "kagroup": "Limits"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Volume "], "extent": [32799, 32814], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume"], "role": "item", "extent": [25446, 25464], "body": [{"type": "para", "indent": 4, "text": ["Whether to render this object as if it was a uniform-density volume. Using\n    this property on surface geometry is more efficient than actually creating\n    a volume object of uniform density, since the renderer can assume that the\n    volume density is uniform and place samples more optimally. The surface\n    normal of the surface is used to determine which side of the surface will\n    render as a volume - the normal will point away from the interior. The\n    surface need not be closed - if the surface is not closed, the volume will\n    extend an infinite distance away from the surface. Non-closed surfaces may\n    produce unexpected results near the edge of the surface, so try to keep the\n    viewing camera away from the edges."], "extent": [25530, 26275]}], "container": true, "attrs": {"id": "karma:object:volumeuniform", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Density"], "role": "item", "extent": [26275, 26301], "body": [{"type": "para", "indent": 4, "text": ["Determines how the samples are distributed when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). This parameter must match the\n    density on the uniform volume shader in order to produce correct results.\n    Note that this property is deprecated in 20.0."], "extent": [26374, 26660]}], "container": true, "attrs": {"id": "karma:object:volumeuniformdensity", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Samples"], "role": "item", "extent": [26660, 26686], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to generate when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). The samples will be distributed\n    so as to produce an equal image contribution if they were all equal in\n    brightness. Note that this property has no effect when global Screendoor\n    Limit is greater than 0, so for all practical purposes it is deprecated."], "extent": [26759, 27138]}], "container": true, "attrs": {"id": "karma:object:volumeuniformsamples", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Sampling Field"], "role": "item", "extent": [28050, 28075], "body": [{"type": "para", "indent": 4, "text": ["Specifies the volume field by name that will be used for empty space\n    culling. By default karma will use the 'density' field if it exists. If you\n    are rendering an emissive volume in which some parts of the volume have a 0\n    density but still need to be rendered, you should specify a different field\n    using this parameter."], "extent": [28143, 28483]}], "container": true, "attrs": {"id": "karma:object:volumesamplingchannel", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Filter"], "role": "item", "extent": [28483, 28500], "body": [{"type": "para", "indent": 4, "text": ["Some volume primitives can use a filter during evaluation of volume\n    channels. This specifies the filter.  The default box filter is fast to\n    evaluate and produces sharp renders for most smooth fluid simulations.  If\n    your voxel data contains aliasing (stairstepping along edges), you may need\n    to use a larger filter width or smoother filter to produce acceptable\n    results.  For aliased volume data, ", {"type": "code", "text": ["gauss"]}, " is a good filter with a filter\n    width of 1.5."], "extent": [28559, 29037]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["point"]}], "extent": [29037, 29051]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["box"]}], "extent": [29051, 29063]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["gauss"]}], "extent": [29063, 29077]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["bartlett"]}], "extent": [29077, 29094]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["blackman"]}], "extent": [29094, 29111]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["catrom"]}], "extent": [29111, 29126]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["hanning"]}], "extent": [29126, 29142]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["mitchell"]}], "extent": [29142, 29160]}], "container": true}], "container": true, "attrs": {"id": "karma:object:volumefilter", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Filter Width"], "role": "item", "extent": [29160, 29183], "body": [{"type": "para", "indent": 4, "text": ["This specifies the filter width for the ", {"type": "q", "text": ["Volume Filter"]}, " property. The\n    filter width is specified in number of voxels. Larger filter widths take\n    longer to render and produce blurrier renders, but may be necessary to\n    combat aliasing in some kinds of voxel data."], "extent": [29247, 29523]}], "container": true, "attrs": {"id": "karma:object:volumefilterwidth", "kagroup": "Sampling"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Shading "], "extent": [33309, 33325], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Quality"], "role": "item", "extent": [22885, 22904], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect diffuse component."], "extent": [22965, 23097]}], "container": true, "attrs": {"id": "karma:object:diffusequality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflection Quality"], "role": "item", "extent": [23097, 23119], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect reflect component."], "extent": [23180, 23312]}], "container": true, "attrs": {"id": "karma:object:reflectquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refraction Quality"], "role": "item", "extent": [23312, 23334], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect refract component."], "extent": [23395, 23527]}], "container": true, "attrs": {"id": "karma:object:refractquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Quality"], "role": "item", "extent": [23527, 23545], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect volume component."], "extent": [23605, 23736]}], "container": true, "attrs": {"id": "karma:object:volumequality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Quality"], "role": "item", "extent": [23736, 23751], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for SSS component."], "extent": [23808, 23927]}], "container": true, "attrs": {"id": "karma:object:sssquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cusp Angle"], "role": "item", "extent": [14651, 14665], "body": [{"type": "para", "indent": 4, "text": ["If there are no normals on an object, any edges with a dihedral angle greater than this value will be cusped.  For compatibility with ", {"type": "code", "text": ["mantra"]}, ", Karma will also look for a detail attribute named ", {"type": "code", "text": ["vm_cuspangle"]}, " (which takes priority over the setting)."], "extent": [14720, 14975]}], "container": true, "attrs": {"id": "karma:object:cuspangle", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Holdout Mode"], "role": "item", "extent": [29523, 29539], "body": [{"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Matte"]}, " mode, the object will be considered to be a\n    cutout matte. Any lighting contribution and alpha of the object will be\n    redirected to LPE AOVs with ", {"type": "q", "text": ["holdouts"]}, " prefix. Holdout Mode does not affect\n    the utility AOVs such as ", {"type": "code", "text": ["ray:hitP"]}, " and ", {"type": "code", "text": ["ray:hitN"]}, ".\n    ", {"type": "q", "text": ["Background"]}, " mode is similar to ", {"type": "q", "text": ["Matte"]}, ", except it\u2019s used for background\n    plate so it will appear ", {"type": "q", "text": ["pre-lit"]}, " in indirect bounces, multiplied by shadow\n    contribution. Diffuse albedo of the shader is used to determine the pre-lit\n    irradiance."], "extent": [29596, 30138]}], "container": true, "attrs": {"id": "karma:object:holdoutmode", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Fix Shadow Terminator"], "role": "item", "extent": [31462, 31487], "body": [{"type": "para", "indent": 4, "text": ["Adjust shading position of shadow rays to avoid self-shadowing artifact on\n    low-poly mesh due to discrepancy between smooth normals and face normals."], "extent": [31540, 31698]}], "container": true, "attrs": {"id": "karma:object:smoothp", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Bump Shadow Terminator"], "role": "item", "extent": [31698, 31724], "body": [{"type": "para", "indent": 4, "text": ["With strong bump or normal maps you often see an abrupt/hard shadow terminator line. This parameter is a threshold and you enter an angle in radians: for angles that are smaller than or equal to the entered value, you will get a soft shadow terminator. If the angle is greater than the threshold, a hard terminator appears. A value of ", {"type": "code", "text": ["0"]}, " disables the feature and you\u2019ll always see a hard shadow terminator. ", {"type": "ui", "text": ["Bump Shadow Terminator"]}, " preserves the shape of the highlights while softening the terminator."], "extent": [31790, 32300]}], "container": true, "attrs": {"id": "karma:object:bumpshadowterminator", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["LPE Tag"], "role": "item", "extent": [32300, 32311], "body": [{"type": "para", "indent": 4, "text": ["Custom label assigned to lights or objects for use with ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expression"], "fullpath": "/render/lpe.html"}, "."], "extent": [32363, 32461]}], "container": true, "attrs": {"id": "karma:object:lpetag", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Direct Refraction Subset"], "role": "item", "extent": [33303, 33331], "body": [{"type": "para", "indent": 4, "text": ["For compound BSDFs with refractive components, only apply direct lighting\n    for lights that belong in specified location. A light ray facing the same\n    direction as geometry normal is considered ", {"type": "q", "text": ["Outside"]}, ". For transparent\n    material that are solid/closed-manifold, setting this parameter to\n    ", {"type": "q", "text": ["Outside"]}, " can improve render performance by reducing noise in direct\n    lighting and cut down on wasted shadow rays."], "extent": [33388, 33812]}], "container": true, "attrs": {"id": "karma:object:lightsubset", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dielectric Priority"], "role": "item", "extent": [33812, 33835], "body": [{"type": "para", "indent": 4, "text": ["Specifies the priority of a refractive material, allowing the renderer to \n    choose which of many overlapping refractive materials should take precedence \n    while rendering.  This enables effects like water in a glass with ice cubes. \n    The default (highest priority) is 0, and as the number increases (1, 2, 3, etc.), \n    the priority decreases."], "extent": [33899, 34258]}], "container": true, "attrs": {"id": "karma:object:dielectricpriority", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Enable Caustics"], "role": "item", "extent": [34258, 34278], "body": [{"type": "para", "indent": 4, "text": ["Brute-force caustics from transmissive objects. Allows evaluation of \n    glossy BSDF that\u2019s seen by indirect diffuse bounce. Often requires a \n    significantly higher number of diffuse rays to resolve, especially if \n    Caustics Roughness Clamp parameter is set to very small value or \n    Indirect Guiding feature is disabled."], "extent": [34338, 34674]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [34674, 34684], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_fake.jpg", "type": "img", "text": ""}], "role": "item", "extent": [34684, 34755], "body": [{"type": "summary", "indent": 12, "text": ["Fake Caustics"], "extent": [34755, 34787]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [34787, 34797], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_true.jpg", "type": "img", "text": ""}], "role": "item", "extent": [34797, 34868], "body": [{"type": "summary", "indent": 12, "text": ["True Caustics"], "extent": [34868, 34902]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:causticsenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Caustics Roughness Clamp"], "role": "item", "extent": [34902, 34931], "body": [{"type": "para", "indent": 4, "text": ["Forces a minimal roughness for true caustics, above what the shader has set. Increasing this value can make caustics less noisy at the cost of accuracy."], "extent": [34999, 35157]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35157, 35167], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35167, 35244], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0"], "extent": [35244, 35284]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35284, 35294], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35294, 35371], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.2 (default)"], "extent": [35371, 35423]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35423, 35433], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35433, 35510], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.5"], "extent": [35510, 35552]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35552, 35562], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness4.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35562, 35639], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.8"], "extent": [35639, 35682]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [35682, 35692], "body": [{"type": "para", "indent": 8, "text": ["Roughness clamp only works with GGX BSDF and may not have any effect\n        with Phong, cone, or specular BSDFs."], "extent": [35692, 35815]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:causticsroughnessclamp", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Enable Internal Reflection"], "role": "item", "extent": [36560, 36591], "body": [{"type": "para", "indent": 4, "text": ["Lets you evaluate the internal reflection on the backface of a glossy transmissive BSDF.\n    Turn on this option to apply internal reflections. Note that this option has no effect on \n    MaterialX Standard Surfaces with Thin Walled turned on: these materials always show internal reflections."], "extent": [36658, 36957]}], "container": true, "attrs": {"id": "karma:object:internalreflectenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Evaluate BSDF On Fake Caustics"], "role": "item", "extent": [35815, 35850], "body": [{"type": "para", "indent": 4, "text": ["Allows the BSDF to affect the fake caustics, meaning (eg) a red bottle will automatically cast red shadows.\n    Disabling the BSDF can reduce render times, but means fakecausticscolor should be used instead to set a constant shadow color."], "extent": [35918, 36162]}], "container": true, "attrs": {"id": "karma:object:fakecausticsbsdfenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Fake Caustics Color"], "role": "item", "extent": [36162, 36186], "body": [{"type": "para", "indent": 4, "text": ["Tints the fake caustics. Use this to darken the result of the BDSF, or to set a constant shadow color if the BSDF is disabled."], "extent": [36249, 36381]}], "container": true, "attrs": {"id": "karma:object:fakecausticscolor", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Fake Caustics Opacity"], "role": "item", "extent": [36381, 36407], "body": [{"type": "para", "indent": 4, "text": ["Controls the opacity of fake caustics. Use this to lighten the result of the BDSF."], "extent": [36472, 36560]}], "container": true, "attrs": {"id": "karma:object:fakecausticsopacity", "kagroup": "Shading"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Light "], "extent": [34759, 34773], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Treat As Light Source"], "role": "item", "extent": [38231, 38256], "body": [{"type": "para", "indent": 4, "text": ["Any object with an emissive material will generate light within the\n    scene.  If an object is significant enough (eg size, brightness, etc\u2026)\n    then it is possible for Karma to treat that object as if it were an\n    explicit lightsource (similar to regular lights), meaning the emitted\n    light will be handled much more efficiently.  But doing so will add\n    extra overhead elsewhere in the system (eg increased memory usage,\n    slower update times, etc\u2026)."], "extent": [38320, 38793]}, {"type": "para", "indent": 4, "text": ["There are three options.  ", {"type": "q", "text": ["No"]}, " will set the object as not being\n    a lightsource.  ", {"type": "q", "text": ["Yes"]}, " will set the object as being a lightsource.\n    ", {"type": "q", "text": ["Auto"]}, " (default) means Karma will use an internal heuristic\n    to decide if the object should be treated as a lightsource."], "extent": [38793, 39060]}], "container": true, "attrs": {"id": "karma:object:treat_as_lightsource", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "extent": [39431, 39457], "body": [{"type": "para", "indent": 4, "text": ["When an object is used as a geometry light source, this sets the per-light\n    sampling quality.  Increasing the quality will add additional samples for\n    this light source, improving the sampling quality of this light relative to\n    other light sources."], "extent": [39531, 39794]}, {"type": "para", "indent": 4, "text": ["Note: This is not the quality of light received by an object."], "extent": [39794, 39861]}], "container": true, "attrs": {"id": "karma:object:lightsource_samplingquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Source Diffuse Multiplier"], "role": "item", "extent": [39861, 39896], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the diffuse, SSS,\n    and volume response of materials"], "extent": [39964, 40079]}], "container": true, "attrs": {"id": "karma:object:lightsource_diffusescale", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Source Specular Multiplier"], "role": "item", "extent": [40079, 40115], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the reflection and\n    refraction response of materials"], "extent": [40184, 40300]}], "container": true, "attrs": {"id": "karma:object:lightsource_specularscale", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Is Portal"], "role": "item", "extent": [39060, 39073], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the object will turn into a ", {"type": "q", "text": ["light portal"]}, " that only lets in\n    certain portion of dome lights based on portal geometry visibility."], "extent": [39125, 39277]}], "container": true, "attrs": {"id": "karma:object:isportal", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Portal Dome Lights"], "role": "item", "extent": [39277, 39299], "body": [{"type": "para", "indent": 4, "text": ["Space-separated list of dome lights to associate this portal with."], "extent": [39359, 39431]}], "container": true, "attrs": {"id": "karma:object:portaldomelights", "kagroup": "Light"}}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/nodes/lop/rendergeometrysettings#inputs:karma:light:contributes_caustic", "type": "include", "indent": 5, "role": "item", "extent": [35284, 35374]}, {"ext": "/nodes/lop/rendergeometrysettings#inputs:karma:light:samplingmode", "type": "include", "indent": 5, "role": "item", "extent": [35374, 35458]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Geometry "], "extent": [35458, 35475], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Points As"], "role": "item", "extent": [30138, 30158], "body": [{"type": "para", "indent": 4, "text": ["When rendering point clouds, they can be rendered as camera oriented\n    discs, spheres or discs oriented to the normal attribute."], "extent": [30216, 30352]}], "container": true, "attrs": {"id": "karma:object:point_style", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Curves As"], "role": "item", "extent": [30352, 30372], "body": [{"type": "para", "indent": 4, "text": ["When rendering curves, they can be rendered as ribbons oriented to face\n    the camera, rounded tubes or ribbons oriented to the normal attribute\n    attached to the points."], "extent": [30430, 30609]}], "container": true, "attrs": {"id": "karma:object:curve_style", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Override Curves Basis"], "role": "item", "extent": [30609, 30634], "body": [{"type": "para", "indent": 4, "text": ["USD supports Curve Basis types that may not be supported directly in\n    Houdini.  In some cases, you may want to override the Houdini curve basis.\n    For example, if you have linear curves in Houdini, you may want to render\n    them with a Bezier, B-Spline or Catmull-Rom basis.  This menu will force\n    Karma to override the basis that\u2019s tied to the USD primitives."], "extent": [30692, 31067]}, {"type": "para", "indent": 4, "text": ["Note that the topology of the curves must match the target basis.  For\n    example, when selecting any cubic curve basis, every curves must have at\n    least 4 vertices.  For the Bezier basis, curves must have 4 + 3*N vertices."], "extent": [31067, 31300]}], "container": true, "attrs": {"id": "karma:object:curve_basis", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cull Backface"], "role": "item", "extent": [31300, 31317], "body": [{"type": "para", "indent": 4, "text": ["If enabled, geometry that are facing away from the camera are not\n    rendered."], "extent": [31377, 31462]}], "container": true, "attrs": {"id": "karma:object:cull_backface", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Orientation"], "role": "item", "extent": [32961, 32976], "body": [{"type": "para", "indent": 4, "text": ["May be queried via ", {"scheme": null, "value": "/vex/functions/objectstate", "type": "link", "text": ["objectstate"], "fullpath": "/vex/functions/objectstate.html"}, " vex function\n    and will be ", {"type": "q", "text": ["rightHanded"]}, " or ", {"type": "q", "text": ["leftHanded"]}, " depending on the geometry\u2019s\n    winding order. This property is derived from USD geometry\u2019s orientation\n    attribute and not directly settable."], "extent": [33034, 33303]}], "container": true, "attrs": {"id": "karma:object:orientation", "kagroup": "Geometry"}}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Dicing "], "extent": [35859, 35874], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["True Displacements"], "role": "item", "extent": [12781, 12803], "body": [{"type": "para", "indent": 4, "text": ["This setting controls how the displacement shader on the object will be run."], "extent": [12860, 12942]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Bump Mapped Displacement"], "extent": [12942, 12972], "body": [{"type": "para", "indent": 8, "text": ["The displacement shader is run, but only modifies the surface normal. This does not dice geometry and can save memory. With Karma XPU, this option only works in conjunction with float-based displacement maps. Also make sure to set the ", {"scheme": "Node", "value": "/nodes/vop/mtlximage", "type": "link", "text": ["MtlX Image VOP\u2019s"], "fullpath": "/nodes/vop/mtlximage.html"}, " ", {"type": "ui", "text": ["Signature"]}, " drop down menu to ", {"type": "ui", "text": ["Float"]}, ". Vector-based displacement maps are not supported in Karma XPU with this mode turned on."], "extent": [12972, 13385]}, {"type": "para", "indent": 8, "text": ["Please also note that this mode generally doesn\u2019t work with Karma XPU when you mix two or more ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface VOPs"], "fullpath": "/nodes/vop/mtlxstandard_surface.html"}, "."], "extent": [13385, 13549]}], "container": true}, {"type": "dt", "indent": 4, "text": ["True Displacement"], "extent": [13549, 13572], "body": [{"type": "para", "indent": 8, "text": ["The geometry is diced and displaced.  This will cause proper silhouettes and shadowing of displaced surfaces."], "extent": [13572, 13691]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Disable Displacement Shader"], "extent": [13691, 13724], "body": [{"type": "para", "indent": 8, "text": ["Disable the displacement shader entirely.  There will be no bump mapping or displaced geometry."], "extent": [13724, 13829]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:truedisplace", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Quality"], "role": "item", "extent": [10994, 11012], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for smooth surfaces (subdivision surfaces and displaced surfaces).  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [11070, 11452]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"type": "code", "text": ["karma:object:dicingquality"]}, " ", {"type": "strong", "text": ["squared"]}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."], "extent": [11452, 11737]}], "container": true, "attrs": {"id": "karma:object:dicingquality", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Flatness"], "role": "item", "extent": [11737, 11756], "body": [{"type": "para", "indent": 4, "text": ["This property controls the tesselation levels for nearly flat primitives. By increasing the value, more primitives will be considered flat and will be sub-divided less. Turn this option ", {"type": "em", "text": ["down"]}, " for more accurate (less optimized) nearly-flat surfaces."], "extent": [11815, 12070]}], "container": true, "attrs": {"id": "karma:object:dicingflatness", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Minimum Depth"], "role": "item", "extent": [12070, 12094], "body": [{"type": "para", "indent": 4, "text": ["When not set to -1, karma will set minimum number of rows and columns on each face to be 2 to the power of this value when dicing for subdivision or displacement."], "extent": [12153, 12321]}], "container": true, "attrs": {"id": "karma:object:dicingdepthmin", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Maximum Depth"], "role": "item", "extent": [12321, 12345], "body": [{"type": "para", "indent": 4, "text": ["When not set to ", {"type": "code", "text": ["-1"]}, ", Karma will set maximum number of rows and columns on each face to be 2 to the power of this value when dicing for subdivision or displacement. Setting the same (or lower) value as ", {"type": "q", "text": ["Dicing Minimum Depth"]}, " is effectively equivalent to fixed parametric subdivision that ignores raster space/offscreen measurement. Recommended leaving this value at ", {"type": "code", "text": ["-1"]}, "."], "extent": [12404, 12781]}], "container": true, "attrs": {"id": "karma:object:dicingdepthmax", "kagroup": "Dicing"}}], "container": true, "role": "item_group"}], "container": true}]}], "text": "Parameters"}], "title": ["Render Settings"], "summary": ["Creates or edits a UsdRenderSettings prim, which holds the general settings for rendering the scene."], "included": ["/nodes/lop/_primpattern", "/nodes/lop/_sampling", "/nodes/lop/_simple_prims", "/nodes/lop/rendergeometrysettings"]}