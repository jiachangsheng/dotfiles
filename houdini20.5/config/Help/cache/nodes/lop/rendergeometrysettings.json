{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "rendergeometrysettings", "icon": "LOP/rendergeometrysettings", "group": "rendering", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Render Geometry Settings"], "extent": [0, 29]}, {"type": "summary", "indent": 0, "text": ["Applies renderer-specific geometry settings to geometry in the scene graph."], "extent": [155, 239]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [239, 254], "body": [{"type": "para", "indent": 0, "text": ["Many renderers have custom settings that can be set on a per-geometry basis, such as sampling rates, motion blur control, and dicing quality. These properties are not generally applicable enough to be part of the USD standard, but can be very important for batch rendering targeted at a specific renderer."], "extent": [254, 562]}, {"type": "para", "indent": 0, "text": ["These geometry settings are different from the settings on a Render Settings primitive because they do not affect the rendering of the entire scene. They only affect the targeted geometry primitives. Renderer-specific light settings are already provided on the Light LOP itself, and so will not appear on this node."], "extent": [562, 879]}, {"type": "para", "indent": 0, "text": ["This node provides a way to set these renderer-specific setting on a set of geometry primitives."], "extent": [879, 977]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [977, 983], "body": [{"type": "para", "indent": 4, "text": ["To find out how to add parameters for a third-party renderer, see ", {"type": "q", "text": ["USD Hydra: Customizing for Houdini"]}, " in the HDK documentation."], "extent": [983, 1118]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Inheritance"], "extent": [1118, 1136], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Individual renderers can set values from these parameters as USD attributes, or as primvars. (Karma sets them as primvars.)"], "extent": [1136, 1264]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Storing the settings in primvars allows them to be inherited down the scene graph hierarchy, so it is easier to apply a particular setting to large numbers of geometry primitives."], "extent": [1264, 1448]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [1448, 1461], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Specify the geometry primitives you want to apply settings to in the ", {"type": "ui", "text": ["Primitives"]}, " parameter."], "extent": [1461, 1560]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Use the pop-up menu to the left of the parameters to control how the node authors the opinion for that setting."], "extent": [1560, 1675], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6384, 6408], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6428, 6447]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6447, 6468], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6468, 6554]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6554, 6574], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6574, 6651]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6651, 6833]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6833, 6845], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6845, 7002]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7002, 7025], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7025, 7214]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7214, 7231], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7231, 7313]}]}], "divider": false}]}], "container": true}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1719, 1731], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Primitives"], "extent": [16, 28], "body": [{"type": "para", "indent": 4, "text": ["The primitive(s) the node should operate on. You can drag primitives from the scene graph tree pane into this textbox to add their paths, or click the ", {"scheme": "Smallicon", "value": "BUTTONS/reselect", "type": "link", "text": "", "fullpath": "/nodes/lop/BUTTONS/reselect.html"}, " Reselect button beside the text box to select the primitives in the viewer, or ", {"keys": ["Ctrl"], "type": "keys", "text": null}, "-click the Reselect button to choose prims from a pop-up tree window. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern.html"}, " for advanced matching, including matching all prims in a collection (using ", {"type": "code", "text": ["/path/to/prim.collection:", {"type": "var", "text": ["name"]}]}, ")."], "extent": [50, 560]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [560, 570], "body": [{"type": "para", "indent": 8, "text": ["This parameter needs to be exposed in order for the transform handles to be context-aware. Without it, the handles may not be positioned properly."], "extent": [570, 725]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}], "container": true}, {"level": 2, "id": "karma", "container": true, "type": "h", "indent": 0, "text": ["Karma"], "extent": [1756, 1776], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Enable Motion Blur"], "role": "item", "extent": [1776, 1799], "body": [{"type": "para", "indent": 4, "text": ["Whether to enable motion blur.  Changing this in the display options will\n    require a restart of the render."], "extent": [1854, 1970]}], "container": true, "attrs": {"id": "karma:object:mblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Motion Samples from Stage"], "role": "item", "extent": [1970, 1999], "body": [{"type": "para", "indent": 4, "text": ["Instead of choosing the motion samples explicitly, Karma can also choose\n    the motion samples based on the samples authored on the Usd stage.  This\n    option will choose just the right number of samples to capture the motion\n    described on the stage."], "extent": [2065, 2326]}, {"type": "para", "indent": 4, "text": ["This setting applies to both transform and deformation motion samples for\n    both geometry and instances."], "extent": [2326, 2438]}, {"type": "para", "indent": 4, "text": ["Note:  If the samples on the stage don\u2019t align with the shutter times on\n    the camera, it\u2019s possible there will be some minor interpolation issues\n    over the first and last segments (since motion will be truncated rather\n    than interpolated)."], "extent": [2438, 2692]}], "container": true, "attrs": {"id": "karma:object:samplesfromstage", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Velocity Blur"], "role": "item", "extent": [2692, 2709], "body": [{"type": "para", "indent": 4, "text": ["This parameter lets you choose what type of ", {"type": "em", "text": ["geometry velocity blur"]}, " to do on an object, if any. Separate from ", {"type": "em", "text": ["transform blur"]}, " and ", {"type": "em", "text": ["deformation blur"]}, ", you can render motion blur based on point movement, using attributes stored on the points that record change over time. You should use this type of blur if the number points in the geometry changes over time (for example, a particle simulation where points are born and die)."], "extent": [2764, 3197]}, {"type": "para", "indent": 4, "text": ["If your geometry changes topology frame-to-frame, Karma will not be able to interpolate the geometry to correctly calculate Motion Blur. In these cases, motion blur can use a ", {"type": "code", "text": ["velocities"]}, " and/or ", {"type": "code", "text": ["accelerations"]}, " attribute which is consistent even while the underlying geometry is changing. The surface of a fluid simulation is a good example of this. In this case, and other types of simulation data, the solvers will automatically create the velocity attribute."], "extent": [3197, 3664]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "text": [" "], "role": "item", "extent": [3664, 3675], "body": [{"type": "para", "indent": 8, "text": ["In Solaris, ", {"type": "code", "text": ["velocities"]}, ", ", {"type": "code", "text": ["accelerations"]}, ", and ", {"type": "code", "text": ["angularVelocities"]}, " attributes are equivalent to ", {"type": "code", "text": ["v"]}, ", ", {"type": "code", "text": ["accel"]}, ", and ", {"type": "code", "text": ["w"]}, " in SOPs, respectively."], "extent": [3675, 3825]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [3825, 3847], "body": [{"type": "para", "indent": 8, "text": ["Do not render motion blur on this object, even if the renderer is set to allow motion blur."], "extent": [3847, 3948]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [3948, 3967], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, you must compute and store point velocities in a point attribute ", {"type": "code", "text": ["velocities"]}, ". The renderer uses this attribute, if it exists, to render velocity motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["velocities"]}, " attribute may be created automatically by simulation nodes (such as particle DOPs), or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [3967, 4395]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [4395, 4478]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [4478, 4501], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, you must compute and store point acceleration in a point attribute ", {"type": "code", "text": ["accelerations"]}, ". The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "."], "extent": [4501, 4927]}, {"type": "para", "indent": 8, "text": ["When Acceleration Blur is on, if the geometry has a ", {"type": "em", "text": ["angular velocity"]}, " attribute (", {"type": "code", "text": ["w"]}, "), rapid rotation will also be blurred. This should be a vector attribute, where the components represent rotation speeds in radians per second around X, Y, and Z."], "extent": [4927, 5185]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Velocity Blur"]}, " or ", {"type": "q", "text": ["Acceleration Blur"]}, ", deformation blur is not applied to the object. When this is set to ", {"type": "q", "text": ["Acceleration Blur"]}, ", use the ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, " property to set the number of acceleration samples."], "extent": [5185, 5430]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5430, 5440], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_velocity.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5440, 5500], "body": [{"type": "summary", "indent": 12, "text": ["Velocity motion blur used the velocity attribute (", {"type": "code", "text": ["velocities"]}, ") to do linear motion blur."], "extent": [5500, 5608]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5608, 5618], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5618, 5682], "body": [{"type": "summary", "indent": 12, "text": ["Acceleration motion blur uses the change in velocity to more accurately blur objects turning at high speed."], "extent": [5682, 5808]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [5808, 5818], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_angular_acceleration.jpg", "type": "img", "text": ""}], "role": "item", "extent": [5818, 5890], "body": [{"type": "summary", "indent": 12, "text": ["Angular acceleration blur works with object spin, such as these fast-spinning cubes."], "extent": [5890, 5994]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Geometry Time Samples"], "role": "item", "extent": [5994, 6019], "body": [{"type": "para", "indent": 4, "text": ["The number of sub-frame samples to compute when rendering ", {"type": "em", "text": ["deformation"]}, " motion blur over the shutter open time. The default is 1 (sample only at the start of the shutter time), giving ", {"type": "strong", "text": ["no"]}, " deformation blur by default. If you want rapidly deforming geometry to blur properly, you must increase this value to 2 or more. Note that this value is limited by the number of sub-samples available in the USD file being rendered.  An exception to this is the USD Skel deformer which allows."], "extent": [6079, 6566]}, {"type": "para", "indent": 4, "text": [{"type": "q", "text": ["Deformation"]}, " may refer to simple transformations at the Geometry (SOP) level, or actual surface deformation, such as a character or object which changes shape rapidly over the course of a frame."], "extent": [6566, 6767]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamplesSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [6767, 6834]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Objects whose deformations are quite complex within a single frame will require a higher number of Geo Time Samples."], "extent": [6834, 6956]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/GeoTimeSamples.jpg", "type": "img", "text": ""}], "role": "item", "extent": [6956, 7017]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Deformation blur also lets you blur ", {"type": "em", "text": ["attribute change"]}, " over the shutter time. For example, if point colors are changing rapidly as the object moves, you can blur the ", {"type": "code", "text": ["Cd"]}, " attribute."], "extent": [7017, 7204]}, {"type": "para", "indent": 4, "text": ["Increasing the number of Geo Time Samples ", {"type": "strong", "text": ["can have an impact"]}, " on the amount of memory Karma uses.  For each additional Sample, Karma must retain a copy of the geometry in memory while it samples across the shutter time. When optimizing your renders, it is a good idea to find the minimum number of Geo Time Samples necessary to create a smooth motion trail."], "extent": [7204, 7568]}, {"type": "para", "indent": 4, "text": ["Deformation blur is ignored for objects that have ", {"scheme": null, "value": "/render/blur#velocity", "type": "link", "text": ["Velocity motion blur"], "fullpath": "/render/blur.html#velocity", "fragment": "#velocity"}, " turned on."], "extent": [7568, 7679]}], "container": true, "attrs": {"id": "karma:object:geosamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Transform Time Samples"], "role": "item", "extent": [7679, 7705], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to compute when rendering ", {"type": "em", "text": ["transformation"]}, " motion blur over the shutter open time.  The default is 2 samples (at the start and end of the shutter time), giving one blurred segment."], "extent": [7767, 7975]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleSimple.jpg", "type": "img", "text": ""}], "role": "item", "extent": [7975, 8039]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["If you have object moving and changing direction extremely quickly, you might want to increase the number of samples to capture the sub-frame direction changes."], "extent": [8039, 8205]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/blur/XFormSampleComplex.jpg", "type": "img", "text": ""}], "role": "item", "extent": [8205, 8270]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In the above example, it requires 40 transformation samples to correctly render the complex motion that occurs within one frame. (This amount of change within a single frame is very unusual and only used as a demonstration.)"], "extent": [8270, 8500]}, {"type": "para", "indent": 4, "text": ["Transformation blur simulates blur by interpolating each object\u2019s transformation between frames, so it\u2019s cheap to compute but does not capture surface deformation. To enable blurring deforming geometry, increase ", {"scheme": "Karma", "value": "karma:object:geosamples", "type": "link", "text": "", "exists": true}, "."], "extent": [8500, 8750]}], "container": true, "attrs": {"id": "karma:object:xformsamples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Instance Velocity Blur"], "role": "item", "extent": [8750, 8776], "body": [{"type": "para", "indent": 4, "text": ["When defining motion blur on instances, the transform of each instance can be blurred in addition to any motion blur occurring on the prototype.  This option controls how the instance will compute the motion blur of the transform on each instance.  For example, when instancing prototypes to a particle system, you'd likely want to use velocity blur to compute motion blur (the transform on the prototype would be blurred by the velocity on the particles)."], "extent": [8840, 9302]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [9302, 9324], "body": [{"type": "para", "indent": 8, "text": ["Use deformation blur of the instance to compute the blur on the transform."], "extent": [9324, 9408]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [9408, 9427], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, the instance must be a point instancer with velocity attributes on the points."], "extent": [9427, 9537]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["velocities"]}, " attribute value is measured in Houdini units per second."], "extent": [9537, 9620]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [9620, 9643], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, the instance must be a point instancer with point velocities and acceleration values.  The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point Velocity SOP"], "fullpath": "/nodes/sop/pointvelocity.html"}, "; this will be converted to ", {"type": "code", "text": ["accelerations"]}, " when the SOP geometry is converted to USD."], "extent": [9643, 10157]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:instance_vblur", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Instance Motion Samples"], "role": "item", "extent": [10157, 10184], "body": [{"type": "para", "indent": 4, "text": ["When motion blur on instances is computed using Acceleration Blur or Deformation Blur, this parameter specifies the number of motion segments used for motion blur."], "extent": [10250, 10419]}], "container": true, "attrs": {"id": "karma:object:instance_samples", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Motion Blur Style"], "role": "item", "extent": [10419, 10440], "body": [{"type": "para", "indent": 4, "text": ["Specifies the style of motion the object has."], "extent": [10499, 10550]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Rotation Blur (default)"], "extent": [10550, 10579], "body": [{"type": "para", "indent": 8, "text": ["Rotates the object around the origin.  This is ideal for objects that spin."], "extent": [10579, 10664]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Linear Blur"], "extent": [10664, 10681], "body": [{"type": "para", "indent": 8, "text": ["This style of motion will not preserve the volume of rotating objects and will have linear motion instead of rotational arcs. Should only be used in special cases, i.e. with pivot transformations. Linear blur linearly interpolates the coefficients of the transformation matrix to achieve a correct blur."], "extent": [10681, 10994]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:blurstyle", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Quality"], "role": "item", "extent": [10994, 11012], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for smooth surfaces (subdivision surfaces and displaced surfaces).  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [11070, 11452]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"type": "code", "text": ["karma:object:dicingquality"]}, " ", {"type": "strong", "text": ["squared"]}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."], "extent": [11452, 11737]}], "container": true, "attrs": {"id": "karma:object:dicingquality", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Flatness"], "role": "item", "extent": [11737, 11756], "body": [{"type": "para", "indent": 4, "text": ["This property controls the tesselation levels for nearly flat primitives. By increasing the value, more primitives will be considered flat and will be sub-divided less. Turn this option ", {"type": "em", "text": ["down"]}, " for more accurate (less optimized) nearly-flat surfaces."], "extent": [11815, 12070]}], "container": true, "attrs": {"id": "karma:object:dicingflatness", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Minimum Depth"], "role": "item", "extent": [12070, 12094], "body": [{"type": "para", "indent": 4, "text": ["When not set to -1, karma will set minimum number of rows and columns on each face to be 2 to the power of this value when dicing for subdivision or displacement."], "extent": [12153, 12321]}], "container": true, "attrs": {"id": "karma:object:dicingdepthmin", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Maximum Depth"], "role": "item", "extent": [12321, 12345], "body": [{"type": "para", "indent": 4, "text": ["When not set to ", {"type": "code", "text": ["-1"]}, ", Karma will set maximum number of rows and columns on each face to be 2 to the power of this value when dicing for subdivision or displacement. Setting the same (or lower) value as ", {"type": "q", "text": ["Dicing Minimum Depth"]}, " is effectively equivalent to fixed parametric subdivision that ignores raster space/offscreen measurement. Recommended leaving this value at ", {"type": "code", "text": ["-1"]}, "."], "extent": [12404, 12781]}], "container": true, "attrs": {"id": "karma:object:dicingdepthmax", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["True Displacements"], "role": "item", "extent": [12781, 12803], "body": [{"type": "para", "indent": 4, "text": ["This setting controls how the displacement shader on the object will be run."], "extent": [12860, 12942]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Bump Mapped Displacement"], "extent": [12942, 12972], "body": [{"type": "para", "indent": 8, "text": ["The displacement shader is run, but only modifies the surface normal. This does not dice geometry and can save memory. With Karma XPU, this option only works in conjunction with float-based displacement maps. Also make sure to set the ", {"scheme": "Node", "value": "/nodes/vop/mtlximage", "type": "link", "text": ["MtlX Image VOP\u2019s"], "fullpath": "/nodes/vop/mtlximage.html"}, " ", {"type": "ui", "text": ["Signature"]}, " drop down menu to ", {"type": "ui", "text": ["Float"]}, ". Vector-based displacement maps are not supported in Karma XPU with this mode turned on."], "extent": [12972, 13385]}, {"type": "para", "indent": 8, "text": ["Please also note that this mode generally doesn\u2019t work with Karma XPU when you mix two or more ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface VOPs"], "fullpath": "/nodes/vop/mtlxstandard_surface.html"}, "."], "extent": [13385, 13549]}], "container": true}, {"type": "dt", "indent": 4, "text": ["True Displacement"], "extent": [13549, 13572], "body": [{"type": "para", "indent": 8, "text": ["The geometry is diced and displaced.  This will cause proper silhouettes and shadowing of displaced surfaces."], "extent": [13572, 13691]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Disable Displacement Shader"], "extent": [13691, 13724], "body": [{"type": "para", "indent": 8, "text": ["Disable the displacement shader entirely.  There will be no bump mapping or displaced geometry."], "extent": [13724, 13829]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "karma:object:truedisplace", "kagroup": "Dicing"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Visibility"], "role": "item", "extent": [13829, 13850], "body": [{"type": "para", "indent": 4, "text": ["Controls the visibility of an object to different types of rays using a category expression. This parameter generalizes the Phantom and Renderable toggles and allows more specific control over the visibility of an object to the different ray types supported by karma and VEX."], "extent": [13912, 14193]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["primary"]}, " "], "role": "td", "extent": [14193, 14209], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rays sent from the camera"], "extent": [14209, 14244]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["shadow"]}, " "], "role": "td", "extent": [14244, 14259], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Shadow rays"], "extent": [14259, 14280]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["diffuse"]}], "role": "td", "extent": [14280, 14295], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Diffuse rays"], "extent": [14295, 14317]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["reflect"]}], "role": "td", "extent": [14317, 14332], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Reflections"], "extent": [14332, 14353]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["refract"]}], "role": "td", "extent": [14353, 14368], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Refractions"], "extent": [14368, 14389]}]}], "divider": false}]}, {"type": "para", "indent": 4, "text": ["For example, to create a phantom object, set the expression to ", {"type": "code", "text": ["-primary"]}, ". To create an unrenderable object, set the expression to an empty string ", {"type": "code", "text": [" "]}, ". These tokens correspond to the string given to \u201craystyle\u201d in the ", {"type": "code", "text": ["VEX trace()"]}, " and ", {"type": "code", "text": ["gather()"]}, " functions."], "extent": [14389, 14651]}], "container": true, "attrs": {"id": "karma:object:rendervisibility", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cusp Angle"], "role": "item", "extent": [14651, 14665], "body": [{"type": "para", "indent": 4, "text": ["If there are no normals on an object, any edges with a dihedral angle greater than this value will be cusped.  For compatibility with ", {"type": "code", "text": ["mantra"]}, ", Karma will also look for a detail attribute named ", {"type": "code", "text": ["vm_cuspangle"]}, " (which takes priority over the setting)."], "extent": [14720, 14975]}], "container": true, "attrs": {"id": "karma:object:cuspangle", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Samples"], "role": "item", "extent": [14975, 14994], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect diffuse shading.  A value of one\n    translates to roughly one additional diffuse sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional diffuse\n    samples per shading computation."], "extent": [15055, 15307]}], "container": true, "attrs": {"id": "karma:object:diffusesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflect Samples"], "role": "item", "extent": [15307, 15326], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect reflection shading.  A value of one\n    translates to roughly one additional reflection sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional reflection\n    samples per shading computation."], "extent": [15387, 15648]}], "container": true, "attrs": {"id": "karma:object:reflectsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refract Samples"], "role": "item", "extent": [15648, 15667], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect refraction shading.  A value of one\n    translates to roughly one additional refraction sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional refraction\n    samples per shading computation."], "extent": [15728, 15989]}], "container": true, "attrs": {"id": "karma:object:refractsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Samples"], "role": "item", "extent": [15989, 16007], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect volumetric shading.  A value of one\n    translates to roughly one additional volumetric sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional volumetric\n    samples per shading computation."], "extent": [16067, 16328]}], "container": true, "attrs": {"id": "karma:object:volumesamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Samples"], "role": "item", "extent": [16328, 16343], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect sub-surface scattering shading.  A value\n    of one translates to roughly one additional sub-surface scattering sample\n    per shading computation.  A sample of 4 translates to roughly 4 additional\n    sub-surface scattering samples per shading computation."], "extent": [16400, 16697]}], "container": true, "attrs": {"id": "karma:object:ssssamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Limit"], "role": "item", "extent": [16697, 16714], "body": [{"type": "para", "indent": 4, "text": ["The number of times diffuse rays can propagate through your scene."], "extent": [16771, 16843]}, {"type": "para", "indent": 4, "text": ["Unlike the Reflect and Refract Limits, this parameter will increase the overall amount of light in your scene and contribute to the majority of global illumination. With this parameter set above zero diffuse surfaces will accumulate light from other objects in addition to direct light sources."], "extent": [16843, 17143]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17143, 17153], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17153, 17226], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 0"], "extent": [17226, 17261]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17261, 17271], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17271, 17344], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 1"], "extent": [17344, 17379]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [17379, 17389], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_diffuse_limit3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17389, 17462], "body": [{"type": "summary", "indent": 12, "text": ["Diffuse Limit 2"], "extent": [17462, 17497]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["In this example, increasing the Diffuse Limit has a dramatic effect on the appearance of the final image. To replicate realistic lighting conditions, it is often necessary to increase the Diffuse Limit. However, since the amount of light contribution usually decreases with each diffuse bounce, increasing the Diffuse Limit beyond 4 does little to improve the visual fidelity of a scene. Additionally, increasing the Diffuse Limit can dramatically increase noise levels and render times."], "extent": [17497, 17990]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/DiffuseSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [17990, 18063]}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:diffuselimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflection Limit"], "role": "item", "extent": [18336, 18356], "body": [{"type": "para", "indent": 4, "text": ["The number of times a ray can be reflected in your scene."], "extent": [18413, 18476]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [18476, 18541]}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [18541, 18610], "body": [{"type": "para", "indent": 8, "text": ["This example shows a classic ", {"type": "q", "text": ["Hall of Mirrors"]}, " scenario with the subject placed between two mirrors."], "extent": [18610, 18720]}, {"type": "para", "indent": 8, "text": ["This effectively creates an infinite series of reflections."], "extent": [18720, 18789]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/ReflectLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [18789, 18861]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is reflected in an object, it is considered a direct reflection. Therefore, even with Reflect Limit set to 0, you will still see specular reflections of light sources."], "extent": [18861, 19078]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19078, 19088], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19088, 19164], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 0"], "extent": [19164, 19202]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19202, 19212], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19212, 19288], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 1"], "extent": [19288, 19326]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19326, 19336], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "//images/solaris/kug/karma_props_reflection_limit3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19336, 19412], "body": [{"type": "summary", "indent": 12, "text": ["Reflection Limit 2"], "extent": [19412, 19450]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["From this camera angle the reflection limits are very obvious and have a large impact on the accuracy of the final image. However, in most cases the        reflection limit will be more subtle, allowing you to reduce the number of reflections in your scene and optimize the time it takes to render them."], "extent": [19450, 19759]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:reflectlimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refraction Limit"], "role": "item", "extent": [19793, 19813], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [19870, 19935], "body": [{"type": "para", "indent": 8, "text": ["This parameter control the number of times a ray be refracted in your scene."], "extent": [19935, 20021]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSceneSetup.png", "type": "img", "text": ""}], "role": "item", "extent": [20021, 20091], "body": [{"type": "para", "indent": 8, "text": ["This example shows a simple scene with ten grids all in a row."], "extent": [20091, 20163]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20163, 20235], "body": [{"type": "para", "indent": 8, "text": ["By applying a refractive shader, we will be able see through the grids to an image of a sunset in the background."], "extent": [20235, 20358]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractSubtleCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20358, 20431], "body": [{"type": "para", "indent": 8, "text": ["From this camera angle, in order for the image to be accurate, the refraction limit must match the number of grids that that are in the scene. However, most scenes will not have this number of refractive objects all in a row and so it is possible to reduce the refract limit without affecting the final image while also reducing the time it takes to render them."], "extent": [20431, 20803]}], "container": true}, {"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/RefractLimitSurfaces.jpg", "type": "img", "text": ""}], "role": "item", "extent": [20803, 20876], "body": [{"type": "para", "indent": 8, "text": ["Keep in mind that this Refract Limit refers to the number of surfaces that the ray must travel through, not the number of objects."], "extent": [20876, 21016]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Remember that the first time a light source is refracted through a surface, it is considered a direct refraction. Therefore, even with Refract Limit set to 0, you will see refractions of Light Sources. However, since most objects in your scene will have at least two surfaces between it and the light source, direct refractions are often not evident in your final render."], "extent": [21016, 21393]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:refractlimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Limit"], "role": "item", "extent": [21427, 21443], "body": [{"type": "para", "indent": 4, "text": ["The number of times a volumetric ray can propagate through a scene. It functions in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [21499, 21642]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimit.jpg", "type": "img", "text": ""}], "role": "item", "extent": [21642, 21706]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Increasing the Volume Limit parameter will result in much more realistic volumetric effects. This is especially noticeable in situations where only part of a volume is receiving direct lighting. Also, in order for a volumetric object to receive indirect light from other objects, the Volume Limit parameter must be set above 0."], "extent": [21706, 22039]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimitCompare.jpg", "type": "img", "text": ""}], "role": "item", "extent": [22039, 22110]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["With the Volume Limit set to values above zero, the fog volume takes on the characteristic light scattering you would expect from light traveling through a volume. However, as with the Diffuse Limit, the light contribution generally decreases with each bounced ray and therefore using values above 4 does not necessarily result in a noticeably more realistic image."], "extent": [22110, 22481]}, {"type": "para", "indent": 4, "text": ["Also, increasing the value of this parameter can dramatically increase the amount of time spent rendering volumetric images."], "extent": [22481, 22611]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:volumelimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Limit"], "role": "item", "extent": [22645, 22658], "body": [{"type": "para", "indent": 4, "text": ["The number of times a SSS ray can propagate through a scene. It functions\n    in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [22711, 22851]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [18063, 18073], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [18105, 18336]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:ssslimit", "kagroup": "Limits"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Diffuse Quality"], "role": "item", "extent": [22885, 22904], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect diffuse component."], "extent": [22965, 23097]}], "container": true, "attrs": {"id": "karma:object:diffusequality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflection Quality"], "role": "item", "extent": [23097, 23119], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect reflect component."], "extent": [23180, 23312]}], "container": true, "attrs": {"id": "karma:object:reflectquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refraction Quality"], "role": "item", "extent": [23312, 23334], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect refract component."], "extent": [23395, 23527]}], "container": true, "attrs": {"id": "karma:object:refractquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Quality"], "role": "item", "extent": [23527, 23545], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for indirect volume component."], "extent": [23605, 23736]}], "container": true, "attrs": {"id": "karma:object:volumequality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["SSS Quality"], "role": "item", "extent": [23736, 23751], "body": [{"type": "para", "indent": 4, "text": ["This parameter acts as a multiplier on ", {"type": "ui", "text": ["Min Secondary Samples"]}, " and ", {"type": "ui", "text": ["Max Secondary Samples"]}, " for SSS component."], "extent": [23808, 23927]}], "container": true, "attrs": {"id": "karma:object:sssquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Step Rate"], "role": "item", "extent": [23927, 23947], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling_tab/VolumeQuality.jpg", "type": "img", "text": ""}], "role": "item", "extent": [24008, 24076]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["How finely or coarsely a volume is sampled as a ray travels through it.\n    Volumetric objects are made up of 3d structures called Voxels, the\n    value of this parameter represents the number of voxels a ray will\n    travel through before performing another sample."], "extent": [24076, 24348]}, {"type": "para", "indent": 4, "text": ["The default value is ", {"type": "code", "text": ["0.25"]}, ", which means that every one of every four\n    voxels will be sampled. A value of ", {"type": "code", "text": ["1"]}, " would mean that all voxels are\n    sampled and a value of 2 would mean that all voxels are sampled twice. This\n    means that the volume step rate value behaves in a similar way to pixel\n    samples, acting as a multiplier on the total number of samples for\n    volumetric objects."], "extent": [24348, 24748]}, {"type": "para", "indent": 4, "text": ["Keep in mind that increasing the volume step rate can dramatically increase\n    render times, so it should only be adjusted when necessary. Also, while\n    increasing the default from ", {"type": "code", "text": ["0.25"]}, " can reduce volumetric noise, increasing\n    the value beyond ", {"type": "code", "text": ["1"]}, " will rarely see similar results."], "extent": [24748, 25042]}], "container": true, "attrs": {"id": "karma:object:volumesteprate", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Shadow Step Rate"], "role": "item", "extent": [25042, 25069], "body": [{"type": "para", "indent": 4, "text": ["A factor to proportionally decrease the volume step rate only for shadows,\n    relative to the volume step rate. Smaller values will cause karma to use a\n    larger ray march step size for shadow rays than other shading rays.  A\n    value of 1 will produce equal quality for shadow rays and shading rays."], "extent": [25136, 25446]}], "container": true, "attrs": {"id": "karma:object:volumeshadowsteprate", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume"], "role": "item", "extent": [25446, 25464], "body": [{"type": "para", "indent": 4, "text": ["Whether to render this object as if it was a uniform-density volume. Using\n    this property on surface geometry is more efficient than actually creating\n    a volume object of uniform density, since the renderer can assume that the\n    volume density is uniform and place samples more optimally. The surface\n    normal of the surface is used to determine which side of the surface will\n    render as a volume - the normal will point away from the interior. The\n    surface need not be closed - if the surface is not closed, the volume will\n    extend an infinite distance away from the surface. Non-closed surfaces may\n    produce unexpected results near the edge of the surface, so try to keep the\n    viewing camera away from the edges."], "extent": [25530, 26275]}], "container": true, "attrs": {"id": "karma:object:volumeuniform", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Density"], "role": "item", "extent": [26275, 26301], "body": [{"type": "para", "indent": 4, "text": ["Determines how the samples are distributed when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). This parameter must match the\n    density on the uniform volume shader in order to produce correct results.\n    Note that this property is deprecated in 20.0."], "extent": [26374, 26660]}], "container": true, "attrs": {"id": "karma:object:volumeuniformdensity", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Samples"], "role": "item", "extent": [26660, 26686], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to generate when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). The samples will be distributed\n    so as to produce an equal image contribution if they were all equal in\n    brightness. Note that this property has no effect when global Screendoor\n    Limit is greater than 0, so for all practical purposes it is deprecated."], "extent": [26759, 27138]}], "container": true, "attrs": {"id": "karma:object:volumeuniformsamples", "kagroup": "Uniform Volume"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Velocity Blur Scale"], "role": "item", "extent": [27138, 27168], "body": [{"type": "para", "indent": 4, "text": ["Velocity multiplier used to reduce or exaggerate amount of motion blur on\n    volumes."], "extent": [27234, 27326]}], "container": true, "attrs": {"id": "karma:object:volumevblurscale", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Velocity Blur Mode"], "role": "item", "extent": [27326, 27355], "body": [{"type": "para", "indent": 4, "text": ["Choose velocity blur method for volumes."], "extent": [27420, 27466]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Lattice Deformation"], "extent": [27466, 27491], "body": [{"type": "para", "indent": 8, "text": ["Motion sampled via deforming superstructure."], "extent": [27491, 27544]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Lookup Offset"], "extent": [27544, 27563], "body": [{"type": "para", "indent": 8, "text": ["Sample coordinate is offset by velocity field value."], "extent": [27563, 27625]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [27625, 27635], "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["Lattice Deformation"]}, " mode can produce higher-quality results and\n        handle cases such as disparate features of a volume overlapping\n        post-blur. ", {"type": "code", "text": ["Lookup Offset"]}, " mode can be more performant, particularly\n        with reduced-resolution velocity fields, but susceptible to clipping\n        issues if the sampled position is outside the bounds of velocity field\n        where values do not exist."], "extent": [27635, 28050]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:volumevblurmode", "kagroup": "Motion Blur"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Sampling Field"], "role": "item", "extent": [28050, 28075], "body": [{"type": "para", "indent": 4, "text": ["Specifies the volume field by name that will be used for empty space\n    culling. By default karma will use the 'density' field if it exists. If you\n    are rendering an emissive volume in which some parts of the volume have a 0\n    density but still need to be rendered, you should specify a different field\n    using this parameter."], "extent": [28143, 28483]}], "container": true, "attrs": {"id": "karma:object:volumesamplingchannel", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Filter"], "role": "item", "extent": [28483, 28500], "body": [{"type": "para", "indent": 4, "text": ["Some volume primitives can use a filter during evaluation of volume\n    channels. This specifies the filter.  The default box filter is fast to\n    evaluate and produces sharp renders for most smooth fluid simulations.  If\n    your voxel data contains aliasing (stairstepping along edges), you may need\n    to use a larger filter width or smoother filter to produce acceptable\n    results.  For aliased volume data, ", {"type": "code", "text": ["gauss"]}, " is a good filter with a filter\n    width of 1.5."], "extent": [28559, 29037]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["point"]}], "extent": [29037, 29051]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["box"]}], "extent": [29051, 29063]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["gauss"]}], "extent": [29063, 29077]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["bartlett"]}], "extent": [29077, 29094]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["blackman"]}], "extent": [29094, 29111]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["catrom"]}], "extent": [29111, 29126]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["hanning"]}], "extent": [29126, 29142]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["mitchell"]}], "extent": [29142, 29160]}], "container": true}], "container": true, "attrs": {"id": "karma:object:volumefilter", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Filter Width"], "role": "item", "extent": [29160, 29183], "body": [{"type": "para", "indent": 4, "text": ["This specifies the filter width for the ", {"type": "q", "text": ["Volume Filter"]}, " property. The\n    filter width is specified in number of voxels. Larger filter widths take\n    longer to render and produce blurrier renders, but may be necessary to\n    combat aliasing in some kinds of voxel data."], "extent": [29247, 29523]}], "container": true, "attrs": {"id": "karma:object:volumefilterwidth", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Holdout Mode"], "role": "item", "extent": [29523, 29539], "body": [{"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Matte"]}, " mode, the object will be considered to be a\n    cutout matte. Any lighting contribution and alpha of the object will be\n    redirected to LPE AOVs with ", {"type": "q", "text": ["holdouts"]}, " prefix. Holdout Mode does not affect\n    the utility AOVs such as ", {"type": "code", "text": ["ray:hitP"]}, " and ", {"type": "code", "text": ["ray:hitN"]}, ".\n    ", {"type": "q", "text": ["Background"]}, " mode is similar to ", {"type": "q", "text": ["Matte"]}, ", except it\u2019s used for background\n    plate so it will appear ", {"type": "q", "text": ["pre-lit"]}, " in indirect bounces, multiplied by shadow\n    contribution. Diffuse albedo of the shader is used to determine the pre-lit\n    irradiance."], "extent": [29596, 30138]}], "container": true, "attrs": {"id": "karma:object:holdoutmode", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Points As"], "role": "item", "extent": [30138, 30158], "body": [{"type": "para", "indent": 4, "text": ["When rendering point clouds, they can be rendered as camera oriented\n    discs, spheres or discs oriented to the normal attribute."], "extent": [30216, 30352]}], "container": true, "attrs": {"id": "karma:object:point_style", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Curves As"], "role": "item", "extent": [30352, 30372], "body": [{"type": "para", "indent": 4, "text": ["When rendering curves, they can be rendered as ribbons oriented to face\n    the camera, rounded tubes or ribbons oriented to the normal attribute\n    attached to the points."], "extent": [30430, 30609]}], "container": true, "attrs": {"id": "karma:object:curve_style", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Override Curves Basis"], "role": "item", "extent": [30609, 30634], "body": [{"type": "para", "indent": 4, "text": ["USD supports Curve Basis types that may not be supported directly in\n    Houdini.  In some cases, you may want to override the Houdini curve basis.\n    For example, if you have linear curves in Houdini, you may want to render\n    them with a Bezier, B-Spline or Catmull-Rom basis.  This menu will force\n    Karma to override the basis that\u2019s tied to the USD primitives."], "extent": [30692, 31067]}, {"type": "para", "indent": 4, "text": ["Note that the topology of the curves must match the target basis.  For\n    example, when selecting any cubic curve basis, every curves must have at\n    least 4 vertices.  For the Bezier basis, curves must have 4 + 3*N vertices."], "extent": [31067, 31300]}], "container": true, "attrs": {"id": "karma:object:curve_basis", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cull Backface"], "role": "item", "extent": [31300, 31317], "body": [{"type": "para", "indent": 4, "text": ["If enabled, geometry that are facing away from the camera are not\n    rendered."], "extent": [31377, 31462]}], "container": true, "attrs": {"id": "karma:object:cull_backface", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Fix Shadow Terminator"], "role": "item", "extent": [31462, 31487], "body": [{"type": "para", "indent": 4, "text": ["Adjust shading position of shadow rays to avoid self-shadowing artifact on\n    low-poly mesh due to discrepancy between smooth normals and face normals."], "extent": [31540, 31698]}], "container": true, "attrs": {"id": "karma:object:smoothp", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Bump Shadow Terminator"], "role": "item", "extent": [31698, 31724], "body": [{"type": "para", "indent": 4, "text": ["With strong bump or normal maps you often see an abrupt/hard shadow terminator line. This parameter is a threshold and you enter an angle in radians: for angles that are smaller than or equal to the entered value, you will get a soft shadow terminator. If the angle is greater than the threshold, a hard terminator appears. A value of ", {"type": "code", "text": ["0"]}, " disables the feature and you\u2019ll always see a hard shadow terminator. ", {"type": "ui", "text": ["Bump Shadow Terminator"]}, " preserves the shape of the highlights while softening the terminator."], "extent": [31790, 32300]}], "container": true, "attrs": {"id": "karma:object:bumpshadowterminator", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["LPE Tag"], "role": "item", "extent": [32300, 32311], "body": [{"type": "para", "indent": 4, "text": ["Custom label assigned to lights or objects for use with ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expression"], "fullpath": "/render/lpe.html"}, "."], "extent": [32363, 32461]}], "container": true, "attrs": {"id": "karma:object:lpetag", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Custom Tracesets"], "role": "item", "extent": [32461, 32481], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of custom traceset names. You can use tracesets to subdivide a mesh into different parts, i.e. in conjunction with the ", {"scheme": "Node", "value": "/nodes/lop/karmatexturebaker", "type": "link", "text": ["Karma Texture Baker LOP"], "fullpath": "/nodes/lop/karmatexturebaker.html"}, ". For example, the clothing on a character might have tracesets like ", {"type": "code", "text": ["pants"]}, ", ", {"type": "code", "text": ["shirt"]}, " and ", {"type": "code", "text": ["jacket"]}, ". On the Karma Texture Baker LOP\u2019s ", {"type": "ui", "text": ["Bake Traceset"]}, " parameter you can then define which part/traceset you want to bake."], "extent": [32543, 32961]}], "container": true, "attrs": {"id": "karma:object:custom_tracesets", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Orientation"], "role": "item", "extent": [32961, 32976], "body": [{"type": "para", "indent": 4, "text": ["May be queried via ", {"scheme": null, "value": "/vex/functions/objectstate", "type": "link", "text": ["objectstate"], "fullpath": "/vex/functions/objectstate.html"}, " vex function\n    and will be ", {"type": "q", "text": ["rightHanded"]}, " or ", {"type": "q", "text": ["leftHanded"]}, " depending on the geometry\u2019s\n    winding order. This property is derived from USD geometry\u2019s orientation\n    attribute and not directly settable."], "extent": [33034, 33303]}], "container": true, "attrs": {"id": "karma:object:orientation", "kagroup": "Geometry"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Direct Refraction Subset"], "role": "item", "extent": [33303, 33331], "body": [{"type": "para", "indent": 4, "text": ["For compound BSDFs with refractive components, only apply direct lighting\n    for lights that belong in specified location. A light ray facing the same\n    direction as geometry normal is considered ", {"type": "q", "text": ["Outside"]}, ". For transparent\n    material that are solid/closed-manifold, setting this parameter to\n    ", {"type": "q", "text": ["Outside"]}, " can improve render performance by reducing noise in direct\n    lighting and cut down on wasted shadow rays."], "extent": [33388, 33812]}], "container": true, "attrs": {"id": "karma:object:lightsubset", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dielectric Priority"], "role": "item", "extent": [33812, 33835], "body": [{"type": "para", "indent": 4, "text": ["Specifies the priority of a refractive material, allowing the renderer to \n    choose which of many overlapping refractive materials should take precedence \n    while rendering.  This enables effects like water in a glass with ice cubes. \n    The default (highest priority) is 0, and as the number increases (1, 2, 3, etc.), \n    the priority decreases."], "extent": [33899, 34258]}], "container": true, "attrs": {"id": "karma:object:dielectricpriority", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Enable Caustics"], "role": "item", "extent": [34258, 34278], "body": [{"type": "para", "indent": 4, "text": ["Brute-force caustics from transmissive objects. Allows evaluation of \n    glossy BSDF that\u2019s seen by indirect diffuse bounce. Often requires a \n    significantly higher number of diffuse rays to resolve, especially if \n    Caustics Roughness Clamp parameter is set to very small value or \n    Indirect Guiding feature is disabled."], "extent": [34338, 34674]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [34674, 34684], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_fake.jpg", "type": "img", "text": ""}], "role": "item", "extent": [34684, 34755], "body": [{"type": "summary", "indent": 12, "text": ["Fake Caustics"], "extent": [34755, 34787]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [34787, 34797], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_true.jpg", "type": "img", "text": ""}], "role": "item", "extent": [34797, 34868], "body": [{"type": "summary", "indent": 12, "text": ["True Caustics"], "extent": [34868, 34902]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:causticsenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Caustics Roughness Clamp"], "role": "item", "extent": [34902, 34931], "body": [{"type": "para", "indent": 4, "text": ["Forces a minimal roughness for true caustics, above what the shader has set. Increasing this value can make caustics less noisy at the cost of accuracy."], "extent": [34999, 35157]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35157, 35167], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness1.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35167, 35244], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0"], "extent": [35244, 35284]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35284, 35294], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness2.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35294, 35371], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.2 (default)"], "extent": [35371, 35423]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35423, 35433], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness3.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35433, 35510], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.5"], "extent": [35510, 35552]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [35552, 35562], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/solaris/kug/karma_props_caustics_roughness4.jpg", "type": "img", "text": ""}], "role": "item", "extent": [35562, 35639], "body": [{"type": "summary", "indent": 12, "text": ["Caustics Roughness: 0.8"], "extent": [35639, 35682]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [35682, 35692], "body": [{"type": "para", "indent": 8, "text": ["Roughness clamp only works with GGX BSDF and may not have any effect\n        with Phong, cone, or specular BSDFs."], "extent": [35692, 35815]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "karma:object:causticsroughnessclamp", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Evaluate BSDF On Fake Caustics"], "role": "item", "extent": [35815, 35850], "body": [{"type": "para", "indent": 4, "text": ["Allows the BSDF to affect the fake caustics, meaning (eg) a red bottle will automatically cast red shadows.\n    Disabling the BSDF can reduce render times, but means fakecausticscolor should be used instead to set a constant shadow color."], "extent": [35918, 36162]}], "container": true, "attrs": {"id": "karma:object:fakecausticsbsdfenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Fake Caustics Color"], "role": "item", "extent": [36162, 36186], "body": [{"type": "para", "indent": 4, "text": ["Tints the fake caustics. Use this to darken the result of the BDSF, or to set a constant shadow color if the BSDF is disabled."], "extent": [36249, 36381]}], "container": true, "attrs": {"id": "karma:object:fakecausticscolor", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Fake Caustics Opacity"], "role": "item", "extent": [36381, 36407], "body": [{"type": "para", "indent": 4, "text": ["Controls the opacity of fake caustics. Use this to lighten the result of the BDSF."], "extent": [36472, 36560]}], "container": true, "attrs": {"id": "karma:object:fakecausticsopacity", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Enable Internal Reflection"], "role": "item", "extent": [36560, 36591], "body": [{"type": "para", "indent": 4, "text": ["Lets you evaluate the internal reflection on the backface of a glossy transmissive BSDF.\n    Turn on this option to apply internal reflections. Note that this option has no effect on \n    MaterialX Standard Surfaces with Thin Walled turned on: these materials always show internal reflections."], "extent": [36658, 36957]}], "container": true, "attrs": {"id": "karma:object:internalreflectenable", "kagroup": "Shading"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Secondary Noise Level"], "role": "item", "extent": [36957, 36983], "body": [{"type": "para", "indent": 4, "text": ["Noise threshold to determine the number of indirect rays cast for indirect bounce when the Convergence Mode is set to ", {"type": "q", "text": ["Automatic"]}, ". Decreasing this threshold (for example, to ", {"type": "code", "text": ["0.001"]}, ") will theoretically send more indirect rays and decrease noise, however the ", {"type": "q", "text": ["extra"]}, " rays will likely be cancelled out by the ", {"type": "ui", "text": ["Max Ray Samples"]}, " parameter. The correct way to decrease noise is to increase the number of samples per pixel, rather than change this threshold."], "extent": [37047, 37507]}, {"type": "para", "indent": 4, "text": ["If you are using Variance Pixel Oracle, you should set the same value for both threshold parameters. Setting the oracle\u2019s threshold lower may make the indirect component reach its threshold sooner and cast fewer indirect rays, but the oracle decides to cast more expensive camera rays because the amount of final noise in the beauty pass is higher than the oracle\u2019s threshold."], "extent": [37507, 37889]}], "container": true, "attrs": {"id": "karma:object:varianceaa_thresh", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Min Secondary Samples"], "role": "item", "extent": [37889, 37915], "body": [{"type": "para", "indent": 4, "text": ["Minimum number of rays to cast in per-component variance anti-aliasing."], "extent": [37983, 38060]}], "container": true, "attrs": {"id": "karma:object:varianceaa_minsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": [" Max Secondary Samples"], "role": "item", "extent": [38060, 38086], "body": [{"type": "para", "indent": 4, "text": ["Maximum number of rays to cast in per-component variance anti-aliasing."], "extent": [38154, 38231]}], "container": true, "attrs": {"id": "karma:object:varianceaa_maxsamples", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Treat As Light Source"], "role": "item", "extent": [38231, 38256], "body": [{"type": "para", "indent": 4, "text": ["Any object with an emissive material will generate light within the\n    scene.  If an object is significant enough (eg size, brightness, etc\u2026)\n    then it is possible for Karma to treat that object as if it were an\n    explicit lightsource (similar to regular lights), meaning the emitted\n    light will be handled much more efficiently.  But doing so will add\n    extra overhead elsewhere in the system (eg increased memory usage,\n    slower update times, etc\u2026)."], "extent": [38320, 38793]}, {"type": "para", "indent": 4, "text": ["There are three options.  ", {"type": "q", "text": ["No"]}, " will set the object as not being\n    a lightsource.  ", {"type": "q", "text": ["Yes"]}, " will set the object as being a lightsource.\n    ", {"type": "q", "text": ["Auto"]}, " (default) means Karma will use an internal heuristic\n    to decide if the object should be treated as a lightsource."], "extent": [38793, 39060]}], "container": true, "attrs": {"id": "karma:object:treat_as_lightsource", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Is Portal"], "role": "item", "extent": [39060, 39073], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the object will turn into a ", {"type": "q", "text": ["light portal"]}, " that only lets in\n    certain portion of dome lights based on portal geometry visibility."], "extent": [39125, 39277]}], "container": true, "attrs": {"id": "karma:object:isportal", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Portal Dome Lights"], "role": "item", "extent": [39277, 39299], "body": [{"type": "para", "indent": 4, "text": ["Space-separated list of dome lights to associate this portal with."], "extent": [39359, 39431]}], "container": true, "attrs": {"id": "karma:object:portaldomelights", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "extent": [39431, 39457], "body": [{"type": "para", "indent": 4, "text": ["When an object is used as a geometry light source, this sets the per-light\n    sampling quality.  Increasing the quality will add additional samples for\n    this light source, improving the sampling quality of this light relative to\n    other light sources."], "extent": [39531, 39794]}, {"type": "para", "indent": 4, "text": ["Note: This is not the quality of light received by an object."], "extent": [39794, 39861]}], "container": true, "attrs": {"id": "karma:object:lightsource_samplingquality", "kagroup": "Sampling"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Source Diffuse Multiplier"], "role": "item", "extent": [39861, 39896], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the diffuse, SSS,\n    and volume response of materials"], "extent": [39964, 40079]}], "container": true, "attrs": {"id": "karma:object:lightsource_diffusescale", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light Source Specular Multiplier"], "role": "item", "extent": [40079, 40115], "body": [{"type": "para", "indent": 4, "text": ["A multiplier for the effect of this emissive object on the reflection and\n    refraction response of materials"], "extent": [40184, 40300]}], "container": true, "attrs": {"id": "karma:object:lightsource_specularscale", "kagroup": "Light"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Low Resolution Object ID"], "role": "item", "extent": [40300, 40328], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the low resolution object corresponding to said\n    Texture Baking Object ID. This means that the texture space of this object\n    is what is being baked. If no high resolution object exists for this Object\n    ID, this is the rendered appearance for the texture in that space as well.\n    This is required for texture baking."], "extent": [40400, 40755]}], "container": true, "attrs": {"id": "karma:object:uvunwrap_lowres_obj", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Cage Object ID"], "role": "item", "extent": [40755, 40773], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the cage object corresponding to said Texture Baking\n    Object ID. This means that this object is used to help resolve normal\n    discontinuites during texture baking of the low resolution object. This is\n    optional for texture baking."], "extent": [40843, 41110]}], "container": true, "attrs": {"id": "karma:object:uvunwrap_cage_obj", "kagroup": "Texture Baking"}}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["High Resolution Object ID"], "role": "item", "extent": [41110, 41139], "body": [{"type": "para", "indent": 4, "text": ["Defines this object as the high resolution object corresponding to said\n    Texture Baking Object ID. This means that the rendered appearance of this\n    object is what is being baked into the texture space the low resolution\n    object. This is optional for texture baking."], "extent": [41212, 41492]}], "container": true, "attrs": {"id": "karma:object:uvunwrap_highres_obj", "kagroup": "Texture Baking"}}], "container": true, "role": "item_group"}]}], "text": "Parameters"}], "title": ["Render Geometry Settings"], "summary": ["Applies renderer-specific geometry settings to geometry in the scene graph."], "included": ["/nodes/lop/_primpattern", "/nodes/lop/_simple_prims"]}