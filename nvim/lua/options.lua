
-- ============================================================================
-- 🌟 Neovim Editor Core Options - Structured & Commented (by NvChad + Custom)
-- ============================================================================

local opt = vim.opt
local o = vim.o
local g = vim.g

-- ============================================================================
-- 🖥️ UI 设置
-- ============================================================================
o.laststatus = 3             -- 全局状态栏（现代风格，底部只保留一条）
o.showmode = false           -- 不显示模式提示（例如 INSERT），交由 statusline 显示
o.cursorline = true          -- 高亮当前行
o.cursorlineopt = "both"     -- 同时高亮行号与整行
o.signcolumn = "yes"         -- 始终显示 Git/linter 等符号列
o.ruler = false              -- 隐藏右下角坐标（由状态栏替代）

opt.fillchars = { eob = " " }-- 隐藏空缓冲区尾部的 `~` 符号
opt.shortmess:append("sI")   -- 禁用 Neovim 启动提示（intro screen）

-- ============================================================================
-- 🖱️ 操作体验与输入设置
-- ============================================================================
o.mouse = "a"                -- 启用鼠标控制
o.clipboard = "unnamedplus" -- 使用系统剪贴板
opt.shell = "pwsh"           -- 设置默认 shell（适用于 Windows）

-- ============================================================================
-- 🔍 搜索相关设置
-- ============================================================================
o.ignorecase = true          -- 搜索时忽略大小写
o.smartcase = true           -- 如果包含大写字符，则区分大小写

-- ============================================================================
-- 🧾 缩进与制表符设置（统一 2 空格风格）
-- ============================================================================
o.expandtab = true           -- 使用空格替代 Tab
o.tabstop = 2                -- Tab 显示为 2 个空格
o.softtabstop = 2            -- 插入模式中 Tab 为 2 空格
o.shiftwidth = 2             -- >> 缩进为 2 空格
o.smartindent = true         -- 智能缩进（如自动对齐）

-- ============================================================================
-- 🔢 行号与导航设置
-- ============================================================================
o.number = true              -- 启用行号
o.relativenumber = true      -- 相对行号（增强跳转体验）
o.numberwidth = 2            -- 行号区域宽度
opt.whichwrap:append("<>[]hl") -- h/l 允许跨行跳转

-- ============================================================================
-- 🧱 窗口行为设置
-- ============================================================================
o.splitright = true          -- 水平分屏从右侧打开
o.splitbelow = true          -- 垂直分屏从下方打开

-- ============================================================================
-- ⏱️ 命令响应与性能
-- ============================================================================
o.timeoutlen = 400           -- 映射按键组合的最大等待时间(ms)
o.updatetime = 250           -- CursorHold 事件触发频率（影响 gitsigns 等）

-- ============================================================================
-- 💾 文件行为与撤销历史
-- ============================================================================
o.undofile = true            -- 启用持久化撤销（undo tree）

-- ============================================================================
-- 🚫 禁用默认 provider 插件（加快启动）
-- ============================================================================
g.loaded_node_provider = 0
g.loaded_python3_provider = 0
g.loaded_perl_provider = 0
g.loaded_ruby_provider = 0

-- ============================================================================
-- 🛠️ 环境变量：添加 Mason 安装工具路径（LSP/DAP 支持）
-- ============================================================================
local is_windows = vim.fn.has("win32") ~= 0
local sep = is_windows and "\\" or "/"
local delim = is_windows and ";" or ":"
vim.env.PATH = table.concat({
  vim.fn.stdpath("data"), "mason", "bin"
}, sep) .. delim .. vim.env.PATH

-- ============================================================================
-- ✨ 自动命令：复制（yank）时高亮
-- ============================================================================
vim.api.nvim_create_autocmd("TextYankPost", {
  desc = "Highlight when yanking (copying) text",
  group = vim.api.nvim_create_augroup("custom-highlight-yank", { clear = true }),
  callback = function()
    vim.highlight.on_yank()
  end,
})
