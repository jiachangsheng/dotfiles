(set 'doom-modules '#s(hash-table test equal data ((:doom) #s(doom-module 0 :doom nil (-110 . -110) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/lisp/") (:user) #s(doom-module 1 :user nil (-105 . 105) nil nil "c:/Users/jiacs/dotfiles/.doom.d/") (:config . use-package) #s(doom-module 2 :config use-package (-111 . -111) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/config/use-package") (:completion . corfu) #s(doom-module 3 :completion corfu (0 . 0) (+orderless) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/completion/corfu") (:completion . vertico) #s(doom-module 4 :completion vertico (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/completion/vertico") (:ui . doom) #s(doom-module 5 :ui doom (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/doom") (:ui . doom-dashboard) #s(doom-module 6 :ui doom-dashboard (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/doom-dashboard") (:ui . hl-todo) #s(doom-module 7 :ui hl-todo (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/hl-todo") (:ui . modeline) #s(doom-module 8 :ui modeline (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/modeline") (:ui . ophints) #s(doom-module 9 :ui ophints (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/ophints") (:ui . popup) #s(doom-module 10 :ui popup (0 . 0) (+defaults) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/popup") (:ui . vc-gutter) #s(doom-module 11 :ui vc-gutter (0 . 0) (+pretty) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/vc-gutter") (:ui . vi-tilde-fringe) #s(doom-module 12 :ui vi-tilde-fringe (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/vi-tilde-fringe") (:ui . workspaces) #s(doom-module 13 :ui workspaces (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/workspaces") (:editor . evil) #s(doom-module 14 :editor evil (0 . 0) (+everywhere) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/evil") (:editor . file-templates) #s(doom-module 15 :editor file-templates (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/file-templates") (:editor . fold) #s(doom-module 16 :editor fold (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/fold") (:editor . snippets) #s(doom-module 17 :editor snippets (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/snippets") (:emacs . dired) #s(doom-module 18 :emacs dired (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/dired") (:emacs . electric) #s(doom-module 19 :emacs electric (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/electric") (:emacs . undo) #s(doom-module 20 :emacs undo (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/undo") (:emacs . vc) #s(doom-module 21 :emacs vc (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/vc") (:checkers . syntax) #s(doom-module 22 :checkers syntax (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/checkers/syntax") (:tools . eval) #s(doom-module 23 :tools eval (0 . 0) (+overlay) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/eval") (:tools . lookup) #s(doom-module 24 :tools lookup (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/lookup") (:tools . magit) #s(doom-module 25 :tools magit (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/magit") (:lang . emacs-lisp) #s(doom-module 26 :lang emacs-lisp (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/emacs-lisp") (:lang . markdown) #s(doom-module 27 :lang markdown (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/markdown") (:lang . org) #s(doom-module 28 :lang org (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/org") (:lang . sh) #s(doom-module 29 :lang sh (0 . 0) nil nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/sh") (:config . default) #s(doom-module 30 :config default (0 . 0) (+bindings +smartparens) nil "c:/Users/jiacs/dotfiles/doom-emacs/modules/config/default"))))(set 'doom-disabled-packages 'nil)(setplist ':doom '(nil #s(doom-module-context 0 (:doom) "c:/Users/jiacs/dotfiles/doom-emacs/lisp/" nil nil)))(setplist ':completion '(corfu #s(doom-module-context 3 (:completion . corfu) "c:/Users/jiacs/dotfiles/doom-emacs/modules/completion/corfu" (+orderless) nil) vertico #s(doom-module-context 4 (:completion . vertico) "c:/Users/jiacs/dotfiles/doom-emacs/modules/completion/vertico" nil nil)))(setplist ':ui '(doom #s(doom-module-context 5 (:ui . doom) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/doom" nil nil) doom-dashboard #s(doom-module-context 6 (:ui . doom-dashboard) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/doom-dashboard" nil nil) hl-todo #s(doom-module-context 7 (:ui . hl-todo) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/hl-todo" nil nil) modeline #s(doom-module-context 8 (:ui . modeline) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/modeline" nil nil) ophints #s(doom-module-context 9 (:ui . ophints) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/ophints" nil nil) popup #s(doom-module-context 10 (:ui . popup) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/popup" (+defaults) nil) vc-gutter #s(doom-module-context 11 (:ui . vc-gutter) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/vc-gutter" (+pretty) nil) vi-tilde-fringe #s(doom-module-context 12 (:ui . vi-tilde-fringe) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/vi-tilde-fringe" nil nil) workspaces #s(doom-module-context 13 (:ui . workspaces) "c:/Users/jiacs/dotfiles/doom-emacs/modules/ui/workspaces" nil nil)))(setplist ':editor '(evil #s(doom-module-context 14 (:editor . evil) "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/evil" (+everywhere) nil) file-templates #s(doom-module-context 15 (:editor . file-templates) "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/file-templates" nil nil) fold #s(doom-module-context 16 (:editor . fold) "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/fold" nil nil) snippets #s(doom-module-context 17 (:editor . snippets) "c:/Users/jiacs/dotfiles/doom-emacs/modules/editor/snippets" nil nil)))(setplist ':emacs '(dired #s(doom-module-context 18 (:emacs . dired) "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/dired" nil nil) electric #s(doom-module-context 19 (:emacs . electric) "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/electric" nil nil) undo #s(doom-module-context 20 (:emacs . undo) "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/undo" nil nil) vc #s(doom-module-context 21 (:emacs . vc) "c:/Users/jiacs/dotfiles/doom-emacs/modules/emacs/vc" nil nil)))(setplist ':checkers '(syntax #s(doom-module-context 22 (:checkers . syntax) "c:/Users/jiacs/dotfiles/doom-emacs/modules/checkers/syntax" nil nil)))(setplist ':tools '(eval #s(doom-module-context 23 (:tools . eval) "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/eval" (+overlay) nil) lookup #s(doom-module-context 24 (:tools . lookup) "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/lookup" nil nil) magit #s(doom-module-context 25 (:tools . magit) "c:/Users/jiacs/dotfiles/doom-emacs/modules/tools/magit" nil nil)))(setplist ':lang '(emacs-lisp #s(doom-module-context 26 (:lang . emacs-lisp) "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/emacs-lisp" nil nil) markdown #s(doom-module-context 27 (:lang . markdown) "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/markdown" nil nil) org #s(doom-module-context 28 (:lang . org) "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/org" nil nil) sh #s(doom-module-context 29 (:lang . sh) "c:/Users/jiacs/dotfiles/doom-emacs/modules/lang/sh" nil nil)))(setplist ':config '(use-package #s(doom-module-context 2 (:config . use-package) "c:/Users/jiacs/dotfiles/doom-emacs/modules/config/use-package" nil nil) default #s(doom-module-context 30 (:config . default) "c:/Users/jiacs/dotfiles/doom-emacs/modules/config/default" (+bindings +smartparens) nil)))(setplist ':user '(nil #s(doom-module-context 1 (:user) "c:/Users/jiacs/dotfiles/.doom.d/" nil nil)))(defun doom--startup-modules nil (with-doom-context 'module (let ((old-custom-file custom-file)) (with-doom-context 'init (with-doom-module '(:config . use-package) (doom-load "~/doom-emacs/modules/config/use-package/init" t)) (with-doom-module '(:doom) (doom-load (file-name-concat doom-core-dir "init") t)) (doom-run-hooks 'doom-before-modules-init-hook) (doom-run-hooks 'doom-after-modules-init-hook)) (with-doom-context 'config (doom-run-hooks 'doom-before-modules-config-hook) (with-doom-module '(:completion . corfu) (doom-load "~/doom-emacs/modules/completion/corfu/config" t)) (with-doom-module '(:completion . vertico) (doom-load "~/doom-emacs/modules/completion/vertico/config" t)) (with-doom-module '(:ui . doom) (doom-load "~/doom-emacs/modules/ui/doom/config" t)) (with-doom-module '(:ui . doom-dashboard) (doom-load "~/doom-emacs/modules/ui/doom-dashboard/config" t)) (with-doom-module '(:ui . hl-todo) (doom-load "~/doom-emacs/modules/ui/hl-todo/config" t)) (with-doom-module '(:ui . modeline) (doom-load "~/doom-emacs/modules/ui/modeline/config" t)) (with-doom-module '(:ui . ophints) (doom-load "~/doom-emacs/modules/ui/ophints/config" t)) (with-doom-module '(:ui . popup) (doom-load "~/doom-emacs/modules/ui/popup/config" t)) (with-doom-module '(:ui . vc-gutter) (doom-load "~/doom-emacs/modules/ui/vc-gutter/config" t)) (with-doom-module '(:ui . workspaces) (doom-load "~/doom-emacs/modules/ui/workspaces/config" t)) (with-doom-module '(:editor . evil) (doom-load "~/doom-emacs/modules/editor/evil/config" t)) (with-doom-module '(:editor . file-templates) (doom-load "~/doom-emacs/modules/editor/file-templates/config" t)) (with-doom-module '(:editor . fold) (doom-load "~/doom-emacs/modules/editor/fold/config" t)) (with-doom-module '(:editor . snippets) (doom-load "~/doom-emacs/modules/editor/snippets/config" t)) (with-doom-module '(:emacs . dired) (doom-load "~/doom-emacs/modules/emacs/dired/config" t)) (with-doom-module '(:emacs . electric) (doom-load "~/doom-emacs/modules/emacs/electric/config" t)) (with-doom-module '(:emacs . undo) (doom-load "~/doom-emacs/modules/emacs/undo/config" t)) (with-doom-module '(:emacs . vc) (doom-load "~/doom-emacs/modules/emacs/vc/config" t)) (with-doom-module '(:checkers . syntax) (doom-load "~/doom-emacs/modules/checkers/syntax/config" t)) (with-doom-module '(:tools . eval) (doom-load "~/doom-emacs/modules/tools/eval/config" t)) (with-doom-module '(:tools . lookup) (doom-load "~/doom-emacs/modules/tools/lookup/config" t)) (with-doom-module '(:tools . magit) (doom-load "~/doom-emacs/modules/tools/magit/config" t)) (with-doom-module '(:lang . emacs-lisp) (doom-load "~/doom-emacs/modules/lang/emacs-lisp/config" t)) (with-doom-module '(:lang . markdown) (doom-load "~/doom-emacs/modules/lang/markdown/config" t)) (with-doom-module '(:lang . org) (doom-load "~/doom-emacs/modules/lang/org/config" t)) (with-doom-module '(:lang . sh) (doom-load "~/doom-emacs/modules/lang/sh/config" t)) (with-doom-module '(:config . default) (doom-load "~/doom-emacs/modules/config/default/config" t)) (doom-run-hooks 'doom-after-modules-config-hook) (with-doom-module '(:user) (doom-load (file-name-concat doom-user-dir "config") t))) (when (eq custom-file old-custom-file) (doom-load custom-file 'noerror)))))