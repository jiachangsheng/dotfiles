;; -*- lisp-interaction -*-
;; vim: set ft=lisp:
;; command=("C:\\Users\\jiacs\\scoop\\apps\\emacs\\current\\bin\\emacs.exe" "--load" "C:\\Users\\jiacs\\AppData\\Roaming\\.emacs.d\\bin/doom" "--" "--no-color" "install")
;; date="2025-06-15 13-13-45"

;;;; ENVIRONMENT

;;;; 0
((signal doom-package-error
	 ("doom-themes"
	  (file-missing "Opening output file"
			"No such file or directory"
			"c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/state/logs/cli.doom.250615131345.10776.error")))
 ((debugger-may-continue . t) (inhibit-redisplay)
  (inhibit-debugger . t) (inhibit-changing-match-data)))

;;;; 1
((condition-case e
     (let
	 ((straight-vc-git-post-clone-hook
	   (cons
	    #'(lambda (&rest --cl-rest--)
		"\n\n(fn &key COMMIT &allow-other-keys)"
		(let*
		    ((commit
		      (car (cdr (plist-member --cl-rest-- ':commit)))))
		  (progn
		    (let
			((doom-print-level (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let*
			  ((pin (and t (cdr (assoc package pinned)))))
			(if pin
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Pinned to %s")
			      pin))
			  (if commit
			      (progn
				(doom-print
				 (doom-print--format
				  (doom-print--class 'item
						     "Checked out %s")
				  commit))))))))))
	    straight-vc-git-post-clone-hook)))
       (straight-use-package (intern package))
       (if (file-in-directory-p repo-dir straight-base-dir)
	   (progn
	     (let ((try 0))
	       (while
		   (not (file-directory-p (doom-path repo-dir ".git")))
		 (if (= try 3)
		     (progn (error "Failed to clone package")))
		 (doom-print
		  (doom-print--format
		   (doom-print--class 'warn
				      "Failed to clone %S, trying again (attempt #%d)...")
		   package (1+ try)))
		 (delete-directory repo-dir t)
		 (delete-directory build-dir t)
		 (straight-use-package (intern package))
		 (setq try (1+ try))))
	     (if doom--system-windows-p
		 (progn
		   (let ((default-directory repo-dir))
		     (straight--process-run "git" "config"
					    "core.autocrlf" "true")))))))
   ((debug error) (signal 'doom-package-error (list package e))))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (tail
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
  (--cl-rest-- :recipe
	       (:type git :files
		      (:defaults "themes/*.el" "themes/*/*.el"
				 "extensions/*.el"
				 "doom-themes-pkg.el")
		      :host github :repo "doomemacs/themes" :package
		      "doom-themes" :local-repo "themes")
	       :type git :files
	       (:defaults "themes/*.el" "themes/*/*.el"
			  "extensions/*.el" "doom-themes-pkg.el")
	       :host github :repo "doomemacs/themes" :package
	       "doom-themes" :local-repo "themes")
  (package . "doom-themes") (local-repo . "themes")
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
  (repo-dir
   . "c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/straight/repos/themes/")
  (build-dir
   . "c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/straight/build-30.1/doom-themes/")
  (e file-missing "Opening output file" "No such file or directory"
     "c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/state/logs/cli.doom.250615131345.10776.error")))

;;;; 2
((let
     ((repo-dir (straight--repos-dir (or local-repo package)))
      (build-dir (straight--build-dir package)))
   (if force-p nil
     (let*
	 ((build
	   (if (plist-member recipe :build) (plist-get recipe :build)
	     t))
	  (want-byte-compile (or (eq build t) (memq 'compile build)))
	  (want-native-compile
	   (or (eq build t) (memq 'native-compile build))))
       (and (eq (car-safe build) :not)
	    (progn
	      (setq want-byte-compile (not want-byte-compile))
	      (setq want-native-compile (not want-native-compile))))
       (if
	   (or (not (featurep 'native-compile))
	       (not straight--native-comp-available))
	   (progn (setq want-native-compile nil)))
       (and (or want-byte-compile want-native-compile)
	    (or (file-newer-than-file-p repo-dir build-dir)
		(file-exists-p (straight--modified-dir package))
		(let*
		    ((outdated nil)
		     (--cl-var--
		      (doom-files-in build-dir :match "\\.el$" :full t))
		     (file nil))
		  (while (consp --cl-var--)
		    (setq file (car --cl-var--))
		    (if
			(or
			 (if want-byte-compile
			     (doom-packages--elc-file-outdated-p file))
			 (if want-native-compile
			     (doom-packages--eln-file-outdated-p file)))
			(progn
			  (setq outdated t)
			  (if want-native-compile
			      (progn
				(setq
				 doom-packages--eln-output-expected
				 (cons file
				       doom-packages--eln-output-expected))))))
		    (setq --cl-var-- (cdr --cl-var--)))
		  outdated))
	    (puthash package t straight--packages-to-rebuild))))
   (if (file-directory-p repo-dir) nil
     (doom-packages--cli-recipes-update))
   (condition-case e
       (let
	   ((straight-vc-git-post-clone-hook
	     (cons
	      #'(lambda (&rest --cl-rest--)
		  "\n\n(fn &key COMMIT &allow-other-keys)"
		  (let*
		      ((commit
			(car (cdr (plist-member --cl-rest-- ':commit)))))
		    (progn
		      (let
			  ((doom-print-level (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let*
			    ((pin (and t (cdr (assoc package pinned)))))
			  (if pin
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Pinned to %s")
				pin))
			    (if commit
				(progn
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'item
						       "Checked out %s")
				    commit))))))))))
	      straight-vc-git-post-clone-hook)))
	 (straight-use-package (intern package))
	 (if (file-in-directory-p repo-dir straight-base-dir)
	     (progn
	       (let ((try 0))
		 (while
		     (not
		      (file-directory-p (doom-path repo-dir ".git")))
		   (if (= try 3)
		       (progn (error "Failed to clone package")))
		   (doom-print
		    (doom-print--format
		     (doom-print--class 'warn
					"Failed to clone %S, trying again (attempt #%d)...")
		     package (1+ try)))
		   (delete-directory repo-dir t)
		   (delete-directory build-dir t)
		   (straight-use-package (intern package))
		   (setq try (1+ try))))
	       (if doom--system-windows-p
		   (progn
		     (let ((default-directory repo-dir))
		       (straight--process-run "git" "config"
					      "core.autocrlf" "true")))))))
     ((debug error) (signal 'doom-package-error (list package e)))))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (tail
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
  (--cl-rest-- :recipe
	       (:type git :files
		      (:defaults "themes/*.el" "themes/*/*.el"
				 "extensions/*.el"
				 "doom-themes-pkg.el")
		      :host github :repo "doomemacs/themes" :package
		      "doom-themes" :local-repo "themes")
	       :type git :files
	       (:defaults "themes/*.el" "themes/*/*.el"
			  "extensions/*.el" "doom-themes-pkg.el")
	       :host github :repo "doomemacs/themes" :package
	       "doom-themes" :local-repo "themes")
  (package . "doom-themes") (local-repo . "themes")
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
  (repo-dir
   . "c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/straight/repos/themes/")
  (build-dir
   . "c:/Users/jiacs/AppData/Roaming/.emacs.d/.local/straight/build-30.1/doom-themes/")))

;;;; 3
((let*
     ((--cl-rest-- (append (list :recipe recipe) recipe))
      (package (car (cdr (plist-member --cl-rest-- ':package))))
      (local-repo (car (cdr (plist-member --cl-rest-- ':local-repo))))
      (recipe (car (cdr (plist-member --cl-rest-- ':recipe)))))
   (let
       ((repo-dir (straight--repos-dir (or local-repo package)))
	(build-dir (straight--build-dir package)))
     (if force-p nil
       (let*
	   ((build
	     (if (plist-member recipe :build)
		 (plist-get recipe :build)
	       t))
	    (want-byte-compile (or (eq build t) (memq 'compile build)))
	    (want-native-compile
	     (or (eq build t) (memq 'native-compile build))))
	 (and (eq (car-safe build) :not)
	      (progn
		(setq want-byte-compile (not want-byte-compile))
		(setq want-native-compile (not want-native-compile))))
	 (if
	     (or (not (featurep 'native-compile))
		 (not straight--native-comp-available))
	     (progn (setq want-native-compile nil)))
	 (and (or want-byte-compile want-native-compile)
	      (or (file-newer-than-file-p repo-dir build-dir)
		  (file-exists-p (straight--modified-dir package))
		  (let*
		      ((outdated nil)
		       (--cl-var--
			(doom-files-in build-dir :match "\\.el$" :full
				       t))
		       (file nil))
		    (while (consp --cl-var--)
		      (setq file (car --cl-var--))
		      (if
			  (or
			   (if want-byte-compile
			       (doom-packages--elc-file-outdated-p
				file))
			   (if want-native-compile
			       (doom-packages--eln-file-outdated-p
				file)))
			  (progn
			    (setq outdated t)
			    (if want-native-compile
				(progn
				  (setq
				   doom-packages--eln-output-expected
				   (cons file
					 doom-packages--eln-output-expected))))))
		      (setq --cl-var-- (cdr --cl-var--)))
		    outdated))
	      (puthash package t straight--packages-to-rebuild))))
     (if (file-directory-p repo-dir) nil
       (doom-packages--cli-recipes-update))
     (condition-case e
	 (let
	     ((straight-vc-git-post-clone-hook
	       (cons
		#'(lambda (&rest --cl-rest--)
		    "\n\n(fn &key COMMIT &allow-other-keys)"
		    (let*
			((commit
			  (car
			   (cdr (plist-member --cl-rest-- ':commit)))))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (let*
			      ((pin
				(and t (cdr (assoc package pinned)))))
			    (if pin
				(doom-print
				 (doom-print--format
				  (doom-print--class 'item
						     "Pinned to %s")
				  pin))
			      (if commit
				  (progn
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item
							 "Checked out %s")
				      commit))))))))))
		straight-vc-git-post-clone-hook)))
	   (straight-use-package (intern package))
	   (if (file-in-directory-p repo-dir straight-base-dir)
	       (progn
		 (let ((try 0))
		   (while
		       (not
			(file-directory-p (doom-path repo-dir ".git")))
		     (if (= try 3)
			 (progn (error "Failed to clone package")))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn
					  "Failed to clone %S, trying again (attempt #%d)...")
		       package (1+ try)))
		     (delete-directory repo-dir t)
		     (delete-directory build-dir t)
		     (straight-use-package (intern package))
		     (setq try (1+ try))))
		 (if doom--system-windows-p
		     (progn
		       (let ((default-directory repo-dir))
			 (straight--process-run "git" "config"
						"core.autocrlf" "true")))))))
       ((debug error) (signal 'doom-package-error (list package e))))))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (tail
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
  (--cl-rest-- :recipe
	       (:type git :files
		      (:defaults "themes/*.el" "themes/*/*.el"
				 "extensions/*.el"
				 "doom-themes-pkg.el")
		      :host github :repo "doomemacs/themes" :package
		      "doom-themes" :local-repo "themes")
	       :type git :files
	       (:defaults "themes/*.el" "themes/*/*.el"
			  "extensions/*.el" "doom-themes-pkg.el")
	       :host github :repo "doomemacs/themes" :package
	       "doom-themes" :local-repo "themes")
  (package . "doom-themes") (local-repo . "themes")
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")))

;;;; 4
((cl-destructuring-bind
     (&key package local-repo recipe &allow-other-keys)
     (append (list :recipe recipe) recipe)
   (let
       ((repo-dir (straight--repos-dir (or local-repo package)))
	(build-dir (straight--build-dir package)))
     (if force-p nil
       (let*
	   ((build
	     (if (plist-member recipe :build)
		 (plist-get recipe :build)
	       t))
	    (want-byte-compile (or (eq build t) (memq 'compile build)))
	    (want-native-compile
	     (or (eq build t) (memq 'native-compile build))))
	 (and (eq (car-safe build) :not)
	      (progn
		(setq want-byte-compile (not want-byte-compile))
		(setq want-native-compile (not want-native-compile))))
	 (if
	     (or (not (featurep 'native-compile))
		 (not straight--native-comp-available))
	     (progn (setq want-native-compile nil)))
	 (and (or want-byte-compile want-native-compile)
	      (or (file-newer-than-file-p repo-dir build-dir)
		  (file-exists-p (straight--modified-dir package))
		  (let*
		      ((outdated nil)
		       (--cl-var--
			(doom-files-in build-dir :match "\\.el$" :full
				       t))
		       (file nil))
		    (while (consp --cl-var--)
		      (setq file (car --cl-var--))
		      (if
			  (or
			   (if want-byte-compile
			       (doom-packages--elc-file-outdated-p
				file))
			   (if want-native-compile
			       (doom-packages--eln-file-outdated-p
				file)))
			  (progn
			    (setq outdated t)
			    (if want-native-compile
				(progn
				  (setq
				   doom-packages--eln-output-expected
				   (cons file
					 doom-packages--eln-output-expected))))))
		      (setq --cl-var-- (cdr --cl-var--)))
		    outdated))
	      (puthash package t straight--packages-to-rebuild))))
     (if (file-directory-p repo-dir) nil
       (doom-packages--cli-recipes-update))
     (condition-case e
	 (let
	     ((straight-vc-git-post-clone-hook
	       (cons
		#'(lambda (&rest --cl-rest--)
		    "\n\n(fn &key COMMIT &allow-other-keys)"
		    (let*
			((commit
			  (car
			   (cdr (plist-member --cl-rest-- ':commit)))))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (let*
			      ((pin
				(and t (cdr (assoc package pinned)))))
			    (if pin
				(doom-print
				 (doom-print--format
				  (doom-print--class 'item
						     "Pinned to %s")
				  pin))
			      (if commit
				  (progn
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item
							 "Checked out %s")
				      commit))))))))))
		straight-vc-git-post-clone-hook)))
	   (straight-use-package (intern package))
	   (if (file-in-directory-p repo-dir straight-base-dir)
	       (progn
		 (let ((try 0))
		   (while
		       (not
			(file-directory-p (doom-path repo-dir ".git")))
		     (if (= try 3)
			 (progn (error "Failed to clone package")))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn
					  "Failed to clone %S, trying again (attempt #%d)...")
		       package (1+ try)))
		     (delete-directory repo-dir t)
		     (delete-directory build-dir t)
		     (straight-use-package (intern package))
		     (setq try (1+ try))))
		 (if doom--system-windows-p
		     (progn
		       (let ((default-directory repo-dir))
			 (straight--process-run "git" "config"
						"core.autocrlf" "true")))))))
       ((debug error) (signal 'doom-package-error (list package e))))))
 nil)

;;;; 5
((straight--with-plist (append (list :recipe recipe) recipe)
     (package local-repo recipe)
   (let
       ((repo-dir (straight--repos-dir (or local-repo package)))
	(build-dir (straight--build-dir package)))
     (if force-p nil
       (let*
	   ((build
	     (if (plist-member recipe :build)
		 (plist-get recipe :build)
	       t))
	    (want-byte-compile (or (eq build t) (memq 'compile build)))
	    (want-native-compile
	     (or (eq build t) (memq 'native-compile build))))
	 (and (eq (car-safe build) :not)
	      (progn
		(setq want-byte-compile (not want-byte-compile))
		(setq want-native-compile (not want-native-compile))))
	 (if
	     (or (not (featurep 'native-compile))
		 (not straight--native-comp-available))
	     (progn (setq want-native-compile nil)))
	 (and (or want-byte-compile want-native-compile)
	      (or (file-newer-than-file-p repo-dir build-dir)
		  (file-exists-p (straight--modified-dir package))
		  (let*
		      ((outdated nil)
		       (--cl-var--
			(doom-files-in build-dir :match "\\.el$" :full
				       t))
		       (file nil))
		    (while (consp --cl-var--)
		      (setq file (car --cl-var--))
		      (if
			  (or
			   (if want-byte-compile
			       (doom-packages--elc-file-outdated-p
				file))
			   (if want-native-compile
			       (doom-packages--eln-file-outdated-p
				file)))
			  (progn
			    (setq outdated t)
			    (if want-native-compile
				(progn
				  (setq
				   doom-packages--eln-output-expected
				   (cons file
					 doom-packages--eln-output-expected))))))
		      (setq --cl-var-- (cdr --cl-var--)))
		    outdated))
	      (puthash package t straight--packages-to-rebuild))))
     (if (file-directory-p repo-dir) nil
       (doom-packages--cli-recipes-update))
     (condition-case e
	 (let
	     ((straight-vc-git-post-clone-hook
	       (cons
		#'(lambda (&rest --cl-rest--)
		    "\n\n(fn &key COMMIT &allow-other-keys)"
		    (let*
			((commit
			  (car
			   (cdr (plist-member --cl-rest-- ':commit)))))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (let*
			      ((pin
				(and t (cdr (assoc package pinned)))))
			    (if pin
				(doom-print
				 (doom-print--format
				  (doom-print--class 'item
						     "Pinned to %s")
				  pin))
			      (if commit
				  (progn
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item
							 "Checked out %s")
				      commit))))))))))
		straight-vc-git-post-clone-hook)))
	   (straight-use-package (intern package))
	   (if (file-in-directory-p repo-dir straight-base-dir)
	       (progn
		 (let ((try 0))
		   (while
		       (not
			(file-directory-p (doom-path repo-dir ".git")))
		     (if (= try 3)
			 (progn (error "Failed to clone package")))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn
					  "Failed to clone %S, trying again (attempt #%d)...")
		       package (1+ try)))
		     (delete-directory repo-dir t)
		     (delete-directory build-dir t)
		     (straight-use-package (intern package))
		     (setq try (1+ try))))
		 (if doom--system-windows-p
		     (progn
		       (let ((default-directory repo-dir))
			 (straight--process-run "git" "config"
						"core.autocrlf" "true")))))))
       ((debug error) (signal 'doom-package-error (list package e))))))
 nil)

;;;; 6
((let ((recipe (car tail)))
   (straight--with-plist (append (list :recipe recipe) recipe)
       (package local-repo recipe)
     (let
	 ((repo-dir (straight--repos-dir (or local-repo package)))
	  (build-dir (straight--build-dir package)))
       (if force-p nil
	 (let*
	     ((build
	       (if (plist-member recipe :build)
		   (plist-get recipe :build)
		 t))
	      (want-byte-compile
	       (or (eq build t) (memq 'compile build)))
	      (want-native-compile
	       (or (eq build t) (memq 'native-compile build))))
	   (and (eq (car-safe build) :not)
		(progn
		  (setq want-byte-compile (not want-byte-compile))
		  (setq want-native-compile (not want-native-compile))))
	   (if
	       (or (not (featurep 'native-compile))
		   (not straight--native-comp-available))
	       (progn (setq want-native-compile nil)))
	   (and (or want-byte-compile want-native-compile)
		(or (file-newer-than-file-p repo-dir build-dir)
		    (file-exists-p (straight--modified-dir package))
		    (let*
			((outdated nil)
			 (--cl-var--
			  (doom-files-in build-dir :match "\\.el$"
					 :full t))
			 (file nil))
		      (while (consp --cl-var--)
			(setq file (car --cl-var--))
			(if
			    (or
			     (if want-byte-compile
				 (doom-packages--elc-file-outdated-p
				  file))
			     (if want-native-compile
				 (doom-packages--eln-file-outdated-p
				  file)))
			    (progn
			      (setq outdated t)
			      (if want-native-compile
				  (progn
				    (setq
				     doom-packages--eln-output-expected
				     (cons file
					   doom-packages--eln-output-expected))))))
			(setq --cl-var-- (cdr --cl-var--)))
		      outdated))
		(puthash package t straight--packages-to-rebuild))))
       (if (file-directory-p repo-dir) nil
	 (doom-packages--cli-recipes-update))
       (condition-case e
	   (let
	       ((straight-vc-git-post-clone-hook
		 (cons
		  #'(lambda (&rest --cl-rest--)
		      "\n\n(fn &key COMMIT &allow-other-keys)"
		      (let*
			  ((commit
			    (car
			     (cdr (plist-member --cl-rest-- ':commit)))))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (let*
				((pin
				  (and t (cdr (assoc package pinned)))))
			      (if pin
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'item
						       "Pinned to %s")
				    pin))
				(if commit
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'item
							   "Checked out %s")
					commit))))))))))
		  straight-vc-git-post-clone-hook)))
	     (straight-use-package (intern package))
	     (if (file-in-directory-p repo-dir straight-base-dir)
		 (progn
		   (let ((try 0))
		     (while
			 (not
			  (file-directory-p
			   (doom-path repo-dir ".git")))
		       (if (= try 3)
			   (progn (error "Failed to clone package")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'warn
					    "Failed to clone %S, trying again (attempt #%d)...")
			 package (1+ try)))
		       (delete-directory repo-dir t)
		       (delete-directory build-dir t)
		       (straight-use-package (intern package))
		       (setq try (1+ try))))
		   (if doom--system-windows-p
		       (progn
			 (let ((default-directory repo-dir))
			   (straight--process-run "git" "config"
						  "core.autocrlf"
						  "true")))))))
	 ((debug error) (signal 'doom-package-error (list package e))))))
   (setq tail (cdr tail)))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (tail
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (recipe :type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")))

;;;; 7
((while tail
   (let ((recipe (car tail)))
     (straight--with-plist (append (list :recipe recipe) recipe)
	 (package local-repo recipe)
       (let
	   ((repo-dir (straight--repos-dir (or local-repo package)))
	    (build-dir (straight--build-dir package)))
	 (if force-p nil
	   (let*
	       ((build
		 (if (plist-member recipe :build)
		     (plist-get recipe :build)
		   t))
		(want-byte-compile
		 (or (eq build t) (memq 'compile build)))
		(want-native-compile
		 (or (eq build t) (memq 'native-compile build))))
	     (and (eq (car-safe build) :not)
		  (progn
		    (setq want-byte-compile (not want-byte-compile))
		    (setq want-native-compile
			  (not want-native-compile))))
	     (if
		 (or (not (featurep 'native-compile))
		     (not straight--native-comp-available))
		 (progn (setq want-native-compile nil)))
	     (and (or want-byte-compile want-native-compile)
		  (or (file-newer-than-file-p repo-dir build-dir)
		      (file-exists-p (straight--modified-dir package))
		      (let*
			  ((outdated nil)
			   (--cl-var--
			    (doom-files-in build-dir :match "\\.el$"
					   :full t))
			   (file nil))
			(while (consp --cl-var--)
			  (setq file (car --cl-var--))
			  (if
			      (or
			       (if want-byte-compile
				   (doom-packages--elc-file-outdated-p
				    file))
			       (if want-native-compile
				   (doom-packages--eln-file-outdated-p
				    file)))
			      (progn
				(setq outdated t)
				(if want-native-compile
				    (progn
				      (setq
				       doom-packages--eln-output-expected
				       (cons file
					     doom-packages--eln-output-expected))))))
			  (setq --cl-var-- (cdr --cl-var--)))
			outdated))
		  (puthash package t straight--packages-to-rebuild))))
	 (if (file-directory-p repo-dir) nil
	   (doom-packages--cli-recipes-update))
	 (condition-case e
	     (let
		 ((straight-vc-git-post-clone-hook
		   (cons
		    #'(lambda (&rest --cl-rest--)
			"\n\n(fn &key COMMIT &allow-other-keys)"
			(let*
			    ((commit
			      (car
			       (cdr
				(plist-member --cl-rest-- ':commit)))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (let*
				  ((pin
				    (and t
					 (cdr (assoc package pinned)))))
				(if pin
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item
							 "Pinned to %s")
				      pin))
				  (if commit
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Checked out %s")
					  commit))))))))))
		    straight-vc-git-post-clone-hook)))
	       (straight-use-package (intern package))
	       (if (file-in-directory-p repo-dir straight-base-dir)
		   (progn
		     (let ((try 0))
		       (while
			   (not
			    (file-directory-p
			     (doom-path repo-dir ".git")))
			 (if (= try 3)
			     (progn (error "Failed to clone package")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Failed to clone %S, trying again (attempt #%d)...")
			   package (1+ try)))
			 (delete-directory repo-dir t)
			 (delete-directory build-dir t)
			 (straight-use-package (intern package))
			 (setq try (1+ try))))
		     (if doom--system-windows-p
			 (progn
			   (let ((default-directory repo-dir))
			     (straight--process-run "git" "config"
						    "core.autocrlf"
						    "true")))))))
	   ((debug error)
	    (signal 'doom-package-error (list package e))))))
     (setq tail (cdr tail))))
 nil)

;;;; 8
((let ((tail recipes))
   (while tail
     (let ((recipe (car tail)))
       (straight--with-plist (append (list :recipe recipe) recipe)
	   (package local-repo recipe)
	 (let
	     ((repo-dir (straight--repos-dir (or local-repo package)))
	      (build-dir (straight--build-dir package)))
	   (if force-p nil
	     (let*
		 ((build
		   (if (plist-member recipe :build)
		       (plist-get recipe :build)
		     t))
		  (want-byte-compile
		   (or (eq build t) (memq 'compile build)))
		  (want-native-compile
		   (or (eq build t) (memq 'native-compile build))))
	       (and (eq (car-safe build) :not)
		    (progn
		      (setq want-byte-compile (not want-byte-compile))
		      (setq want-native-compile
			    (not want-native-compile))))
	       (if
		   (or (not (featurep 'native-compile))
		       (not straight--native-comp-available))
		   (progn (setq want-native-compile nil)))
	       (and (or want-byte-compile want-native-compile)
		    (or (file-newer-than-file-p repo-dir build-dir)
			(file-exists-p
			 (straight--modified-dir package))
			(let*
			    ((outdated nil)
			     (--cl-var--
			      (doom-files-in build-dir :match "\\.el$"
					     :full t))
			     (file nil))
			  (while (consp --cl-var--)
			    (setq file (car --cl-var--))
			    (if
				(or
				 (if want-byte-compile
				     (doom-packages--elc-file-outdated-p
				      file))
				 (if want-native-compile
				     (doom-packages--eln-file-outdated-p
				      file)))
				(progn
				  (setq outdated t)
				  (if want-native-compile
				      (progn
					(setq
					 doom-packages--eln-output-expected
					 (cons file
					       doom-packages--eln-output-expected))))))
			    (setq --cl-var-- (cdr --cl-var--)))
			  outdated))
		    (puthash package t straight--packages-to-rebuild))))
	   (if (file-directory-p repo-dir) nil
	     (doom-packages--cli-recipes-update))
	   (condition-case e
	       (let
		   ((straight-vc-git-post-clone-hook
		     (cons
		      #'(lambda (&rest --cl-rest--)
			  "\n\n(fn &key COMMIT &allow-other-keys)"
			  (let*
			      ((commit
				(car
				 (cdr
				  (plist-member --cl-rest-- ':commit)))))
			    (progn
			      (let
				  ((doom-print-level
				    (or nil doom-print-level))
				   (doom-print-indent
				    (+
				     (if t
					 (or nil
					     doom-print-indent-increment)
				       0)
				     doom-print-indent)))
				(let*
				    ((pin
				      (and t
					   (cdr (assoc package pinned)))))
				  (if pin
				      (doom-print
				       (doom-print--format
					(doom-print--class 'item
							   "Pinned to %s")
					pin))
				    (if commit
					(progn
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Checked out %s")
					    commit))))))))))
		      straight-vc-git-post-clone-hook)))
		 (straight-use-package (intern package))
		 (if (file-in-directory-p repo-dir straight-base-dir)
		     (progn
		       (let ((try 0))
			 (while
			     (not
			      (file-directory-p
			       (doom-path repo-dir ".git")))
			   (if (= try 3)
			       (progn
				 (error "Failed to clone package")))
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Failed to clone %S, trying again (attempt #%d)...")
			     package (1+ try)))
			   (delete-directory repo-dir t)
			   (delete-directory build-dir t)
			   (straight-use-package (intern package))
			   (setq try (1+ try))))
		       (if doom--system-windows-p
			   (progn
			     (let ((default-directory repo-dir))
			       (straight--process-run "git" "config"
						      "core.autocrlf"
						      "true")))))))
	     ((debug error)
	      (signal 'doom-package-error (list package e))))))
       (setq tail (cdr tail))))
   (nreverse built))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (tail
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))))

;;;; 9
((let*
     ((recipes recipes) (built nil)
      (straight-use-package-pre-build-functions
       (cons
	#'(lambda (pkg &rest _)
	    (setq built (if (member pkg built) built (cons pkg built))))
	straight-use-package-pre-build-functions)))
   (let ((tail recipes))
     (while tail
       (let ((recipe (car tail)))
	 (straight--with-plist (append (list :recipe recipe) recipe)
	     (package local-repo recipe)
	   (let
	       ((repo-dir
		 (straight--repos-dir (or local-repo package)))
		(build-dir (straight--build-dir package)))
	     (if force-p nil
	       (let*
		   ((build
		     (if (plist-member recipe :build)
			 (plist-get recipe :build)
		       t))
		    (want-byte-compile
		     (or (eq build t) (memq 'compile build)))
		    (want-native-compile
		     (or (eq build t) (memq 'native-compile build))))
		 (and (eq (car-safe build) :not)
		      (progn
			(setq want-byte-compile
			      (not want-byte-compile))
			(setq want-native-compile
			      (not want-native-compile))))
		 (if
		     (or (not (featurep 'native-compile))
			 (not straight--native-comp-available))
		     (progn (setq want-native-compile nil)))
		 (and (or want-byte-compile want-native-compile)
		      (or (file-newer-than-file-p repo-dir build-dir)
			  (file-exists-p
			   (straight--modified-dir package))
			  (let*
			      ((outdated nil)
			       (--cl-var--
				(doom-files-in build-dir :match
					       "\\.el$" :full t))
			       (file nil))
			    (while (consp --cl-var--)
			      (setq file (car --cl-var--))
			      (if
				  (or
				   (if want-byte-compile
				       (doom-packages--elc-file-outdated-p
					file))
				   (if want-native-compile
				       (doom-packages--eln-file-outdated-p
					file)))
				  (progn
				    (setq outdated t)
				    (if want-native-compile
					(progn
					  (setq
					   doom-packages--eln-output-expected
					   (cons file
						 doom-packages--eln-output-expected))))))
			      (setq --cl-var-- (cdr --cl-var--)))
			    outdated))
		      (puthash package t straight--packages-to-rebuild))))
	     (if (file-directory-p repo-dir) nil
	       (doom-packages--cli-recipes-update))
	     (condition-case e
		 (let
		     ((straight-vc-git-post-clone-hook
		       (cons
			#'(lambda (&rest --cl-rest--)
			    "\n\n(fn &key COMMIT &allow-other-keys)"
			    (let*
				((commit
				  (car
				   (cdr
				    (plist-member --cl-rest-- ':commit)))))
			      (progn
				(let
				    ((doom-print-level
				      (or nil doom-print-level))
				     (doom-print-indent
				      (+
				       (if t
					   (or nil
					       doom-print-indent-increment)
					 0)
				       doom-print-indent)))
				  (let*
				      ((pin
					(and t
					     (cdr
					      (assoc package pinned)))))
				    (if pin
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Pinned to %s")
					  pin))
				      (if commit
					  (progn
					    (doom-print
					     (doom-print--format
					      (doom-print--class 'item
								 "Checked out %s")
					      commit))))))))))
			straight-vc-git-post-clone-hook)))
		   (straight-use-package (intern package))
		   (if
		       (file-in-directory-p repo-dir straight-base-dir)
		       (progn
			 (let ((try 0))
			   (while
			       (not
				(file-directory-p
				 (doom-path repo-dir ".git")))
			     (if (= try 3)
				 (progn
				   (error "Failed to clone package")))
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "Failed to clone %S, trying again (attempt #%d)...")
			       package (1+ try)))
			     (delete-directory repo-dir t)
			     (delete-directory build-dir t)
			     (straight-use-package (intern package))
			     (setq try (1+ try))))
			 (if doom--system-windows-p
			     (progn
			       (let ((default-directory repo-dir))
				 (straight--process-run "git" "config"
							"core.autocrlf"
							"true")))))))
	       ((debug error)
		(signal 'doom-package-error (list package e))))))
	 (setq tail (cdr tail))))
     (nreverse built)))
 ((force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	 "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "diff-hl"
	 "vi-tilde-fringe" "persp-mode" "evil-args" "evil-easymotion"
	 "expand-region" "embrace" "evil-embrace" "evil-escape"
	 "evil-exchange" "evil-indent-plus" "evil-lion"
	 "evil-nerd-commenter" "evil-numbers" "evil-snipe"
	 "evil-surround" "evil-textobj-anyblock" "evil-traces"
	 "evil-visualstar" "exato" "evil-quick-diff" "annalist"
	 "evil-collection" "vimish-fold" "evil-vimish-fold"
	 "auto-yasnippet" "yasnippet" "doom-snippets" "dirvish"
	 "diredfl" "undo-fu" "undo-fu-session" "vundo"
	 "browse-at-remote" "git-timemachine" "git-modes"
	 "flycheck-popup-tip" "ht" "quickrun" "eros" "popup"
	 "dumb-jump" "request" "highlight-quoted" "elisp-refs"
	 "helpful" "macrostep" "epl" "pkg-info" "overseer" "f"
	 "elisp-def" "elisp-demos" "package-lint" "flycheck"
	 "flycheck-package" "buttercup" "s" "markdown-mode"
	 "markdown-toc" "edit-indirect" "evil-markdown" "org-contrib"
	 "htmlize" "ox-clip" "toc-org" "org-cliplink" "goto-chg"
	 "evil" "evil-org" "with-editor" "transient" "magit-section"
	 "llama" "magit" "seq" "compat" "orgit" "dash" "org" "async"
	 "ob-async" "bash-completion" "avy" "link-hint")
  (straight-use-package-pre-build-functions
   #[(pkg &rest _)
     ((setq built (if (member pkg built) built (cons pkg built))))
     ((built "solaire-mode" "hl-todo" "shrink-path" "nerd-icons"
	     "doom-modeline" "anzu" "evil-anzu" "evil-goggles"
	     "diff-hl" "vi-tilde-fringe" "persp-mode" "evil-args"
	     "evil-easymotion" "expand-region" "embrace"
	     "evil-embrace" "evil-escape" "evil-exchange"
	     "evil-indent-plus" "evil-lion" "evil-nerd-commenter"
	     "evil-numbers" "evil-snipe" "evil-surround"
	     "evil-textobj-anyblock" "evil-traces" "evil-visualstar"
	     "exato" "evil-quick-diff" "annalist" "evil-collection"
	     "vimish-fold" "evil-vimish-fold" "auto-yasnippet"
	     "yasnippet" "doom-snippets" "dirvish" "diredfl" "undo-fu"
	     "undo-fu-session" "vundo" "browse-at-remote"
	     "git-timemachine" "git-modes" "flycheck-popup-tip" "ht"
	     "quickrun" "eros" "popup" "dumb-jump" "request"
	     "highlight-quoted" "elisp-refs" "helpful" "macrostep"
	     "epl" "pkg-info" "overseer" "f" "elisp-def" "elisp-demos"
	     "package-lint" "flycheck" "flycheck-package" "buttercup"
	     "s" "markdown-mode" "markdown-toc" "edit-indirect"
	     "evil-markdown" "org-contrib" "htmlize" "ox-clip"
	     "toc-org" "org-cliplink" "goto-chg" "evil" "evil-org"
	     "with-editor" "transient" "magit-section" "llama" "magit"
	     "seq" "compat" "orgit" "dash" "org" "async" "ob-async"
	     "bash-completion" "avy" "link-hint"))])))

;;;; 10
((and t
      (let*
	  ((recipes recipes) (built nil)
	   (straight-use-package-pre-build-functions
	    (cons
	     #'(lambda (pkg &rest _)
		 (setq built
		       (if (member pkg built) built (cons pkg built))))
	     straight-use-package-pre-build-functions)))
	(let ((tail recipes))
	  (while tail
	    (let ((recipe (car tail)))
	      (straight--with-plist
		  (append (list :recipe recipe) recipe)
		  (package local-repo recipe)
		(let
		    ((repo-dir
		      (straight--repos-dir (or local-repo package)))
		     (build-dir (straight--build-dir package)))
		  (if force-p nil
		    (let*
			((build
			  (if (plist-member recipe :build)
			      (plist-get recipe :build)
			    t))
			 (want-byte-compile
			  (or (eq build t) (memq 'compile build)))
			 (want-native-compile
			  (or (eq build t)
			      (memq 'native-compile build))))
		      (and (eq (car-safe build) :not)
			   (progn
			     (setq want-byte-compile
				   (not want-byte-compile))
			     (setq want-native-compile
				   (not want-native-compile))))
		      (if
			  (or (not (featurep 'native-compile))
			      (not straight--native-comp-available))
			  (progn (setq want-native-compile nil)))
		      (and (or want-byte-compile want-native-compile)
			   (or
			    (file-newer-than-file-p repo-dir build-dir)
			    (file-exists-p
			     (straight--modified-dir package))
			    (let*
				((outdated nil)
				 (--cl-var--
				  (doom-files-in build-dir :match
						 "\\.el$" :full t))
				 (file nil))
			      (while (consp --cl-var--)
				(setq file (car --cl-var--))
				(if
				    (or
				     (if want-byte-compile
					 (doom-packages--elc-file-outdated-p
					  file))
				     (if want-native-compile
					 (doom-packages--eln-file-outdated-p
					  file)))
				    (progn
				      (setq outdated t)
				      (if want-native-compile
					  (progn
					    (setq
					     doom-packages--eln-output-expected
					     (cons file
						   doom-packages--eln-output-expected))))))
				(setq --cl-var-- (cdr --cl-var--)))
			      outdated))
			   (puthash package t
				    straight--packages-to-rebuild))))
		  (if (file-directory-p repo-dir) nil
		    (doom-packages--cli-recipes-update))
		  (condition-case e
		      (let
			  ((straight-vc-git-post-clone-hook
			    (cons
			     #'(lambda (&rest --cl-rest--)
				 "\n\n(fn &key COMMIT &allow-other-keys)"
				 (let*
				     ((commit
				       (car
					(cdr
					 (plist-member --cl-rest--
						       ':commit)))))
				   (progn
				     (let
					 ((doom-print-level
					   (or nil doom-print-level))
					  (doom-print-indent
					   (+
					    (if t
						(or nil
						    doom-print-indent-increment)
					      0)
					    doom-print-indent)))
				       (let*
					   ((pin
					     (and t
						  (cdr
						   (assoc package
							  pinned)))))
					 (if pin
					     (doom-print
					      (doom-print--format
					       (doom-print--class
						'item "Pinned to %s")
					       pin))
					   (if commit
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--class
						    'item
						    "Checked out %s")
						   commit))))))))))
			     straight-vc-git-post-clone-hook)))
			(straight-use-package (intern package))
			(if
			    (file-in-directory-p repo-dir
						 straight-base-dir)
			    (progn
			      (let ((try 0))
				(while
				    (not
				     (file-directory-p
				      (doom-path repo-dir ".git")))
				  (if (= try 3)
				      (progn
					(error
					 "Failed to clone package")))
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'warn
						       "Failed to clone %S, trying again (attempt #%d)...")
				    package (1+ try)))
				  (delete-directory repo-dir t)
				  (delete-directory build-dir t)
				  (straight-use-package
				   (intern package))
				  (setq try (1+ try))))
			      (if doom--system-windows-p
				  (progn
				    (let
					((default-directory repo-dir))
				      (straight--process-run "git"
							     "config"
							     "core.autocrlf"
							     "true")))))))
		    ((debug error)
		     (signal 'doom-package-error (list package e))))))
	      (setq tail (cdr tail))))
	  (nreverse built))))
 nil)

;;;; 11
((let*
     ((built
       (and t
	    (let*
		((recipes recipes) (built nil)
		 (straight-use-package-pre-build-functions
		  (cons
		   #'(lambda (pkg &rest _)
		       (setq built
			     (if (member pkg built) built
			       (cons pkg built))))
		   straight-use-package-pre-build-functions)))
	      (let ((tail recipes))
		(while tail
		  (let ((recipe (car tail)))
		    (straight--with-plist
			(append (list :recipe recipe) recipe)
			(package local-repo recipe)
		      (let
			  ((repo-dir
			    (straight--repos-dir
			     (or local-repo package)))
			   (build-dir (straight--build-dir package)))
			(if force-p nil
			  (let*
			      ((build
				(if (plist-member recipe :build)
				    (plist-get recipe :build)
				  t))
			       (want-byte-compile
				(or (eq build t) (memq 'compile build)))
			       (want-native-compile
				(or (eq build t)
				    (memq 'native-compile build))))
			    (and (eq (car-safe build) :not)
				 (progn
				   (setq want-byte-compile
					 (not want-byte-compile))
				   (setq want-native-compile
					 (not want-native-compile))))
			    (if
				(or (not (featurep 'native-compile))
				    (not
				     straight--native-comp-available))
				(progn (setq want-native-compile nil)))
			    (and
			     (or want-byte-compile want-native-compile)
			     (or
			      (file-newer-than-file-p repo-dir
						      build-dir)
			      (file-exists-p
			       (straight--modified-dir package))
			      (let*
				  ((outdated nil)
				   (--cl-var--
				    (doom-files-in build-dir :match
						   "\\.el$" :full t))
				   (file nil))
				(while (consp --cl-var--)
				  (setq file (car --cl-var--))
				  (if
				      (or
				       (if want-byte-compile
					   (doom-packages--elc-file-outdated-p
					    file))
				       (if want-native-compile
					   (doom-packages--eln-file-outdated-p
					    file)))
				      (progn
					(setq outdated t)
					(if want-native-compile
					    (progn
					      (setq
					       doom-packages--eln-output-expected
					       (cons file
						     doom-packages--eln-output-expected))))))
				  (setq --cl-var-- (cdr --cl-var--)))
				outdated))
			     (puthash package t
				      straight--packages-to-rebuild))))
			(if (file-directory-p repo-dir) nil
			  (doom-packages--cli-recipes-update))
			(condition-case e
			    (let
				((straight-vc-git-post-clone-hook
				  (cons
				   #'(lambda (&rest --cl-rest--)
				       "\n\n(fn &key COMMIT &allow-other-keys)"
				       (let*
					   ((commit
					     (car
					      (cdr
					       (plist-member
						--cl-rest-- ':commit)))))
					 (progn
					   (let
					       ((doom-print-level
						 (or nil
						     doom-print-level))
						(doom-print-indent
						 (+
						  (if t
						      (or nil
							  doom-print-indent-increment)
						    0)
						  doom-print-indent)))
					     (let*
						 ((pin
						   (and t
							(cdr
							 (assoc
							  package
							  pinned)))))
					       (if pin
						   (doom-print
						    (doom-print--format
						     (doom-print--class
						      'item
						      "Pinned to %s")
						     pin))
						 (if commit
						     (progn
						       (doom-print
							(doom-print--format
							 (doom-print--class
							  'item
							  "Checked out %s")
							 commit))))))))))
				   straight-vc-git-post-clone-hook)))
			      (straight-use-package (intern package))
			      (if
				  (file-in-directory-p repo-dir
						       straight-base-dir)
				  (progn
				    (let ((try 0))
				      (while
					  (not
					   (file-directory-p
					    (doom-path repo-dir ".git")))
					(if (= try 3)
					    (progn
					      (error
					       "Failed to clone package")))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn
							     "Failed to clone %S, trying again (attempt #%d)...")
					  package (1+ try)))
					(delete-directory repo-dir t)
					(delete-directory build-dir t)
					(straight-use-package
					 (intern package))
					(setq try (1+ try))))
				    (if doom--system-windows-p
					(progn
					  (let
					      ((default-directory
						repo-dir))
					    (straight--process-run
					     "git" "config"
					     "core.autocrlf" "true")))))))
			  ((debug error)
			   (signal 'doom-package-error
				   (list package e))))))
		    (setq tail (cdr tail))))
		(nreverse built))))))
   (if built
       (progn
	 (if
	     (and (featurep 'native-compile)
		  straight--native-comp-available)
	     (progn
	       (doom-packages--compile-site-files)
	       (doom-packages--wait-for-native-compile-jobs)
	       (doom-packages--write-missing-eln-errors)))
	 (delete-directory (straight--modified-dir) 'recursive)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'success "\15Built %d package(s)")
	   (length built))))
     (doom-print
      (doom-print--format
       (doom-print--class 'item "No packages need attention")))
     nil))
 nil)

;;;; 12
((let
     ((straight-check-for-modifications
       (if (file-directory-p (straight--modified-dir))
	   (progn '(find-when-checking))))
      (straight--allow-find
       (and straight-check-for-modifications
	    (executable-find straight-find-executable) t))
      (straight--packages-not-to-rebuild
       (or straight--packages-not-to-rebuild
	   (make-hash-table :test #'equal)))
      (straight--packages-to-rebuild
       (or (if force-p :all straight--packages-to-rebuild)
	   (make-hash-table :test #'equal)))
      (recipes (doom-package-recipe-alist))
      (pinned (doom-package-pinned-alist)))
   (add-hook 'native-comp-async-cu-done-functions
	     #'doom-packages--native-compile-done-h)
   (straight--make-build-cache-available)
   (let*
       ((built
	 (and t
	      (let*
		  ((recipes recipes) (built nil)
		   (straight-use-package-pre-build-functions
		    (cons
		     #'(lambda (pkg &rest _)
			 (setq built
			       (if (member pkg built) built
				 (cons pkg built))))
		     straight-use-package-pre-build-functions)))
		(let ((tail recipes))
		  (while tail
		    (let ((recipe (car tail)))
		      (straight--with-plist
			  (append (list :recipe recipe) recipe)
			  (package local-repo recipe)
			(let
			    ((repo-dir
			      (straight--repos-dir
			       (or local-repo package)))
			     (build-dir (straight--build-dir package)))
			  (if force-p nil
			    (let*
				((build
				  (if (plist-member recipe :build)
				      (plist-get recipe :build)
				    t))
				 (want-byte-compile
				  (or (eq build t)
				      (memq 'compile build)))
				 (want-native-compile
				  (or (eq build t)
				      (memq 'native-compile build))))
			      (and (eq (car-safe build) :not)
				   (progn
				     (setq want-byte-compile
					   (not want-byte-compile))
				     (setq want-native-compile
					   (not want-native-compile))))
			      (if
				  (or (not (featurep 'native-compile))
				      (not
				       straight--native-comp-available))
				  (progn
				    (setq want-native-compile nil)))
			      (and
			       (or want-byte-compile
				   want-native-compile)
			       (or
				(file-newer-than-file-p repo-dir
							build-dir)
				(file-exists-p
				 (straight--modified-dir package))
				(let*
				    ((outdated nil)
				     (--cl-var--
				      (doom-files-in build-dir :match
						     "\\.el$" :full t))
				     (file nil))
				  (while (consp --cl-var--)
				    (setq file (car --cl-var--))
				    (if
					(or
					 (if want-byte-compile
					     (doom-packages--elc-file-outdated-p
					      file))
					 (if want-native-compile
					     (doom-packages--eln-file-outdated-p
					      file)))
					(progn
					  (setq outdated t)
					  (if want-native-compile
					      (progn
						(setq
						 doom-packages--eln-output-expected
						 (cons file
						       doom-packages--eln-output-expected))))))
				    (setq --cl-var-- (cdr --cl-var--)))
				  outdated))
			       (puthash package t
					straight--packages-to-rebuild))))
			  (if (file-directory-p repo-dir) nil
			    (doom-packages--cli-recipes-update))
			  (condition-case e
			      (let
				  ((straight-vc-git-post-clone-hook
				    (cons
				     #'(lambda (&rest --cl-rest--)
					 "\n\n(fn &key COMMIT &allow-other-keys)"
					 (let*
					     ((commit
					       (car
						(cdr
						 (plist-member
						  --cl-rest-- ':commit)))))
					   (progn
					     (let
						 ((doom-print-level
						   (or nil
						       doom-print-level))
						  (doom-print-indent
						   (+
						    (if t
							(or nil
							    doom-print-indent-increment)
						      0)
						    doom-print-indent)))
					       (let*
						   ((pin
						     (and t
							  (cdr
							   (assoc
							    package
							    pinned)))))
						 (if pin
						     (doom-print
						      (doom-print--format
						       (doom-print--class
							'item
							"Pinned to %s")
						       pin))
						   (if commit
						       (progn
							 (doom-print
							  (doom-print--format
							   (doom-print--class
							    'item
							    "Checked out %s")
							   commit))))))))))
				     straight-vc-git-post-clone-hook)))
				(straight-use-package (intern package))
				(if
				    (file-in-directory-p repo-dir
							 straight-base-dir)
				    (progn
				      (let ((try 0))
					(while
					    (not
					     (file-directory-p
					      (doom-path repo-dir
							 ".git")))
					  (if (= try 3)
					      (progn
						(error
						 "Failed to clone package")))
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn
							       "Failed to clone %S, trying again (attempt #%d)...")
					    package (1+ try)))
					  (delete-directory repo-dir t)
					  (delete-directory build-dir
							    t)
					  (straight-use-package
					   (intern package))
					  (setq try (1+ try))))
				      (if doom--system-windows-p
					  (progn
					    (let
						((default-directory
						  repo-dir))
					      (straight--process-run
					       "git" "config"
					       "core.autocrlf" "true")))))))
			    ((debug error)
			     (signal 'doom-package-error
				     (list package e))))))
		      (setq tail (cdr tail))))
		  (nreverse built))))))
     (if built
	 (progn
	   (if
	       (and (featurep 'native-compile)
		    straight--native-comp-available)
	       (progn
		 (doom-packages--compile-site-files)
		 (doom-packages--wait-for-native-compile-jobs)
		 (doom-packages--write-missing-eln-errors)))
	   (delete-directory (straight--modified-dir) 'recursive)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'success "\15Built %d package(s)")
	     (length built))))
       (doom-print
	(doom-print--format
	 (doom-print--class 'item "No packages need attention")))
       nil)))
 ((straight-check-for-modifications) (straight--allow-find)
  (straight--packages-not-to-rebuild . #s(hash-table test equal))
  (straight--packages-to-rebuild . #s(hash-table test equal))
  (force-p)
  (recipes
   (:type git :host github :repo "noctuid/link-hint.el" :package
	  "link-hint" :local-repo "link-hint.el")
   (:type git :host github :repo "szermatt/emacs-bash-completion"
	  :package "bash-completion" :local-repo
	  "emacs-bash-completion")
   (:type git :host github :repo "astahlman/ob-async" :package
	  "ob-async" :local-repo "ob-async")
   (:type git :host github :repo "magit/orgit" :package "orgit"
	  :local-repo "orgit")
   (:host github :repo "doomelpa/evil-org-mode" :package "evil-org"
	  :type git :local-repo "evil-org-mode")
   (:type git :host github :repo "rexim/org-cliplink" :package
	  "org-cliplink" :local-repo "org-cliplink")
   (:type git :host github :repo "snosov1/toc-org" :package "toc-org"
	  :local-repo "toc-org")
   (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip"
	  :local-repo "ox-clip")
   (:type git :host github :repo "hniksic/emacs-htmlize" :package
	  "htmlize" :local-repo "emacs-htmlize")
   (:type git :host github :repo "abo-abo/avy" :package "avy"
	  :local-repo "avy")
   (:host github :repo "emacsmirror/org-contrib" :files
	  (:defaults "lisp/*.el") :package "org-contrib" :type git
	  :local-repo "org-contrib")
   (:host github :repo "emacs-straight/org-mode" :files
	  (:defaults "etc") :depth 1 :build t :pre-build
	  (progn
	    (with-temp-file "org-loaddefs.el")
	    (with-temp-file "org-version.el"
	      (let
		  ((version
		    (with-temp-buffer
		      (insert-file-contents "lisp/org.el" nil 0 1024)
		      (if
			  (re-search-forward
			   "^;; Version: \\([^\n-]+\\)" nil t)
			  (match-string-no-properties 1)
			"Unknown"))))
		(insert (format "(defun org-release () %S)\n" version)
			(format
			 "(defun org-git-version (&rest _) \"%s-??-%s\")\n"
			 version
			 (cdr
			  (doom-call-process "git" "rev-parse"
					     "--short" "HEAD")))
			"(provide 'org-version)\n"))))
	  :local-repo "org" :package "org" :type git)
   (:host github :repo "Somelauw/evil-markdown" :package
	  "evil-markdown" :type git :local-repo "evil-markdown")
   (:type git :host github :repo "Fanael/edit-indirect" :package
	  "edit-indirect" :local-repo "edit-indirect")
   (:type git :host github :repo "ardumont/markdown-toc" :package
	  "markdown-toc" :local-repo "markdown-toc")
   (:type git :host github :repo "jrblevin/markdown-mode" :package
	  "markdown-mode" :local-repo "markdown-mode")
   (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github
	  :repo "jorgenschaefer/emacs-buttercup" :package "buttercup"
	  :local-repo "emacs-buttercup")
   (:type git :host github :repo "purcell/flycheck-package" :package
	  "flycheck-package" :local-repo "flycheck-package")
   (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host
	  github :repo "xuchunyang/elisp-demos" :package "elisp-demos"
	  :local-repo "elisp-demos")
   (:type git :host github :repo "Wilfred/elisp-def" :package
	  "elisp-def" :local-repo "elisp-def")
   (:type git :host github :repo "tonini/overseer.el" :package
	  "overseer" :local-repo "overseer.el")
   (:type git :host github :repo "emacsorphanage/macrostep" :package
	  "macrostep" :local-repo "macrostep")
   (:type git :host github :repo "Wilfred/helpful" :package "helpful"
	  :local-repo "helpful")
   (:type git :host github :repo "Fanael/highlight-quoted" :package
	  "highlight-quoted" :local-repo "highlight-quoted")
   (:type git :files
	  ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi"
	   "docs/AUTHORS.md" "LICENSE" ".dir-locals.el"
	   (:exclude "lisp/magit-section.el") "magit-pkg.el")
	  :host github :repo "magit/magit" :package "magit"
	  :local-repo "magit")
   (:type git :host github :repo "magit/transient" :package
	  "transient" :local-repo "transient")
   (:type git :files ("request.el" "request-pkg.el") :host github
	  :repo "tkf/emacs-request" :package "request" :local-repo
	  "emacs-request")
   (:type git :host github :repo "jacktasia/dumb-jump" :package
	  "dumb-jump" :local-repo "dumb-jump")
   (:type git :host github :repo "xiongtx/eros" :package "eros"
	  :local-repo "eros")
   (:type git :host github :repo "emacsorphanage/quickrun" :package
	  "quickrun" :local-repo "quickrun")
   (:type git :files
	  (:defaults "data" (:exclude "*flymake.el")
		     "package-lint-pkg.el")
	  :host github :repo "purcell/package-lint" :package
	  "package-lint" :local-repo "package-lint")
   (:type git :host github :repo "flycheck/flycheck-popup-tip"
	  :package "flycheck-popup-tip" :local-repo
	  "flycheck-popup-tip")
   (:type git :host github :repo "flycheck/flycheck" :package
	  "flycheck" :local-repo "flycheck")
   (:type git :host github :repo "magit/git-modes" :package
	  "git-modes" :local-repo "git-modes")
   (:host github :repo "emacsmirror/git-timemachine" :package
	  "git-timemachine" :type git :local-repo "git-timemachine")
   (:type git :host github :repo "rmuslimov/browse-at-remote" :package
	  "browse-at-remote" :local-repo "browse-at-remote")
   (:type git :host github :repo "emacs-straight/vundo" :files
	  ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")
   (:host github :repo "emacsmirror/undo-fu-session" :package
	  "undo-fu-session" :type git :local-repo "undo-fu-session")
   (:host github :repo "emacsmirror/undo-fu" :package "undo-fu" :type
	  git :local-repo "undo-fu")
   (:type git :host github :repo "purcell/diredfl" :package "diredfl"
	  :local-repo "diredfl")
   (:type git :files (:defaults "extensions/*.el" "dirvish-pkg.el")
	  :host github :repo "alexluigit/dirvish" :package "dirvish"
	  :local-repo "dirvish")
   (:host github :repo "doomemacs/snippets" :files (:defaults "*")
	  :package "doom-snippets" :type git :local-repo "snippets")
   (:type git :host github :repo "abo-abo/auto-yasnippet" :package
	  "auto-yasnippet" :local-repo "auto-yasnippet")
   (:type git :host github :repo "alexmurray/evil-vimish-fold"
	  :package "evil-vimish-fold" :local-repo "evil-vimish-fold")
   (:type git :host github :repo "matsievskiysv/vimish-fold" :package
	  "vimish-fold" :local-repo "vimish-fold")
   (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el")
	  :host github :repo "joaotavora/yasnippet" :package
	  "yasnippet" :local-repo "yasnippet")
   (:type git :files (:defaults "modes" "evil-collection-pkg.el")
	  :host github :repo "emacs-evil/evil-collection" :package
	  "evil-collection" :local-repo "evil-collection")
   (:host github :repo "rgrinberg/evil-quick-diff" :package
	  "evil-quick-diff" :type git :local-repo "evil-quick-diff")
   (:type git :host github :repo "ninrod/exato" :package "exato"
	  :local-repo "exato")
   (:type git :host github :repo "bling/evil-visualstar" :package
	  "evil-visualstar" :local-repo "evil-visualstar")
   (:type git :host github :repo "mamapanda/evil-traces" :package
	  "evil-traces" :local-repo "evil-traces")
   (:host github :repo "willghatch/evil-textobj-anyblock" :branch
	  "fix-inner-block" :package "evil-textobj-anyblock" :type git
	  :local-repo "evil-textobj-anyblock")
   (:type git :host github :repo "emacs-evil/evil-surround" :package
	  "evil-surround" :local-repo "evil-surround")
   (:type git :host github :repo "hlissner/evil-snipe" :package
	  "evil-snipe" :local-repo "evil-snipe")
   (:type git :host github :repo "juliapath/evil-numbers" :package
	  "evil-numbers" :local-repo "evil-numbers")
   (:type git :host github :repo "redguardtoo/evil-nerd-commenter"
	  :package "evil-nerd-commenter" :local-repo
	  "evil-nerd-commenter")
   (:type git :host github :repo "edkolev/evil-lion" :package
	  "evil-lion" :local-repo "evil-lion")
   (:type git :host github :repo "TheBB/evil-indent-plus" :package
	  "evil-indent-plus" :local-repo "evil-indent-plus")
   (:type git :host github :repo "Dewdrops/evil-exchange" :package
	  "evil-exchange" :local-repo "evil-exchange")
   (:host github :repo "hlissner/evil-escape" :package "evil-escape"
	  :type git :local-repo "evil-escape")
   (:type git :host github :repo "cute-jumper/evil-embrace.el"
	  :package "evil-embrace" :local-repo "evil-embrace.el")
   (:type git :host github :repo "PythonNut/evil-easymotion" :package
	  "evil-easymotion" :local-repo "evil-easymotion")
   (:type git :host github :repo "wcsmith/evil-args" :package
	  "evil-args" :local-repo "evil-args")
   (:type git :files
	  (:defaults "doc/build/texinfo/evil.texi"
		     (:exclude "evil-test-helpers.el") "evil-pkg.el")
	  :host github :repo "emacs-evil/evil" :package "evil"
	  :local-repo "evil")
   (:type git :host github :repo "Bad-ptr/persp-mode.el" :package
	  "persp-mode" :local-repo "persp-mode.el")
   (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package
	  "vi-tilde-fringe" :local-repo "vi-tilde-fringe")
   (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl"
	  :local-repo "diff-hl")
   (:type git :host github :repo "edkolev/evil-goggles" :package
	  "evil-goggles" :local-repo "evil-goggles")
   (:type git :host github :repo "emacsorphanage/evil-anzu" :package
	  "evil-anzu" :local-repo "evil-anzu")
   (:type git :host github :repo "emacsorphanage/anzu" :package "anzu"
	  :local-repo "anzu")
   (:type git :host github :repo "seagle0128/doom-modeline" :package
	  "doom-modeline" :local-repo "doom-modeline")
   (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo"
	  :local-repo "hl-todo")
   (:type git :host github :repo "hlissner/emacs-solaire-mode"
	  :package "solaire-mode" :local-repo "emacs-solaire-mode")
   (:type git :files
	  (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"
		     "doom-themes-pkg.el")
	  :host github :repo "doomemacs/themes" :package "doom-themes"
	  :local-repo "themes")
   (:type git :host github :repo "mohkale/consult-yasnippet" :package
	  "consult-yasnippet" :local-repo "consult-yasnippet")
   (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo
	  "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo
	  "Emacs-wgrep")
   (:type git :host github :repo "minad/marginalia" :package
	  "marginalia" :local-repo "marginalia")
   (:files ("embark-consult.el" "embark-consult-pkg.el") :package
	   "embark-consult" :local-repo "embark" :type git :repo
	   "oantolin/embark" :host github)
   (:type git :files
	  ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el")
	  :host github :repo "oantolin/embark" :package "embark"
	  :local-repo "embark")
   (:type git :host github :repo "minad/consult-flycheck" :package
	  "consult-flycheck" :local-repo "consult-flycheck")
   (:type git :host github :repo "karthink/consult-dir" :package
	  "consult-dir" :local-repo "consult-dir")
   (:type git :host github :repo "minad/consult" :package "consult"
	  :local-repo "consult")
   (:type git :host github :repo "oantolin/orderless" :package
	  "orderless" :local-repo "orderless")
   (:type git :files
	  (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host
	  github :repo "minad/vertico" :package "vertico" :local-repo
	  "vertico")
   (:type git :host github :repo "elken/yasnippet-capf" :package
	  "yasnippet-capf" :local-repo "yasnippet-capf")
   (:type git :host github :repo "minad/cape" :package "cape"
	  :local-repo "cape")
   (:type git :files
	  (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host
	  github :repo "minad/corfu" :package "corfu" :local-repo
	  "corfu")
   (:type git :host github :repo "justbur/emacs-which-key" :package
	  "which-key" :local-repo "emacs-which-key")
   (:type git :host github :repo "noctuid/general.el" :package
	  "general" :local-repo "general.el")
   (:type git :host github :repo "emacs-straight/project" :files
	  ("*" (:exclude ".git")) :package "project" :local-repo
	  "project")
   (:type git :host github :repo "bbatsov/projectile" :package
	  "projectile" :local-repo "projectile")
   (:host github :repo "emacsmirror/nongnu_elpa" :branch
	  "elpa/ws-butler" :local-repo "ws-butler" :package
	  "ws-butler" :type git)
   (:type git :host github :repo "Fuco1/smartparens" :package
	  "smartparens" :local-repo "smartparens")
   (:type git :host github :repo "jscheid/dtrt-indent" :package
	  "dtrt-indent" :local-repo "dtrt-indent")
   (:type git :host github :repo "gilbertw1/better-jumper" :package
	  "better-jumper" :local-repo "better-jumper")
   (:type git :host github :repo "iqbalansari/restart-emacs" :package
	  "restart-emacs" :local-repo "restart-emacs")
   (:type git :host github :repo "Fanael/rainbow-delimiters" :package
	  "rainbow-delimiters" :local-repo "rainbow-delimiters")
   (:type git :host github :repo "Fanael/highlight-numbers" :package
	  "highlight-numbers" :local-repo "highlight-numbers")
   (:type git :host github :repo "hlissner/emacs-hide-mode-line"
	  :package "hide-mode-line" :local-repo "emacs-hide-mode-line")
   (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host
	  github :repo "rainstormstudio/nerd-icons.el" :package
	  "nerd-icons" :local-repo "nerd-icons.el")
   (:type git :host gitlab :repo "koral/gcmh" :package "gcmh"
	  :local-repo "gcmh")
   (:host github :repo "emacs-compat/compat" :files
	  ("*" (:exclude ".git")) :package "compat" :type git
	  :local-repo "compat")
   (:type git :host github :repo "joewreschnig/auto-minor-mode"
	  :package "auto-minor-mode" :local-repo "auto-minor-mode")
   (:type git :host github :repo "emacs-straight/use-package" :files
	  ("*" (:exclude ".git")) :package "use-package" :local-repo
	  "use-package")
   (:files ("bind-key.el") :repo "emacs-straight/bind-key" :host
	   github :package "bind-key" :type git :local-repo "bind-key")
   (:host github :repo "radian-software/straight.el" :branch "develop"
	  :local-repo "straight.el" :files ("straight*.el") :package
	  "straight" :type git)
   (:type git :host github :repo "emacs-straight/emacsmirror-mirror"
	  :build nil :package "emacsmirror-mirror" :local-repo
	  "emacsmirror-mirror")
   (:type git :host github :repo "dimitri/el-get" :build nil :package
	  "el-get" :local-repo "el-get")
   (:type git :host github :repo "emacs-straight/gnu-elpa-mirror"
	  :build nil :package "gnu-elpa-mirror" :local-repo
	  "gnu-elpa-mirror")
   (:type git :host github :repo "emacsmirror/nongnu_elpa" :local-repo
	  "nongnu-elpa" :build nil :package "nongnu-elpa")
   (:type git :host github :repo "melpa/melpa" :build nil :package
	  "melpa" :local-repo "melpa"))
  (pinned
   ("link-hint.el" . "826993a0ab736ab09f53a0623fb44edf2182b07c")
   ("emacs-bash-completion"
    . "d0637428fd0592ef56baa0255673300129f98c48")
   ("ob-async" . "9aac486073f5c356ada20e716571be33a350a982")
   ("orgit" . "efd98e5caaac1d08677dae95be40fab65dcda2c8")
   ("evil-org-mode" . "06518c65ff4f7aea2ea51149d701549dcbccce5d")
   ("org-cliplink" . "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")
   ("toc-org" . "6d3ae0fc47ce79b1ea06cabe21a3c596395409cd")
   ("ox-clip" . "a549cc8e1747beb6b7e567ffac27e31ba45cb8e8")
   ("emacs-htmlize" . "8e3841c837b4b78bd72ad7f0436e919f39315a46")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("org-contrib" . "f1f6b6ec812803ff99693255555a82960fb3545a")
   ("org" . "79781bac69896150fd617e5fde65905fa4822b72")
   ("evil-markdown" . "8e6cc68af83914b2fa9fd3a3b8472573dbcef477")
   ("edit-indirect" . "82a28d8a85277cfe453af464603ea330eae41c05")
   ("markdown-toc" . "1b0c5ae7f306f60b909390cad009b76660dd5acd")
   ("markdown-mode" . "90ad4af79a8bb65a3a5cdd6314be44abd9517cfc")
   ("emacs-buttercup" . "c467c659b2c5b7029e20909331e072d7301af1d5")
   ("flycheck-package" . "a52e4e95f3151898b36739dfdb4a98b368626fc0")
   ("elisp-demos" . "1a108d1c5011f9ced58be2ca98bea1fbd4130a2f")
   ("elisp-def" . "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")
   ("overseer.el" . "7fdcf1a6fba6b1569a09c1666b4e51bcde266ed9")
   ("macrostep" . "d0928626b4711dcf9f8f90439d23701118724199")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("highlight-quoted" . "24103478158cd19fbcfb4339a3f1fa1f054f1469")
   ("magit" . "2f1ff91f128f28aa277e0e060ef44b4be8a989c1")
   ("transient" . "f3f498aa155f88c7e2ab6d1d01d1361813059db8")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("dumb-jump" . "42f97dea503367bf45c53a69de959177b06b0f59")
   ("eros" . "a9a92bdc6be0521a6a06eb464be55ed61946639c")
   ("quickrun" . "bae8efb8c5bc428e4df731b5c214aae478c707da")
   ("package-lint" . "2dc48e5fb9c37390d9290d4f5ab371c39b7a3829")
   ("flycheck-popup-tip" . "ef86aad907f27ca076859d8d9416f4f7727619c6")
   ("flycheck" . "16b536b031cbfb5e95a3914ea1e6c1bcadb4d0ad")
   ("git-modes" . "f99010bbeb8b6d8a0819fac0195a2ef0159d08f0")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("vundo" . "5a666b34e4f609cca77b4a07b97b38581deb7e7e")
   ("undo-fu-session" . "d90d42ddba8fa42ef5dc109196545caeabb42b75")
   ("undo-fu" . "399cc12f907f81a709f9014b6fad0205700d5772")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dirvish" . "d877433f957a363ad78b228e13a8e5215f2d6593")
   ("snippets" . "fd4edaaf0c8476a26994db17d084b36733c635e2")
   ("auto-yasnippet" . "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")
   ("evil-vimish-fold" . "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")
   ("vimish-fold" . "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("evil-collection" . "4748cfb78488fce96812130e0b53aae6d042ca6d")
   ("evil-quick-diff" . "69c883720b30a892c63bc89f49d4f0e8b8028908")
   ("exato" . "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")
   ("evil-visualstar" . "06c053d8f7381f91c53311b1234872ca96ced752")
   ("evil-traces" . "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")
   ("evil-textobj-anyblock"
    . "29280cd71a05429364cdceef2ff595ae8afade4d")
   ("evil-surround" . "da05c60b0621cf33161bb4335153f75ff5c29d91")
   ("evil-snipe" . "16317d7e54313490a0fe8642ed9a1a72498e7ad2")
   ("evil-numbers" . "f4bbb729eebeef26966fae17bd414a7b49f82275")
   ("evil-nerd-commenter" . "ae52c5070a48793e2c24474c9c8dbf20175d18a0")
   ("evil-lion" . "5a0bca151466960e090d1803c4c5ded88875f90a")
   ("evil-indent-plus" . "f392696e4813f1d3a92c7eeed333248914ba6dae")
   ("evil-exchange" . "5f0a2d41434c17c6fb02e4f744043775de1c63a2")
   ("evil-escape" . "819f1ee1cf3f69a1ae920e6004f2c0baeebbe077")
   ("evil-embrace.el" . "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")
   ("evil-easymotion" . "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")
   ("evil-args" . "a8151556f63c9d45d0c44c8a7ef9e5a542f3cdc7")
   ("evil" . "682e87fce99f39ea3155f11f87ee56b6e4593304")
   ("persp-mode.el" . "40e9993a9711cba5fb56dfec81a507fabeba9668")
   ("vi-tilde-fringe" . "f1597a8d54535bb1d84b442577b2024e6f910308")
   ("diff-hl" . "9b032018fda8eb6c241bba1ec0e5c354ad523b2c")
   ("evil-goggles" . "34ca276a85f615d2b45e714c9f8b5875bcb676f3")
   ("evil-anzu" . "7309650425797420944075c9c1556c7c1ff960b3")
   ("anzu" . "21cb5ab2295614372cb9f1a21429381e49a6255f")
   ("doom-modeline" . "a85cb28da8bcb29be232e21879f0f5a1e8551b8c")
   ("hl-todo" . "7ed8bbcadb5229d648b194e0e4c4d261825aa91b")
   ("emacs-solaire-mode" . "c9334666bd208f3322e6118d30eba1b2438e2bb9")
   ("themes" . "729ad034631cba41602ad9191275ece472c21941")
   ("consult-yasnippet" . "a3482dfbdcbe487ba5ff934a1bb6047066ff2194")
   ("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("marginalia" . "0e7097051cbcedcc4da9b633406291d4052ec0e4")
   ("embark" . "2941f2ea36d61c1a84c3f79ebe47d604c9a92b5d")
   ("consult-flycheck" . "8067363ee33c01d339d9f18091dce5f18e3b97ee")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult" . "7146596b564fb0a52b5bff420f27454911f603c8")
   ("orderless" . "254f2412489bbbf62700f9d3d5f18e537841dcc3")
   ("vertico" . "b43b594bb318e722b908f01a6a11409af14b1413")
   ("yasnippet-capf" . "f53c42a996b86fc95b96bdc2deeb58581f48c666")
   ("cape" . "c9191ee9e13e86a7b40c3d25c8bf7907c085a1cf")
   ("corfu" . "53aa6c85be72ce220a4321487c535295b0de0488")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("general.el" . "74d4541781d3a01933dda298eb932c06e67413f9")
   ("project" . "de0deb8dbfb65eae6eaaf45aea77f12aa9a25f89")
   ("projectile" . "0da59734fbc23fc26222a7d03f6671b3116b0b77")
   ("ws-butler" . "9ee5a7657a22e836618813c2e2b64a548d27d2ff")
   ("smartparens" . "b629b4e893ba21ba5a381f6c0054bb72f8e96df2")
   ("dtrt-indent" . "015b26d6d6af9465c1dc48ef721db119ecd78437")
   ("better-jumper" . "b1bf7a3c8cb820d942a0305e0e6412ef369f819c")
   ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("highlight-numbers" . "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")
   ("emacs-hide-mode-line"
    . "ddd154f1e04d666cd004bf8212ead8684429350d")
   ("nerd-icons.el" . "d972dee349395ffae8fceae790d22fedc8fe08e8")
   ("straight.el" . "4128d423998696d03cca2acb6b8828e907e8e0d9")
   ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
   ("compat" . "2577cc74d996620766adf1c9ec8f44ecbac32e79")
   ("auto-minor-mode" . "17cfa1b54800fdef2975c0c0531dad34846a5065")
   ("use-package" . "bbfe01bdf15eeb61babffd1c5b6facd3d2ce3630")
   ("bind-key" . "aa22c8c3c740c2f306509b9c37d9511cfa41b612"))))

;;;; 13
((let
     ((doom-print-level (or nil doom-print-level))
      (doom-print-indent
       (+ (if t (or nil doom-print-indent-increment) 0)
	  doom-print-indent)))
   (let
       ((straight-check-for-modifications
	 (if (file-directory-p (straight--modified-dir))
	     (progn '(find-when-checking))))
	(straight--allow-find
	 (and straight-check-for-modifications
	      (executable-find straight-find-executable) t))
	(straight--packages-not-to-rebuild
	 (or straight--packages-not-to-rebuild
	     (make-hash-table :test #'equal)))
	(straight--packages-to-rebuild
	 (or (if force-p :all straight--packages-to-rebuild)
	     (make-hash-table :test #'equal)))
	(recipes (doom-package-recipe-alist))
	(pinned (doom-package-pinned-alist)))
     (add-hook 'native-comp-async-cu-done-functions
	       #'doom-packages--native-compile-done-h)
     (straight--make-build-cache-available)
     (let*
	 ((built
	   (and t
		(let*
		    ((recipes recipes) (built nil)
		     (straight-use-package-pre-build-functions
		      (cons
		       #'(lambda (pkg &rest _)
			   (setq built
				 (if (member pkg built) built
				   (cons pkg built))))
		       straight-use-package-pre-build-functions)))
		  (let ((tail recipes))
		    (while tail
		      (let ((recipe (car tail)))
			(straight--with-plist
			    (append (list :recipe recipe) recipe)
			    (package local-repo recipe)
			  (let
			      ((repo-dir
				(straight--repos-dir
				 (or local-repo package)))
			       (build-dir
				(straight--build-dir package)))
			    (if force-p nil
			      (let*
				  ((build
				    (if (plist-member recipe :build)
					(plist-get recipe :build)
				      t))
				   (want-byte-compile
				    (or (eq build t)
					(memq 'compile build)))
				   (want-native-compile
				    (or (eq build t)
					(memq 'native-compile build))))
				(and (eq (car-safe build) :not)
				     (progn
				       (setq want-byte-compile
					     (not want-byte-compile))
				       (setq want-native-compile
					     (not want-native-compile))))
				(if
				    (or
				     (not (featurep 'native-compile))
				     (not
				      straight--native-comp-available))
				    (progn
				      (setq want-native-compile nil)))
				(and
				 (or want-byte-compile
				     want-native-compile)
				 (or
				  (file-newer-than-file-p repo-dir
							  build-dir)
				  (file-exists-p
				   (straight--modified-dir package))
				  (let*
				      ((outdated nil)
				       (--cl-var--
					(doom-files-in build-dir
						       :match "\\.el$"
						       :full t))
				       (file nil))
				    (while (consp --cl-var--)
				      (setq file (car --cl-var--))
				      (if
					  (or
					   (if want-byte-compile
					       (doom-packages--elc-file-outdated-p
						file))
					   (if want-native-compile
					       (doom-packages--eln-file-outdated-p
						file)))
					  (progn
					    (setq outdated t)
					    (if want-native-compile
						(progn
						  (setq
						   doom-packages--eln-output-expected
						   (cons file
							 doom-packages--eln-output-expected))))))
				      (setq --cl-var--
					    (cdr --cl-var--)))
				    outdated))
				 (puthash package t
					  straight--packages-to-rebuild))))
			    (if (file-directory-p repo-dir) nil
			      (doom-packages--cli-recipes-update))
			    (condition-case e
				(let
				    ((straight-vc-git-post-clone-hook
				      (cons
				       #'(lambda (&rest --cl-rest--)
					   "\n\n(fn &key COMMIT &allow-other-keys)"
					   (let*
					       ((commit
						 (car
						  (cdr
						   (plist-member
						    --cl-rest--
						    ':commit)))))
					     (progn
					       (let
						   ((doom-print-level
						     (or nil
							 doom-print-level))
						    (doom-print-indent
						     (+
						      (if t
							  (or nil
							      doom-print-indent-increment)
							0)
						      doom-print-indent)))
						 (let*
						     ((pin
						       (and t
							    (cdr
							     (assoc
							      package
							      pinned)))))
						   (if pin
						       (doom-print
							(doom-print--format
							 (doom-print--class
							  'item
							  "Pinned to %s")
							 pin))
						     (if commit
							 (progn
							   (doom-print
							    (doom-print--format
							     (doom-print--class
							      'item
							      "Checked out %s")
							     commit))))))))))
				       straight-vc-git-post-clone-hook)))
				  (straight-use-package
				   (intern package))
				  (if
				      (file-in-directory-p repo-dir
							   straight-base-dir)
				      (progn
					(let ((try 0))
					  (while
					      (not
					       (file-directory-p
						(doom-path repo-dir
							   ".git")))
					    (if (= try 3)
						(progn
						  (error
						   "Failed to clone package")))
					    (doom-print
					     (doom-print--format
					      (doom-print--class 'warn
								 "Failed to clone %S, trying again (attempt #%d)...")
					      package (1+ try)))
					    (delete-directory repo-dir
							      t)
					    (delete-directory
					     build-dir t)
					    (straight-use-package
					     (intern package))
					    (setq try (1+ try))))
					(if doom--system-windows-p
					    (progn
					      (let
						  ((default-directory
						    repo-dir))
						(straight--process-run
						 "git" "config"
						 "core.autocrlf"
						 "true")))))))
			      ((debug error)
			       (signal 'doom-package-error
				       (list package e))))))
			(setq tail (cdr tail))))
		    (nreverse built))))))
       (if built
	   (progn
	     (if
		 (and (featurep 'native-compile)
		      straight--native-comp-available)
		 (progn
		   (doom-packages--compile-site-files)
		   (doom-packages--wait-for-native-compile-jobs)
		   (doom-packages--write-missing-eln-errors)))
	     (delete-directory (straight--modified-dir) 'recursive)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'success "\15Built %d package(s)")
	       (length built))))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "No packages need attention")))
	 nil))))
 ((doom-print-level . notice) (doom-print-indent . 4)))

;;;; 14
((progn
   (let
       ((doom-print-level (or nil doom-print-level))
	(doom-print-indent
	 (+ (if t (or nil doom-print-indent-increment) 0)
	    doom-print-indent)))
     (let
	 ((straight-check-for-modifications
	   (if (file-directory-p (straight--modified-dir))
	       (progn '(find-when-checking))))
	  (straight--allow-find
	   (and straight-check-for-modifications
		(executable-find straight-find-executable) t))
	  (straight--packages-not-to-rebuild
	   (or straight--packages-not-to-rebuild
	       (make-hash-table :test #'equal)))
	  (straight--packages-to-rebuild
	   (or (if force-p :all straight--packages-to-rebuild)
	       (make-hash-table :test #'equal)))
	  (recipes (doom-package-recipe-alist))
	  (pinned (doom-package-pinned-alist)))
       (add-hook 'native-comp-async-cu-done-functions
		 #'doom-packages--native-compile-done-h)
       (straight--make-build-cache-available)
       (let*
	   ((built
	     (and t
		  (let*
		      ((recipes recipes) (built nil)
		       (straight-use-package-pre-build-functions
			(cons
			 #'(lambda (pkg &rest _)
			     (setq built
				   (if (member pkg built) built
				     (cons pkg built))))
			 straight-use-package-pre-build-functions)))
		    (let ((tail recipes))
		      (while tail
			(let ((recipe (car tail)))
			  (straight--with-plist
			      (append (list :recipe recipe) recipe)
			      (package local-repo recipe)
			    (let
				((repo-dir
				  (straight--repos-dir
				   (or local-repo package)))
				 (build-dir
				  (straight--build-dir package)))
			      (if force-p nil
				(let*
				    ((build
				      (if (plist-member recipe :build)
					  (plist-get recipe :build)
					t))
				     (want-byte-compile
				      (or (eq build t)
					  (memq 'compile build)))
				     (want-native-compile
				      (or (eq build t)
					  (memq 'native-compile build))))
				  (and (eq (car-safe build) :not)
				       (progn
					 (setq want-byte-compile
					       (not want-byte-compile))
					 (setq want-native-compile
					       (not
						want-native-compile))))
				  (if
				      (or
				       (not (featurep 'native-compile))
				       (not
					straight--native-comp-available))
				      (progn
					(setq want-native-compile nil)))
				  (and
				   (or want-byte-compile
				       want-native-compile)
				   (or
				    (file-newer-than-file-p repo-dir
							    build-dir)
				    (file-exists-p
				     (straight--modified-dir package))
				    (let*
					((outdated nil)
					 (--cl-var--
					  (doom-files-in build-dir
							 :match
							 "\\.el$"
							 :full t))
					 (file nil))
				      (while (consp --cl-var--)
					(setq file (car --cl-var--))
					(if
					    (or
					     (if want-byte-compile
						 (doom-packages--elc-file-outdated-p
						  file))
					     (if want-native-compile
						 (doom-packages--eln-file-outdated-p
						  file)))
					    (progn
					      (setq outdated t)
					      (if want-native-compile
						  (progn
						    (setq
						     doom-packages--eln-output-expected
						     (cons file
							   doom-packages--eln-output-expected))))))
					(setq --cl-var--
					      (cdr --cl-var--)))
				      outdated))
				   (puthash package t
					    straight--packages-to-rebuild))))
			      (if (file-directory-p repo-dir) nil
				(doom-packages--cli-recipes-update))
			      (condition-case e
				  (let
				      ((straight-vc-git-post-clone-hook
					(cons
					 #'(lambda (&rest --cl-rest--)
					     "\n\n(fn &key COMMIT &allow-other-keys)"
					     (let*
						 ((commit
						   (car
						    (cdr
						     (plist-member
						      --cl-rest--
						      ':commit)))))
					       (progn
						 (let
						     ((doom-print-level
						       (or nil
							   doom-print-level))
						      (doom-print-indent
						       (+
							(if t
							    (or nil
								doom-print-indent-increment)
							  0)
							doom-print-indent)))
						   (let*
						       ((pin
							 (and t
							      (cdr
							       (assoc
								package
								pinned)))))
						     (if pin
							 (doom-print
							  (doom-print--format
							   (doom-print--class
							    'item
							    "Pinned to %s")
							   pin))
						       (if commit
							   (progn
							     (doom-print
							      (doom-print--format
							       (doom-print--class
								'item
								"Checked out %s")
							       commit))))))))))
					 straight-vc-git-post-clone-hook)))
				    (straight-use-package
				     (intern package))
				    (if
					(file-in-directory-p repo-dir
							     straight-base-dir)
					(progn
					  (let ((try 0))
					    (while
						(not
						 (file-directory-p
						  (doom-path repo-dir
							     ".git")))
					      (if (= try 3)
						  (progn
						    (error
						     "Failed to clone package")))
					      (doom-print
					       (doom-print--format
						(doom-print--class
						 'warn
						 "Failed to clone %S, trying again (attempt #%d)...")
						package (1+ try)))
					      (delete-directory
					       repo-dir t)
					      (delete-directory
					       build-dir t)
					      (straight-use-package
					       (intern package))
					      (setq try (1+ try))))
					  (if doom--system-windows-p
					      (progn
						(let
						    ((default-directory
						      repo-dir))
						  (straight--process-run
						   "git" "config"
						   "core.autocrlf"
						   "true")))))))
				((debug error)
				 (signal 'doom-package-error
					 (list package e))))))
			  (setq tail (cdr tail))))
		      (nreverse built))))))
	 (if built
	     (progn
	       (if
		   (and (featurep 'native-compile)
			straight--native-comp-available)
		   (progn
		     (doom-packages--compile-site-files)
		     (doom-packages--wait-for-native-compile-jobs)
		     (doom-packages--write-missing-eln-errors)))
	       (delete-directory (straight--modified-dir) 'recursive)
	       (doom-print
		(doom-print--format
		 (doom-print--class 'success "\15Built %d package(s)")
		 (length built))))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "No packages need attention")))
	   nil)))))
 nil)

;;;; 15
((doom-packages-ensure) ((force-p)))

;;;; 16
((let
     ((doom-print-level (or nil doom-print-level))
      (doom-print-indent
       (+ (if t (or nil doom-print-indent-increment) 0)
	  doom-print-indent)))
   (doom-packages-ensure))
 ((doom-print-level . notice) (doom-print-indent . 2)))

;;;; 17
((progn
   (let
       ((doom-print-level (or nil doom-print-level))
	(doom-print-indent
	 (+ (if t (or nil doom-print-indent-increment) 0)
	    doom-print-indent)))
     (doom-packages-ensure)))
 nil)

;;;; 18
((if (eq install? :no)
     (doom-print
      (doom-print--format
       (doom-print--class 'warn "Not installing plugins, as requested")))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Installing plugins")))
   (progn
     (let
	 ((doom-print-level (or nil doom-print-level))
	  (doom-print-indent
	   (+ (if t (or nil doom-print-indent-increment) 0)
	      doom-print-indent)))
       (doom-packages-ensure))))
 nil)

;;;; 19
((let
     ((default-directory doom-emacs-dir)
      (yes?
       (let* ((cl-x context))
	 (progn
	   (or
	    (let* ((cl-x cl-x))
	      (progn
		(and
		 (memq (type-of cl-x) cl-struct-doom-cli-context-tags)
		 t)))
	    (signal 'wrong-type-argument (list 'doom-cli-context cl-x)))
	   (aref cl-x 6)))))
   (if (eq config? :no)
       (doom-print
	(doom-print--format
	 (doom-print--class 'warn
			    "Not copying private config template, as requested")))
     (if
	 (and (not (file-directory-p doom-user-dir))
	      (not (getenv "DOOMDIR")))
	 (progn
	   (let
	       ((xdg-config-dir
		 (or (getenv "XDG_CONFIG_HOME") "~/.config")))
	     (if (file-in-directory-p doom-emacs-dir xdg-config-dir)
		 (progn
		   (setq doom-user-dir
			 (expand-file-name "doom/" xdg-config-dir)))))))
     (if (file-directory-p doom-user-dir)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Skipping %s (already exists)")
	   (doom-print--class 'path doom-user-dir)))
       (make-directory doom-user-dir 'parents)
       (doom-print
	(doom-print--format (doom-print--class 'success "Created %s")
			    (doom-print--class 'path doom-user-dir))))
     (progn
       (let
	   ((doom-print-level (or nil doom-print-level))
	    (doom-print-indent
	     (+ (if t (or nil doom-print-indent-increment) 0)
		doom-print-indent)))
	 (mapc
	  #'(lambda (file)
	      (let*
		  ((template file)
		   (filename
		    (if template
			(car-safe
			 (prog1 template
			   (setq template (cdr template))))
		      (signal 'wrong-number-of-arguments
			      (list '(filename . template)
				    (length template))))))
		(progn
		  (setq filename (doom-path doom-user-dir filename))
		  (if (file-exists-p filename)
		      (doom-print
		       (doom-print--format
			(doom-print--class 'item
					   "Skipping %s (already exists)...")
			(doom-print--class 'path filename)))
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'item "Creating %s...")
		      (doom-print--class 'path filename)))
		    (let
			((temp-file filename)
			 (temp-buffer
			  (generate-new-buffer " *temp file*" t)))
		      (unwind-protect
			  (prog1
			      (save-current-buffer
				(set-buffer temp-buffer)
				(insert-file-contents template))
			    (save-current-buffer
			      (set-buffer temp-buffer)
			      (write-region nil nil temp-file nil 0)))
			(and (buffer-name temp-buffer)
			     (kill-buffer temp-buffer))))
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'success "Done!")))))))
	  (let ((template-dir (doom-path doom-emacs-dir "static/")))
	    (list
	     (cons doom-module-init-file
		   (file-name-with-extension
		    (doom-path template-dir doom-module-init-file)
		    ".example.el"))
	     (cons doom-module-config-file
		   (file-name-with-extension
		    (doom-path template-dir doom-module-config-file)
		    ".example.el"))
	     (cons doom-module-packages-file
		   (file-name-with-extension
		    (doom-path template-dir doom-module-packages-file)
		    ".example.el"))))))))
   (doom-load (doom-path doom-user-dir doom-module-init-file) t)
   (doom-load (doom-path doom-user-dir "cli.el") t)
   (if (eq envfile? :no)
       (doom-print
	(doom-print--format
	 (doom-print--class 'warn
			    "Not generating envvars file, as requested")))
     (if (file-exists-p doom-env-file)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item
			      "Envvar file already exists, skipping")))
       (if
	   (or yes?
	       (y-or-n-p
		"Generate an envvar file? (see `doom help env` for details)"))
	   (progn (call! '(env))))))
   (if aot?
       (progn
	 (progn
	   (eval-after-load 'straight
	     #'(lambda nil (setq straight--native-comp-available t))))))
   (if (eq install? :no)
       (doom-print
	(doom-print--format
	 (doom-print--class 'warn
			    "Not installing plugins, as requested")))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Installing plugins")))
     (progn
       (let
	   ((doom-print-level (or nil doom-print-level))
	    (doom-print-indent
	     (+ (if t (or nil doom-print-indent-increment) 0)
		doom-print-indent)))
	 (doom-packages-ensure))))
   (if (doom-profiles-bootloadable-p)
       (progn
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start
			      "Initializing profile bootstrapper...")))
	 (call! '(profiles sync "--reload"))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Synchronizing default profile...")))
   (progn
     (let
	 ((doom-print-level (or nil doom-print-level))
	  (doom-print-indent
	   (+ (if t (or nil doom-print-indent-increment) 0)
	      doom-print-indent)))
       (doom-profile-generate)))
   (if (eq hooks? :no)
       (doom-print
	(doom-print--format
	 (doom-print--class 'warn
			    "Not deploying commit-msg and pre-push git hooks, as requested")))
     (doom-print
      (doom-print--format
       (doom-print--class 'start
			  "Deploying commit-msg and pre-push git hooks")))
     (progn
       (let
	   ((doom-print-level (or nil doom-print-level))
	    (doom-print-indent
	     (+ (if t (or nil doom-print-indent-increment) 0)
		doom-print-indent)))
	 (condition-case e
	     (call!
	      (cons 'ci (cons 'deploy-hooks (if yes? '("--force")))))
	   ('user-error
	    (doom-print
	     (doom-print--format (doom-print--class 'warn "%s")
				 (error-message-string e))))))))
   (if (file-exists-p "~/.emacs")
       (progn
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'warn
			      "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
   (doom-print
    (doom-print--format
     (doom-print--class 'success "Finished! Doom is ready to go!\n")))
   (let ((temp-buffer (generate-new-buffer " *temp*" t)))
     (save-current-buffer
       (set-buffer temp-buffer)
       (unwind-protect
	   (progn
	     (insert-file-contents
	      (doom-path doom-emacs-dir "static/QUICKSTART_INTRO"))
	     (doom-print (doom-print--format "%s" (buffer-string))))
	 (and (buffer-name temp-buffer) (kill-buffer temp-buffer))))))
 ((default-directory . "c:/Users/jiacs/AppData/Roaming/.emacs.d")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (alist
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))
  (aot?) (config? . :yes) (envfile? . :yes) (install? . :yes)
  (fonts? . :yes) (hooks? . :yes)
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (yes?)))

;;;; 20
((let
     ((aot? (cdr (assq 'aot? alist)))
      (config? (cdr (assq 'config? alist)))
      (envfile? (cdr (assq 'envfile? alist)))
      (install? (cdr (assq 'install? alist)))
      (fonts? (cdr (assq 'fonts? alist)))
      (hooks? (cdr (assq 'hooks? alist)))
      (context (cdr (assq 'context alist))))
   (doom-print
    (doom-print--format
     (doom-print--style 'green "Installing Doom Emacs!\n")))
   (let
       ((default-directory doom-emacs-dir)
	(yes?
	 (let* ((cl-x context))
	   (progn
	     (or
	      (let* ((cl-x cl-x))
		(progn
		  (and
		   (memq (type-of cl-x)
			 cl-struct-doom-cli-context-tags)
		   t)))
	      (signal 'wrong-type-argument
		      (list 'doom-cli-context cl-x)))
	     (aref cl-x 6)))))
     (if (eq config? :no)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'warn
			      "Not copying private config template, as requested")))
       (if
	   (and (not (file-directory-p doom-user-dir))
		(not (getenv "DOOMDIR")))
	   (progn
	     (let
		 ((xdg-config-dir
		   (or (getenv "XDG_CONFIG_HOME") "~/.config")))
	       (if (file-in-directory-p doom-emacs-dir xdg-config-dir)
		   (progn
		     (setq doom-user-dir
			   (expand-file-name "doom/" xdg-config-dir)))))))
       (if (file-directory-p doom-user-dir)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Skipping %s (already exists)")
	     (doom-print--class 'path doom-user-dir)))
	 (make-directory doom-user-dir 'parents)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'success "Created %s")
	   (doom-print--class 'path doom-user-dir))))
       (progn
	 (let
	     ((doom-print-level (or nil doom-print-level))
	      (doom-print-indent
	       (+ (if t (or nil doom-print-indent-increment) 0)
		  doom-print-indent)))
	   (mapc
	    #'(lambda (file)
		(let*
		    ((template file)
		     (filename
		      (if template
			  (car-safe
			   (prog1 template
			     (setq template (cdr template))))
			(signal 'wrong-number-of-arguments
				(list '(filename . template)
				      (length template))))))
		  (progn
		    (setq filename (doom-path doom-user-dir filename))
		    (if (file-exists-p filename)
			(doom-print
			 (doom-print--format
			  (doom-print--class 'item
					     "Skipping %s (already exists)...")
			  (doom-print--class 'path filename)))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'item "Creating %s...")
			(doom-print--class 'path filename)))
		      (let
			  ((temp-file filename)
			   (temp-buffer
			    (generate-new-buffer " *temp file*" t)))
			(unwind-protect
			    (prog1
				(save-current-buffer
				  (set-buffer temp-buffer)
				  (insert-file-contents template))
			      (save-current-buffer
				(set-buffer temp-buffer)
				(write-region nil nil temp-file nil 0)))
			  (and (buffer-name temp-buffer)
			       (kill-buffer temp-buffer))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'success "Done!")))))))
	    (let ((template-dir (doom-path doom-emacs-dir "static/")))
	      (list
	       (cons doom-module-init-file
		     (file-name-with-extension
		      (doom-path template-dir doom-module-init-file)
		      ".example.el"))
	       (cons doom-module-config-file
		     (file-name-with-extension
		      (doom-path template-dir doom-module-config-file)
		      ".example.el"))
	       (cons doom-module-packages-file
		     (file-name-with-extension
		      (doom-path template-dir
				 doom-module-packages-file)
		      ".example.el"))))))))
     (doom-load (doom-path doom-user-dir doom-module-init-file) t)
     (doom-load (doom-path doom-user-dir "cli.el") t)
     (if (eq envfile? :no)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'warn
			      "Not generating envvars file, as requested")))
       (if (file-exists-p doom-env-file)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item
				"Envvar file already exists, skipping")))
	 (if
	     (or yes?
		 (y-or-n-p
		  "Generate an envvar file? (see `doom help env` for details)"))
	     (progn (call! '(env))))))
     (if aot?
	 (progn
	   (progn
	     (eval-after-load 'straight
	       #'(lambda nil (setq straight--native-comp-available t))))))
     (if (eq install? :no)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'warn
			      "Not installing plugins, as requested")))
       (doom-print
	(doom-print--format
	 (doom-print--class 'start "Installing plugins")))
       (progn
	 (let
	     ((doom-print-level (or nil doom-print-level))
	      (doom-print-indent
	       (+ (if t (or nil doom-print-indent-increment) 0)
		  doom-print-indent)))
	   (doom-packages-ensure))))
     (if (doom-profiles-bootloadable-p)
	 (progn
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start
				"Initializing profile bootstrapper...")))
	   (call! '(profiles sync "--reload"))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Synchronizing default profile...")))
     (progn
       (let
	   ((doom-print-level (or nil doom-print-level))
	    (doom-print-indent
	     (+ (if t (or nil doom-print-indent-increment) 0)
		doom-print-indent)))
	 (doom-profile-generate)))
     (if (eq hooks? :no)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'warn
			      "Not deploying commit-msg and pre-push git hooks, as requested")))
       (doom-print
	(doom-print--format
	 (doom-print--class 'start
			    "Deploying commit-msg and pre-push git hooks")))
       (progn
	 (let
	     ((doom-print-level (or nil doom-print-level))
	      (doom-print-indent
	       (+ (if t (or nil doom-print-indent-increment) 0)
		  doom-print-indent)))
	   (condition-case e
	       (call!
		(cons 'ci (cons 'deploy-hooks (if yes? '("--force")))))
	     ('user-error
	      (doom-print
	       (doom-print--format (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
     (if (file-exists-p "~/.emacs")
	 (progn
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'warn
				"A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
     (doom-print
      (doom-print--format
       (doom-print--class 'success "Finished! Doom is ready to go!\n")))
     (let ((temp-buffer (generate-new-buffer " *temp*" t)))
       (save-current-buffer
	 (set-buffer temp-buffer)
	 (unwind-protect
	     (progn
	       (insert-file-contents
		(doom-path doom-emacs-dir "static/QUICKSTART_INTRO"))
	       (doom-print (doom-print--format "%s" (buffer-string))))
	   (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))))))
 ((cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (alist
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))
  (aot?) (config? . :yes) (envfile? . :yes) (install? . :yes)
  (fonts? . :yes) (hooks? . :yes)
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))))

;;;; 21
((#[(cli alist)
    ((let
	 ((aot? (cdr (assq 'aot? alist)))
	  (config? (cdr (assq 'config? alist)))
	  (envfile? (cdr (assq 'envfile? alist)))
	  (install? (cdr (assq 'install? alist)))
	  (fonts? (cdr (assq 'fonts? alist)))
	  (hooks? (cdr (assq 'hooks? alist)))
	  (context (cdr (assq 'context alist))))
       (doom-print
	(doom-print--format
	 (doom-print--style 'green "Installing Doom Emacs!\n")))
       (let
	   ((default-directory doom-emacs-dir)
	    (yes?
	     (let* ((cl-x context))
	       (progn
		 (or
		  (let* ((cl-x cl-x))
		    (progn
		      (and
		       (memq (type-of cl-x)
			     cl-struct-doom-cli-context-tags)
		       t)))
		  (signal 'wrong-type-argument
			  (list 'doom-cli-context cl-x)))
		 (aref cl-x 6)))))
	 (if (eq config? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not copying private config template, as requested")))
	   (if
	       (and (not (file-directory-p doom-user-dir))
		    (not (getenv "DOOMDIR")))
	       (progn
		 (let
		     ((xdg-config-dir
		       (or (getenv "XDG_CONFIG_HOME") "~/.config")))
		   (if
		       (file-in-directory-p doom-emacs-dir
					    xdg-config-dir)
		       (progn
			 (setq doom-user-dir
			       (expand-file-name "doom/"
						 xdg-config-dir)))))))
	   (if (file-directory-p doom-user-dir)
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item
				    "Skipping %s (already exists)")
		 (doom-print--class 'path doom-user-dir)))
	     (make-directory doom-user-dir 'parents)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'success "Created %s")
	       (doom-print--class 'path doom-user-dir))))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (mapc
		#'(lambda (file)
		    (let*
			((template file)
			 (filename
			  (if template
			      (car-safe
			       (prog1 template
				 (setq template (cdr template))))
			    (signal 'wrong-number-of-arguments
				    (list '(filename . template)
					  (length template))))))
		      (progn
			(setq filename
			      (doom-path doom-user-dir filename))
			(if (file-exists-p filename)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Skipping %s (already exists)...")
			      (doom-print--class 'path filename)))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'item "Creating %s...")
			    (doom-print--class 'path filename)))
			  (let
			      ((temp-file filename)
			       (temp-buffer
				(generate-new-buffer " *temp file*" t)))
			    (unwind-protect
				(prog1
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (insert-file-contents template))
				  (save-current-buffer
				    (set-buffer temp-buffer)
				    (write-region nil nil temp-file
						  nil 0)))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'success "Done!")))))))
		(let
		    ((template-dir
		      (doom-path doom-emacs-dir "static/")))
		  (list
		   (cons doom-module-init-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-init-file)
			  ".example.el"))
		   (cons doom-module-config-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-config-file)
			  ".example.el"))
		   (cons doom-module-packages-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-packages-file)
			  ".example.el"))))))))
	 (doom-load (doom-path doom-user-dir doom-module-init-file) t)
	 (doom-load (doom-path doom-user-dir "cli.el") t)
	 (if (eq envfile? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not generating envvars file, as requested")))
	   (if (file-exists-p doom-env-file)
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item
				    "Envvar file already exists, skipping")))
	     (if
		 (or yes?
		     (y-or-n-p
		      "Generate an envvar file? (see `doom help env` for details)"))
		 (progn (call! '(env))))))
	 (if aot?
	     (progn
	       (progn
		 (eval-after-load 'straight
		   #'(lambda nil
		       (setq straight--native-comp-available t))))))
	 (if (eq install? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not installing plugins, as requested")))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Installing plugins")))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (doom-packages-ensure))))
	 (if (doom-profiles-bootloadable-p)
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'start
				    "Initializing profile bootstrapper...")))
	       (call! '(profiles sync "--reload"))))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start
			      "Synchronizing default profile...")))
	 (progn
	   (let
	       ((doom-print-level (or nil doom-print-level))
		(doom-print-indent
		 (+ (if t (or nil doom-print-indent-increment) 0)
		    doom-print-indent)))
	     (doom-profile-generate)))
	 (if (eq hooks? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not deploying commit-msg and pre-push git hooks, as requested")))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start
				"Deploying commit-msg and pre-push git hooks")))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (condition-case e
		   (call!
		    (cons 'ci
			  (cons 'deploy-hooks (if yes? '("--force")))))
		 ('user-error
		  (doom-print
		   (doom-print--format (doom-print--class 'warn "%s")
				       (error-message-string e))))))))
	 (if (file-exists-p "~/.emacs")
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'warn
				    "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'success
			      "Finished! Doom is ready to go!\n")))
	 (let ((temp-buffer (generate-new-buffer " *temp*" t)))
	   (save-current-buffer
	     (set-buffer temp-buffer)
	     (unwind-protect
		 (progn
		   (insert-file-contents
		    (doom-path doom-emacs-dir
			       "static/QUICKSTART_INTRO"))
		   (doom-print
		    (doom-print--format "%s" (buffer-string))))
	       (and (buffer-name temp-buffer)
		    (kill-buffer temp-buffer))))))))
    (t)]
  #s(doom-cli ("doom" "install") nil
	      (("SUMMARY"
		. "Installs and sets up Doom Emacs for the first time.")
	       ("MAIN" . "")
	       ("This command does the following"
		. "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	      nil nil
	      (#s(doom-cli-option aot?
				  "Enable ahead-of-time native-compilation (if available)"
				  nil nil ("--aot") nil nil)
		 #s(doom-cli-option config?
				    "Create `$DOOMDIR' or dummy files therein?"
				    nil t ("--config") nil :yes)
		 #s(doom-cli-option envfile?
				    "(Re)generate an envvars file? (see `$ doom help env`)"
				    nil t ("--env") nil :yes)
		 #s(doom-cli-option install? "Auto-install packages?"
				    nil t ("--install") nil :yes)
		 #s(doom-cli-option fonts?
				    "Install (or prompt to install) nerd-icons fonts?"
				    nil t ("--fonts") nil :yes)
		 #s(doom-cli-option hooks?
				    "Deploy Doom's git hooks to itself?"
				    nil t ("--hooks") nil :yes))
	      ((&context context))
	      (:prefix (doom) :group "Config Management" :docs
		       "Commands for maintaining your Doom Emacs configuration."
		       :hide nil)
	      #[(cli alist)
		((let
		     ((aot? (cdr (assq 'aot? alist)))
		      (config? (cdr (assq 'config? alist)))
		      (envfile? (cdr (assq 'envfile? alist)))
		      (install? (cdr (assq 'install? alist)))
		      (fonts? (cdr (assq 'fonts? alist)))
		      (hooks? (cdr (assq 'hooks? alist)))
		      (context (cdr (assq 'context alist))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'green
					"Installing Doom Emacs!\n")))
		   (let
		       ((default-directory doom-emacs-dir)
			(yes?
			 (let* ((cl-x context))
			   (progn
			     (or
			      (let* ((cl-x cl-x))
				(progn
				  (and
				   (memq (type-of cl-x)
					 cl-struct-doom-cli-context-tags)
				   t)))
			      (signal 'wrong-type-argument
				      (list 'doom-cli-context cl-x)))
			     (aref cl-x 6)))))
		     (if (eq config? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not copying private config template, as requested")))
		       (if
			   (and (not (file-directory-p doom-user-dir))
				(not (getenv "DOOMDIR")))
			   (progn
			     (let
				 ((xdg-config-dir
				   (or (getenv "XDG_CONFIG_HOME")
				       "~/.config")))
			       (if
				   (file-in-directory-p doom-emacs-dir
							xdg-config-dir)
				   (progn
				     (setq doom-user-dir
					   (expand-file-name "doom/"
							     xdg-config-dir)))))))
		       (if (file-directory-p doom-user-dir)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Skipping %s (already exists)")
			     (doom-print--class 'path doom-user-dir)))
			 (make-directory doom-user-dir 'parents)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'success "Created %s")
			   (doom-print--class 'path doom-user-dir))))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (mapc
			    #'(lambda (file)
				(let*
				    ((template file)
				     (filename
				      (if template
					  (car-safe
					   (prog1 template
					     (setq template
						   (cdr template))))
					(signal
					 'wrong-number-of-arguments
					 (list '(filename . template)
					       (length template))))))
				  (progn
				    (setq filename
					  (doom-path doom-user-dir
						     filename))
				    (if (file-exists-p filename)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Skipping %s (already exists)...")
					  (doom-print--class 'path
							     filename)))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'item
							   "Creating %s...")
					(doom-print--class 'path
							   filename)))
				      (let
					  ((temp-file filename)
					   (temp-buffer
					    (generate-new-buffer
					     " *temp file*" t)))
					(unwind-protect
					    (prog1
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (insert-file-contents
						   template))
					      (save-current-buffer
						(set-buffer
						 temp-buffer)
						(write-region nil nil
							      temp-file
							      nil 0)))
					  (and
					   (buffer-name temp-buffer)
					   (kill-buffer temp-buffer))))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'success
							   "Done!")))))))
			    (let
				((template-dir
				  (doom-path doom-emacs-dir "static/")))
			      (list
			       (cons doom-module-init-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-init-file)
				      ".example.el"))
			       (cons doom-module-config-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-config-file)
				      ".example.el"))
			       (cons doom-module-packages-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-packages-file)
				      ".example.el"))))))))
		     (doom-load
		      (doom-path doom-user-dir doom-module-init-file)
		      t)
		     (doom-load (doom-path doom-user-dir "cli.el") t)
		     (if (eq envfile? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not generating envvars file, as requested")))
		       (if (file-exists-p doom-env-file)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Envvar file already exists, skipping")))
			 (if
			     (or yes?
				 (y-or-n-p
				  "Generate an envvar file? (see `doom help env` for details)"))
			     (progn (call! '(env))))))
		     (if aot?
			 (progn
			   (progn
			     (eval-after-load 'straight
			       #'(lambda nil
				   (setq
				    straight--native-comp-available t))))))
		     (if (eq install? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not installing plugins, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Installing plugins")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-packages-ensure))))
		     (if (doom-profiles-bootloadable-p)
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'start
						"Initializing profile bootstrapper...")))
			   (call! '(profiles sync "--reload"))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'start
					  "Synchronizing default profile...")))
		     (progn
		       (let
			   ((doom-print-level
			     (or nil doom-print-level))
			    (doom-print-indent
			     (+
			      (if t
				  (or nil doom-print-indent-increment)
				0)
			      doom-print-indent)))
			 (doom-profile-generate)))
		     (if (eq hooks? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not deploying commit-msg and pre-push git hooks, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Deploying commit-msg and pre-push git hooks")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (condition-case e
			       (call!
				(cons 'ci
				      (cons 'deploy-hooks
					    (if yes? '("--force")))))
			     ('user-error
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "%s")
				(error-message-string e))))))))
		     (if (file-exists-p "~/.emacs")
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'success
					  "Finished! Doom is ready to go!\n")))
		     (let
			 ((temp-buffer
			   (generate-new-buffer " *temp*" t)))
		       (save-current-buffer
			 (set-buffer temp-buffer)
			 (unwind-protect
			     (progn
			       (insert-file-contents
				(doom-path doom-emacs-dir
					   "static/QUICKSTART_INTRO"))
			       (doom-print
				(doom-print--format "%s"
						    (buffer-string))))
			   (and (buffer-name temp-buffer)
				(kill-buffer temp-buffer))))))))
		(t)])
  ((context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?)))
 ((cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (alist
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))))

;;;; 22
((funcall
  #[(cli alist)
    ((let
	 ((aot? (cdr (assq 'aot? alist)))
	  (config? (cdr (assq 'config? alist)))
	  (envfile? (cdr (assq 'envfile? alist)))
	  (install? (cdr (assq 'install? alist)))
	  (fonts? (cdr (assq 'fonts? alist)))
	  (hooks? (cdr (assq 'hooks? alist)))
	  (context (cdr (assq 'context alist))))
       (doom-print
	(doom-print--format
	 (doom-print--style 'green "Installing Doom Emacs!\n")))
       (let
	   ((default-directory doom-emacs-dir)
	    (yes?
	     (let* ((cl-x context))
	       (progn
		 (or
		  (let* ((cl-x cl-x))
		    (progn
		      (and
		       (memq (type-of cl-x)
			     cl-struct-doom-cli-context-tags)
		       t)))
		  (signal 'wrong-type-argument
			  (list 'doom-cli-context cl-x)))
		 (aref cl-x 6)))))
	 (if (eq config? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not copying private config template, as requested")))
	   (if
	       (and (not (file-directory-p doom-user-dir))
		    (not (getenv "DOOMDIR")))
	       (progn
		 (let
		     ((xdg-config-dir
		       (or (getenv "XDG_CONFIG_HOME") "~/.config")))
		   (if
		       (file-in-directory-p doom-emacs-dir
					    xdg-config-dir)
		       (progn
			 (setq doom-user-dir
			       (expand-file-name "doom/"
						 xdg-config-dir)))))))
	   (if (file-directory-p doom-user-dir)
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item
				    "Skipping %s (already exists)")
		 (doom-print--class 'path doom-user-dir)))
	     (make-directory doom-user-dir 'parents)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'success "Created %s")
	       (doom-print--class 'path doom-user-dir))))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (mapc
		#'(lambda (file)
		    (let*
			((template file)
			 (filename
			  (if template
			      (car-safe
			       (prog1 template
				 (setq template (cdr template))))
			    (signal 'wrong-number-of-arguments
				    (list '(filename . template)
					  (length template))))))
		      (progn
			(setq filename
			      (doom-path doom-user-dir filename))
			(if (file-exists-p filename)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Skipping %s (already exists)...")
			      (doom-print--class 'path filename)))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'item "Creating %s...")
			    (doom-print--class 'path filename)))
			  (let
			      ((temp-file filename)
			       (temp-buffer
				(generate-new-buffer " *temp file*" t)))
			    (unwind-protect
				(prog1
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (insert-file-contents template))
				  (save-current-buffer
				    (set-buffer temp-buffer)
				    (write-region nil nil temp-file
						  nil 0)))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'success "Done!")))))))
		(let
		    ((template-dir
		      (doom-path doom-emacs-dir "static/")))
		  (list
		   (cons doom-module-init-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-init-file)
			  ".example.el"))
		   (cons doom-module-config-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-config-file)
			  ".example.el"))
		   (cons doom-module-packages-file
			 (file-name-with-extension
			  (doom-path template-dir
				     doom-module-packages-file)
			  ".example.el"))))))))
	 (doom-load (doom-path doom-user-dir doom-module-init-file) t)
	 (doom-load (doom-path doom-user-dir "cli.el") t)
	 (if (eq envfile? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not generating envvars file, as requested")))
	   (if (file-exists-p doom-env-file)
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item
				    "Envvar file already exists, skipping")))
	     (if
		 (or yes?
		     (y-or-n-p
		      "Generate an envvar file? (see `doom help env` for details)"))
		 (progn (call! '(env))))))
	 (if aot?
	     (progn
	       (progn
		 (eval-after-load 'straight
		   #'(lambda nil
		       (setq straight--native-comp-available t))))))
	 (if (eq install? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not installing plugins, as requested")))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Installing plugins")))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (doom-packages-ensure))))
	 (if (doom-profiles-bootloadable-p)
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'start
				    "Initializing profile bootstrapper...")))
	       (call! '(profiles sync "--reload"))))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start
			      "Synchronizing default profile...")))
	 (progn
	   (let
	       ((doom-print-level (or nil doom-print-level))
		(doom-print-indent
		 (+ (if t (or nil doom-print-indent-increment) 0)
		    doom-print-indent)))
	     (doom-profile-generate)))
	 (if (eq hooks? :no)
	     (doom-print
	      (doom-print--format
	       (doom-print--class 'warn
				  "Not deploying commit-msg and pre-push git hooks, as requested")))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start
				"Deploying commit-msg and pre-push git hooks")))
	   (progn
	     (let
		 ((doom-print-level (or nil doom-print-level))
		  (doom-print-indent
		   (+ (if t (or nil doom-print-indent-increment) 0)
		      doom-print-indent)))
	       (condition-case e
		   (call!
		    (cons 'ci
			  (cons 'deploy-hooks (if yes? '("--force")))))
		 ('user-error
		  (doom-print
		   (doom-print--format (doom-print--class 'warn "%s")
				       (error-message-string e))))))))
	 (if (file-exists-p "~/.emacs")
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'warn
				    "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'success
			      "Finished! Doom is ready to go!\n")))
	 (let ((temp-buffer (generate-new-buffer " *temp*" t)))
	   (save-current-buffer
	     (set-buffer temp-buffer)
	     (unwind-protect
		 (progn
		   (insert-file-contents
		    (doom-path doom-emacs-dir
			       "static/QUICKSTART_INTRO"))
		   (doom-print
		    (doom-print--format "%s" (buffer-string))))
	       (and (buffer-name temp-buffer)
		    (kill-buffer temp-buffer))))))))
    (t)]
  #s(doom-cli ("doom" "install") nil
	      (("SUMMARY"
		. "Installs and sets up Doom Emacs for the first time.")
	       ("MAIN" . "")
	       ("This command does the following"
		. "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	      nil nil
	      (#s(doom-cli-option aot?
				  "Enable ahead-of-time native-compilation (if available)"
				  nil nil ("--aot") nil nil)
		 #s(doom-cli-option config?
				    "Create `$DOOMDIR' or dummy files therein?"
				    nil t ("--config") nil :yes)
		 #s(doom-cli-option envfile?
				    "(Re)generate an envvars file? (see `$ doom help env`)"
				    nil t ("--env") nil :yes)
		 #s(doom-cli-option install? "Auto-install packages?"
				    nil t ("--install") nil :yes)
		 #s(doom-cli-option fonts?
				    "Install (or prompt to install) nerd-icons fonts?"
				    nil t ("--fonts") nil :yes)
		 #s(doom-cli-option hooks?
				    "Deploy Doom's git hooks to itself?"
				    nil t ("--hooks") nil :yes))
	      ((&context context))
	      (:prefix (doom) :group "Config Management" :docs
		       "Commands for maintaining your Doom Emacs configuration."
		       :hide nil)
	      #[(cli alist)
		((let
		     ((aot? (cdr (assq 'aot? alist)))
		      (config? (cdr (assq 'config? alist)))
		      (envfile? (cdr (assq 'envfile? alist)))
		      (install? (cdr (assq 'install? alist)))
		      (fonts? (cdr (assq 'fonts? alist)))
		      (hooks? (cdr (assq 'hooks? alist)))
		      (context (cdr (assq 'context alist))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'green
					"Installing Doom Emacs!\n")))
		   (let
		       ((default-directory doom-emacs-dir)
			(yes?
			 (let* ((cl-x context))
			   (progn
			     (or
			      (let* ((cl-x cl-x))
				(progn
				  (and
				   (memq (type-of cl-x)
					 cl-struct-doom-cli-context-tags)
				   t)))
			      (signal 'wrong-type-argument
				      (list 'doom-cli-context cl-x)))
			     (aref cl-x 6)))))
		     (if (eq config? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not copying private config template, as requested")))
		       (if
			   (and (not (file-directory-p doom-user-dir))
				(not (getenv "DOOMDIR")))
			   (progn
			     (let
				 ((xdg-config-dir
				   (or (getenv "XDG_CONFIG_HOME")
				       "~/.config")))
			       (if
				   (file-in-directory-p doom-emacs-dir
							xdg-config-dir)
				   (progn
				     (setq doom-user-dir
					   (expand-file-name "doom/"
							     xdg-config-dir)))))))
		       (if (file-directory-p doom-user-dir)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Skipping %s (already exists)")
			     (doom-print--class 'path doom-user-dir)))
			 (make-directory doom-user-dir 'parents)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'success "Created %s")
			   (doom-print--class 'path doom-user-dir))))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (mapc
			    #'(lambda (file)
				(let*
				    ((template file)
				     (filename
				      (if template
					  (car-safe
					   (prog1 template
					     (setq template
						   (cdr template))))
					(signal
					 'wrong-number-of-arguments
					 (list '(filename . template)
					       (length template))))))
				  (progn
				    (setq filename
					  (doom-path doom-user-dir
						     filename))
				    (if (file-exists-p filename)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Skipping %s (already exists)...")
					  (doom-print--class 'path
							     filename)))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'item
							   "Creating %s...")
					(doom-print--class 'path
							   filename)))
				      (let
					  ((temp-file filename)
					   (temp-buffer
					    (generate-new-buffer
					     " *temp file*" t)))
					(unwind-protect
					    (prog1
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (insert-file-contents
						   template))
					      (save-current-buffer
						(set-buffer
						 temp-buffer)
						(write-region nil nil
							      temp-file
							      nil 0)))
					  (and
					   (buffer-name temp-buffer)
					   (kill-buffer temp-buffer))))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'success
							   "Done!")))))))
			    (let
				((template-dir
				  (doom-path doom-emacs-dir "static/")))
			      (list
			       (cons doom-module-init-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-init-file)
				      ".example.el"))
			       (cons doom-module-config-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-config-file)
				      ".example.el"))
			       (cons doom-module-packages-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-packages-file)
				      ".example.el"))))))))
		     (doom-load
		      (doom-path doom-user-dir doom-module-init-file)
		      t)
		     (doom-load (doom-path doom-user-dir "cli.el") t)
		     (if (eq envfile? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not generating envvars file, as requested")))
		       (if (file-exists-p doom-env-file)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Envvar file already exists, skipping")))
			 (if
			     (or yes?
				 (y-or-n-p
				  "Generate an envvar file? (see `doom help env` for details)"))
			     (progn (call! '(env))))))
		     (if aot?
			 (progn
			   (progn
			     (eval-after-load 'straight
			       #'(lambda nil
				   (setq
				    straight--native-comp-available t))))))
		     (if (eq install? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not installing plugins, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Installing plugins")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-packages-ensure))))
		     (if (doom-profiles-bootloadable-p)
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'start
						"Initializing profile bootstrapper...")))
			   (call! '(profiles sync "--reload"))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'start
					  "Synchronizing default profile...")))
		     (progn
		       (let
			   ((doom-print-level
			     (or nil doom-print-level))
			    (doom-print-indent
			     (+
			      (if t
				  (or nil doom-print-indent-increment)
				0)
			      doom-print-indent)))
			 (doom-profile-generate)))
		     (if (eq hooks? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not deploying commit-msg and pre-push git hooks, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Deploying commit-msg and pre-push git hooks")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (condition-case e
			       (call!
				(cons 'ci
				      (cons 'deploy-hooks
					    (if yes? '("--force")))))
			     ('user-error
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "%s")
				(error-message-string e))))))))
		     (if (file-exists-p "~/.emacs")
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'success
					  "Finished! Doom is ready to go!\n")))
		     (let
			 ((temp-buffer
			   (generate-new-buffer " *temp*" t)))
		       (save-current-buffer
			 (set-buffer temp-buffer)
			 (unwind-protect
			     (progn
			       (insert-file-contents
				(doom-path doom-emacs-dir
					   "static/QUICKSTART_INTRO"))
			       (doom-print
				(doom-print--format "%s"
						    (buffer-string))))
			   (and (buffer-name temp-buffer)
				(kill-buffer temp-buffer))))))))
		(t)])
  ((context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?)))
 nil)

;;;; 23
((doom-cli-execute
  #s(doom-cli ("doom" "install") nil
	      (("SUMMARY"
		. "Installs and sets up Doom Emacs for the first time.")
	       ("MAIN" . "")
	       ("This command does the following"
		. "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	      nil nil
	      (#s(doom-cli-option aot?
				  "Enable ahead-of-time native-compilation (if available)"
				  nil nil ("--aot") nil nil)
		 #s(doom-cli-option config?
				    "Create `$DOOMDIR' or dummy files therein?"
				    nil t ("--config") nil :yes)
		 #s(doom-cli-option envfile?
				    "(Re)generate an envvars file? (see `$ doom help env`)"
				    nil t ("--env") nil :yes)
		 #s(doom-cli-option install? "Auto-install packages?"
				    nil t ("--install") nil :yes)
		 #s(doom-cli-option fonts?
				    "Install (or prompt to install) nerd-icons fonts?"
				    nil t ("--fonts") nil :yes)
		 #s(doom-cli-option hooks?
				    "Deploy Doom's git hooks to itself?"
				    nil t ("--hooks") nil :yes))
	      ((&context context))
	      (:prefix (doom) :group "Config Management" :docs
		       "Commands for maintaining your Doom Emacs configuration."
		       :hide nil)
	      #[(cli alist)
		((let
		     ((aot? (cdr (assq 'aot? alist)))
		      (config? (cdr (assq 'config? alist)))
		      (envfile? (cdr (assq 'envfile? alist)))
		      (install? (cdr (assq 'install? alist)))
		      (fonts? (cdr (assq 'fonts? alist)))
		      (hooks? (cdr (assq 'hooks? alist)))
		      (context (cdr (assq 'context alist))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'green
					"Installing Doom Emacs!\n")))
		   (let
		       ((default-directory doom-emacs-dir)
			(yes?
			 (let* ((cl-x context))
			   (progn
			     (or
			      (let* ((cl-x cl-x))
				(progn
				  (and
				   (memq (type-of cl-x)
					 cl-struct-doom-cli-context-tags)
				   t)))
			      (signal 'wrong-type-argument
				      (list 'doom-cli-context cl-x)))
			     (aref cl-x 6)))))
		     (if (eq config? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not copying private config template, as requested")))
		       (if
			   (and (not (file-directory-p doom-user-dir))
				(not (getenv "DOOMDIR")))
			   (progn
			     (let
				 ((xdg-config-dir
				   (or (getenv "XDG_CONFIG_HOME")
				       "~/.config")))
			       (if
				   (file-in-directory-p doom-emacs-dir
							xdg-config-dir)
				   (progn
				     (setq doom-user-dir
					   (expand-file-name "doom/"
							     xdg-config-dir)))))))
		       (if (file-directory-p doom-user-dir)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Skipping %s (already exists)")
			     (doom-print--class 'path doom-user-dir)))
			 (make-directory doom-user-dir 'parents)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'success "Created %s")
			   (doom-print--class 'path doom-user-dir))))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (mapc
			    #'(lambda (file)
				(let*
				    ((template file)
				     (filename
				      (if template
					  (car-safe
					   (prog1 template
					     (setq template
						   (cdr template))))
					(signal
					 'wrong-number-of-arguments
					 (list '(filename . template)
					       (length template))))))
				  (progn
				    (setq filename
					  (doom-path doom-user-dir
						     filename))
				    (if (file-exists-p filename)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Skipping %s (already exists)...")
					  (doom-print--class 'path
							     filename)))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'item
							   "Creating %s...")
					(doom-print--class 'path
							   filename)))
				      (let
					  ((temp-file filename)
					   (temp-buffer
					    (generate-new-buffer
					     " *temp file*" t)))
					(unwind-protect
					    (prog1
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (insert-file-contents
						   template))
					      (save-current-buffer
						(set-buffer
						 temp-buffer)
						(write-region nil nil
							      temp-file
							      nil 0)))
					  (and
					   (buffer-name temp-buffer)
					   (kill-buffer temp-buffer))))
				      (doom-print
				       (doom-print--format
					(doom-print--class 'success
							   "Done!")))))))
			    (let
				((template-dir
				  (doom-path doom-emacs-dir "static/")))
			      (list
			       (cons doom-module-init-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-init-file)
				      ".example.el"))
			       (cons doom-module-config-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-config-file)
				      ".example.el"))
			       (cons doom-module-packages-file
				     (file-name-with-extension
				      (doom-path template-dir
						 doom-module-packages-file)
				      ".example.el"))))))))
		     (doom-load
		      (doom-path doom-user-dir doom-module-init-file)
		      t)
		     (doom-load (doom-path doom-user-dir "cli.el") t)
		     (if (eq envfile? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not generating envvars file, as requested")))
		       (if (file-exists-p doom-env-file)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'item
						"Envvar file already exists, skipping")))
			 (if
			     (or yes?
				 (y-or-n-p
				  "Generate an envvar file? (see `doom help env` for details)"))
			     (progn (call! '(env))))))
		     (if aot?
			 (progn
			   (progn
			     (eval-after-load 'straight
			       #'(lambda nil
				   (setq
				    straight--native-comp-available t))))))
		     (if (eq install? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not installing plugins, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Installing plugins")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-packages-ensure))))
		     (if (doom-profiles-bootloadable-p)
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'start
						"Initializing profile bootstrapper...")))
			   (call! '(profiles sync "--reload"))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'start
					  "Synchronizing default profile...")))
		     (progn
		       (let
			   ((doom-print-level
			     (or nil doom-print-level))
			    (doom-print-indent
			     (+
			      (if t
				  (or nil doom-print-indent-increment)
				0)
			      doom-print-indent)))
			 (doom-profile-generate)))
		     (if (eq hooks? :no)
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn
					      "Not deploying commit-msg and pre-push git hooks, as requested")))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Deploying commit-msg and pre-push git hooks")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (condition-case e
			       (call!
				(cons 'ci
				      (cons 'deploy-hooks
					    (if yes? '("--force")))))
			     ('user-error
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "%s")
				(error-message-string e))))))))
		     (if (file-exists-p "~/.emacs")
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'success
					  "Finished! Doom is ready to go!\n")))
		     (let
			 ((temp-buffer
			   (generate-new-buffer " *temp*" t)))
		       (save-current-buffer
			 (set-buffer temp-buffer)
			 (unwind-protect
			     (progn
			       (insert-file-contents
				(doom-path doom-emacs-dir
					   "static/QUICKSTART_INTRO"))
			       (doom-print
				(doom-print--format "%s"
						    (buffer-string))))
			   (and (buffer-name temp-buffer)
				(kill-buffer temp-buffer))))))))
		(t)])
  ((context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?)))
 ((cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (bindings
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))))

;;;; 24
((let ((cli x27) (bindings x28)) (doom-cli-execute cli bindings))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom") (seen t)
  (runners
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (tail
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (x26
   #s(doom-cli ("doom" "install") nil
	       (("SUMMARY"
		 . "Installs and sets up Doom Emacs for the first time.")
		("MAIN" . "")
		("This command does the following"
		 . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	       nil nil
	       (#s(doom-cli-option aot?
				   "Enable ahead-of-time native-compilation (if available)"
				   nil nil ("--aot") nil nil)
		  #s(doom-cli-option config?
				     "Create `$DOOMDIR' or dummy files therein?"
				     nil t ("--config") nil :yes)
		  #s(doom-cli-option envfile?
				     "(Re)generate an envvars file? (see `$ doom help env`)"
				     nil t ("--env") nil :yes)
		  #s(doom-cli-option install? "Auto-install packages?"
				     nil t ("--install") nil :yes)
		  #s(doom-cli-option fonts?
				     "Install (or prompt to install) nerd-icons fonts?"
				     nil t ("--fonts") nil :yes)
		  #s(doom-cli-option hooks?
				     "Deploy Doom's git hooks to itself?"
				     nil t ("--hooks") nil :yes))
	       ((&context context))
	       (:prefix (doom) :group "Config Management" :docs
			"Commands for maintaining your Doom Emacs configuration."
			:hide nil)
	       #[(cli alist)
		 ((let
		      ((aot? (cdr (assq 'aot? alist)))
		       (config? (cdr (assq 'config? alist)))
		       (envfile? (cdr (assq 'envfile? alist)))
		       (install? (cdr (assq 'install? alist)))
		       (fonts? (cdr (assq 'fonts? alist)))
		       (hooks? (cdr (assq 'hooks? alist)))
		       (context (cdr (assq 'context alist))))
		    (doom-print
		     (doom-print--format
		      (doom-print--style 'green
					 "Installing Doom Emacs!\n")))
		    (let
			((default-directory doom-emacs-dir)
			 (yes?
			  (let* ((cl-x context))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-context-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context cl-x)))
			      (aref cl-x 6)))))
		      (if (eq config? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not copying private config template, as requested")))
			(if
			    (and
			     (not (file-directory-p doom-user-dir))
			     (not (getenv "DOOMDIR")))
			    (progn
			      (let
				  ((xdg-config-dir
				    (or (getenv "XDG_CONFIG_HOME")
					"~/.config")))
				(if
				    (file-in-directory-p
				     doom-emacs-dir xdg-config-dir)
				    (progn
				      (setq doom-user-dir
					    (expand-file-name "doom/"
							      xdg-config-dir)))))))
			(if (file-directory-p doom-user-dir)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Skipping %s (already exists)")
			      (doom-print--class 'path doom-user-dir)))
			  (make-directory doom-user-dir 'parents)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'success "Created %s")
			    (doom-print--class 'path doom-user-dir))))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (mapc
			     #'(lambda (file)
				 (let*
				     ((template file)
				      (filename
				       (if template
					   (car-safe
					    (prog1 template
					      (setq template
						    (cdr template))))
					 (signal
					  'wrong-number-of-arguments
					  (list '(filename . template)
						(length template))))))
				   (progn
				     (setq filename
					   (doom-path doom-user-dir
						      filename))
				     (if (file-exists-p filename)
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Skipping %s (already exists)...")
					   (doom-print--class 'path
							      filename)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item
							    "Creating %s...")
					 (doom-print--class 'path
							    filename)))
				       (let
					   ((temp-file filename)
					    (temp-buffer
					     (generate-new-buffer
					      " *temp file*" t)))
					 (unwind-protect
					     (prog1
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (insert-file-contents
						    template))
					       (save-current-buffer
						 (set-buffer
						  temp-buffer)
						 (write-region nil nil
							       temp-file
							       nil 0)))
					   (and
					    (buffer-name temp-buffer)
					    (kill-buffer temp-buffer))))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'success
							    "Done!")))))))
			     (let
				 ((template-dir
				   (doom-path doom-emacs-dir "static/")))
			       (list
				(cons doom-module-init-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-init-file)
				       ".example.el"))
				(cons doom-module-config-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-config-file)
				       ".example.el"))
				(cons doom-module-packages-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-packages-file)
				       ".example.el"))))))))
		      (doom-load
		       (doom-path doom-user-dir doom-module-init-file)
		       t)
		      (doom-load (doom-path doom-user-dir "cli.el") t)
		      (if (eq envfile? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not generating envvars file, as requested")))
			(if (file-exists-p doom-env-file)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Envvar file already exists, skipping")))
			  (if
			      (or yes?
				  (y-or-n-p
				   "Generate an envvar file? (see `doom help env` for details)"))
			      (progn (call! '(env))))))
		      (if aot?
			  (progn
			    (progn
			      (eval-after-load 'straight
				#'(lambda nil
				    (setq
				     straight--native-comp-available t))))))
		      (if (eq install? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not installing plugins, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Installing plugins")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-packages-ensure))))
		      (if (doom-profiles-bootloadable-p)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'start
						 "Initializing profile bootstrapper...")))
			    (call! '(profiles sync "--reload"))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'start
					   "Synchronizing default profile...")))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (doom-profile-generate)))
		      (if (eq hooks? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not deploying commit-msg and pre-push git hooks, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Deploying commit-msg and pre-push git hooks")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (condition-case e
				(call!
				 (cons 'ci
				       (cons 'deploy-hooks
					     (if yes? '("--force")))))
			      ('user-error
			       (doom-print
				(doom-print--format
				 (doom-print--class 'warn "%s")
				 (error-message-string e))))))))
		      (if (file-exists-p "~/.emacs")
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'success
					   "Finished! Doom is ready to go!\n")))
		      (let
			  ((temp-buffer
			    (generate-new-buffer " *temp*" t)))
			(save-current-buffer
			  (set-buffer temp-buffer)
			  (unwind-protect
			      (progn
				(insert-file-contents
				 (doom-path doom-emacs-dir
					    "static/QUICKSTART_INTRO"))
				(doom-print
				 (doom-print--format "%s"
						     (buffer-string))))
			    (and (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))))
		 (t)])
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))
  (x27
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (x28
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (bindings
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))))

;;;; 25
((let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
   (let ((cli x27) (bindings x28)) (doom-cli-execute cli bindings)))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom") (seen t)
  (runners
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (tail
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (x26
   #s(doom-cli ("doom" "install") nil
	       (("SUMMARY"
		 . "Installs and sets up Doom Emacs for the first time.")
		("MAIN" . "")
		("This command does the following"
		 . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	       nil nil
	       (#s(doom-cli-option aot?
				   "Enable ahead-of-time native-compilation (if available)"
				   nil nil ("--aot") nil nil)
		  #s(doom-cli-option config?
				     "Create `$DOOMDIR' or dummy files therein?"
				     nil t ("--config") nil :yes)
		  #s(doom-cli-option envfile?
				     "(Re)generate an envvars file? (see `$ doom help env`)"
				     nil t ("--env") nil :yes)
		  #s(doom-cli-option install? "Auto-install packages?"
				     nil t ("--install") nil :yes)
		  #s(doom-cli-option fonts?
				     "Install (or prompt to install) nerd-icons fonts?"
				     nil t ("--fonts") nil :yes)
		  #s(doom-cli-option hooks?
				     "Deploy Doom's git hooks to itself?"
				     nil t ("--hooks") nil :yes))
	       ((&context context))
	       (:prefix (doom) :group "Config Management" :docs
			"Commands for maintaining your Doom Emacs configuration."
			:hide nil)
	       #[(cli alist)
		 ((let
		      ((aot? (cdr (assq 'aot? alist)))
		       (config? (cdr (assq 'config? alist)))
		       (envfile? (cdr (assq 'envfile? alist)))
		       (install? (cdr (assq 'install? alist)))
		       (fonts? (cdr (assq 'fonts? alist)))
		       (hooks? (cdr (assq 'hooks? alist)))
		       (context (cdr (assq 'context alist))))
		    (doom-print
		     (doom-print--format
		      (doom-print--style 'green
					 "Installing Doom Emacs!\n")))
		    (let
			((default-directory doom-emacs-dir)
			 (yes?
			  (let* ((cl-x context))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-context-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context cl-x)))
			      (aref cl-x 6)))))
		      (if (eq config? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not copying private config template, as requested")))
			(if
			    (and
			     (not (file-directory-p doom-user-dir))
			     (not (getenv "DOOMDIR")))
			    (progn
			      (let
				  ((xdg-config-dir
				    (or (getenv "XDG_CONFIG_HOME")
					"~/.config")))
				(if
				    (file-in-directory-p
				     doom-emacs-dir xdg-config-dir)
				    (progn
				      (setq doom-user-dir
					    (expand-file-name "doom/"
							      xdg-config-dir)))))))
			(if (file-directory-p doom-user-dir)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Skipping %s (already exists)")
			      (doom-print--class 'path doom-user-dir)))
			  (make-directory doom-user-dir 'parents)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'success "Created %s")
			    (doom-print--class 'path doom-user-dir))))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (mapc
			     #'(lambda (file)
				 (let*
				     ((template file)
				      (filename
				       (if template
					   (car-safe
					    (prog1 template
					      (setq template
						    (cdr template))))
					 (signal
					  'wrong-number-of-arguments
					  (list '(filename . template)
						(length template))))))
				   (progn
				     (setq filename
					   (doom-path doom-user-dir
						      filename))
				     (if (file-exists-p filename)
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Skipping %s (already exists)...")
					   (doom-print--class 'path
							      filename)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item
							    "Creating %s...")
					 (doom-print--class 'path
							    filename)))
				       (let
					   ((temp-file filename)
					    (temp-buffer
					     (generate-new-buffer
					      " *temp file*" t)))
					 (unwind-protect
					     (prog1
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (insert-file-contents
						    template))
					       (save-current-buffer
						 (set-buffer
						  temp-buffer)
						 (write-region nil nil
							       temp-file
							       nil 0)))
					   (and
					    (buffer-name temp-buffer)
					    (kill-buffer temp-buffer))))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'success
							    "Done!")))))))
			     (let
				 ((template-dir
				   (doom-path doom-emacs-dir "static/")))
			       (list
				(cons doom-module-init-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-init-file)
				       ".example.el"))
				(cons doom-module-config-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-config-file)
				       ".example.el"))
				(cons doom-module-packages-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-packages-file)
				       ".example.el"))))))))
		      (doom-load
		       (doom-path doom-user-dir doom-module-init-file)
		       t)
		      (doom-load (doom-path doom-user-dir "cli.el") t)
		      (if (eq envfile? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not generating envvars file, as requested")))
			(if (file-exists-p doom-env-file)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Envvar file already exists, skipping")))
			  (if
			      (or yes?
				  (y-or-n-p
				   "Generate an envvar file? (see `doom help env` for details)"))
			      (progn (call! '(env))))))
		      (if aot?
			  (progn
			    (progn
			      (eval-after-load 'straight
				#'(lambda nil
				    (setq
				     straight--native-comp-available t))))))
		      (if (eq install? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not installing plugins, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Installing plugins")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-packages-ensure))))
		      (if (doom-profiles-bootloadable-p)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'start
						 "Initializing profile bootstrapper...")))
			    (call! '(profiles sync "--reload"))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'start
					   "Synchronizing default profile...")))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (doom-profile-generate)))
		      (if (eq hooks? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not deploying commit-msg and pre-push git hooks, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Deploying commit-msg and pre-push git hooks")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (condition-case e
				(call!
				 (cons 'ci
				       (cons 'deploy-hooks
					     (if yes? '("--force")))))
			      ('user-error
			       (doom-print
				(doom-print--format
				 (doom-print--class 'warn "%s")
				 (error-message-string e))))))))
		      (if (file-exists-p "~/.emacs")
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'success
					   "Finished! Doom is ready to go!\n")))
		      (let
			  ((temp-buffer
			    (generate-new-buffer " *temp*" t)))
			(save-current-buffer
			  (set-buffer temp-buffer)
			  (unwind-protect
			      (progn
				(insert-file-contents
				 (doom-path doom-emacs-dir
					    "static/QUICKSTART_INTRO"))
				(doom-print
				 (doom-print--format "%s"
						     (buffer-string))))
			    (and (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))))
		 (t)])
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))
  (x27
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (x28
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))))

;;;; 26
((progn
   (ignore (consp x26))
   (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
     (let ((cli x27) (bindings x28)) (doom-cli-execute cli bindings))))
 nil)

;;;; 27
((let ((x26 (car tail)))
   (progn
     (ignore (consp x26))
     (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
       (let ((cli x27) (bindings x28))
	 (doom-cli-execute cli bindings))))
   (setq tail (cdr tail)))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom") (seen t)
  (runners
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (tail
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (x26
   #s(doom-cli ("doom" "install") nil
	       (("SUMMARY"
		 . "Installs and sets up Doom Emacs for the first time.")
		("MAIN" . "")
		("This command does the following"
		 . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
	       nil nil
	       (#s(doom-cli-option aot?
				   "Enable ahead-of-time native-compilation (if available)"
				   nil nil ("--aot") nil nil)
		  #s(doom-cli-option config?
				     "Create `$DOOMDIR' or dummy files therein?"
				     nil t ("--config") nil :yes)
		  #s(doom-cli-option envfile?
				     "(Re)generate an envvars file? (see `$ doom help env`)"
				     nil t ("--env") nil :yes)
		  #s(doom-cli-option install? "Auto-install packages?"
				     nil t ("--install") nil :yes)
		  #s(doom-cli-option fonts?
				     "Install (or prompt to install) nerd-icons fonts?"
				     nil t ("--fonts") nil :yes)
		  #s(doom-cli-option hooks?
				     "Deploy Doom's git hooks to itself?"
				     nil t ("--hooks") nil :yes))
	       ((&context context))
	       (:prefix (doom) :group "Config Management" :docs
			"Commands for maintaining your Doom Emacs configuration."
			:hide nil)
	       #[(cli alist)
		 ((let
		      ((aot? (cdr (assq 'aot? alist)))
		       (config? (cdr (assq 'config? alist)))
		       (envfile? (cdr (assq 'envfile? alist)))
		       (install? (cdr (assq 'install? alist)))
		       (fonts? (cdr (assq 'fonts? alist)))
		       (hooks? (cdr (assq 'hooks? alist)))
		       (context (cdr (assq 'context alist))))
		    (doom-print
		     (doom-print--format
		      (doom-print--style 'green
					 "Installing Doom Emacs!\n")))
		    (let
			((default-directory doom-emacs-dir)
			 (yes?
			  (let* ((cl-x context))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-context-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context cl-x)))
			      (aref cl-x 6)))))
		      (if (eq config? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not copying private config template, as requested")))
			(if
			    (and
			     (not (file-directory-p doom-user-dir))
			     (not (getenv "DOOMDIR")))
			    (progn
			      (let
				  ((xdg-config-dir
				    (or (getenv "XDG_CONFIG_HOME")
					"~/.config")))
				(if
				    (file-in-directory-p
				     doom-emacs-dir xdg-config-dir)
				    (progn
				      (setq doom-user-dir
					    (expand-file-name "doom/"
							      xdg-config-dir)))))))
			(if (file-directory-p doom-user-dir)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Skipping %s (already exists)")
			      (doom-print--class 'path doom-user-dir)))
			  (make-directory doom-user-dir 'parents)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'success "Created %s")
			    (doom-print--class 'path doom-user-dir))))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (mapc
			     #'(lambda (file)
				 (let*
				     ((template file)
				      (filename
				       (if template
					   (car-safe
					    (prog1 template
					      (setq template
						    (cdr template))))
					 (signal
					  'wrong-number-of-arguments
					  (list '(filename . template)
						(length template))))))
				   (progn
				     (setq filename
					   (doom-path doom-user-dir
						      filename))
				     (if (file-exists-p filename)
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Skipping %s (already exists)...")
					   (doom-print--class 'path
							      filename)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item
							    "Creating %s...")
					 (doom-print--class 'path
							    filename)))
				       (let
					   ((temp-file filename)
					    (temp-buffer
					     (generate-new-buffer
					      " *temp file*" t)))
					 (unwind-protect
					     (prog1
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (insert-file-contents
						    template))
					       (save-current-buffer
						 (set-buffer
						  temp-buffer)
						 (write-region nil nil
							       temp-file
							       nil 0)))
					   (and
					    (buffer-name temp-buffer)
					    (kill-buffer temp-buffer))))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'success
							    "Done!")))))))
			     (let
				 ((template-dir
				   (doom-path doom-emacs-dir "static/")))
			       (list
				(cons doom-module-init-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-init-file)
				       ".example.el"))
				(cons doom-module-config-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-config-file)
				       ".example.el"))
				(cons doom-module-packages-file
				      (file-name-with-extension
				       (doom-path template-dir
						  doom-module-packages-file)
				       ".example.el"))))))))
		      (doom-load
		       (doom-path doom-user-dir doom-module-init-file)
		       t)
		      (doom-load (doom-path doom-user-dir "cli.el") t)
		      (if (eq envfile? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not generating envvars file, as requested")))
			(if (file-exists-p doom-env-file)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item
						 "Envvar file already exists, skipping")))
			  (if
			      (or yes?
				  (y-or-n-p
				   "Generate an envvar file? (see `doom help env` for details)"))
			      (progn (call! '(env))))))
		      (if aot?
			  (progn
			    (progn
			      (eval-after-load 'straight
				#'(lambda nil
				    (setq
				     straight--native-comp-available t))))))
		      (if (eq install? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not installing plugins, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Installing plugins")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-packages-ensure))))
		      (if (doom-profiles-bootloadable-p)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'start
						 "Initializing profile bootstrapper...")))
			    (call! '(profiles sync "--reload"))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'start
					   "Synchronizing default profile...")))
		      (progn
			(let
			    ((doom-print-level
			      (or nil doom-print-level))
			     (doom-print-indent
			      (+
			       (if t
				   (or nil doom-print-indent-increment)
				 0)
			       doom-print-indent)))
			  (doom-profile-generate)))
		      (if (eq hooks? :no)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'warn
					       "Not deploying commit-msg and pre-push git hooks, as requested")))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Deploying commit-msg and pre-push git hooks")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (condition-case e
				(call!
				 (cons 'ci
				       (cons 'deploy-hooks
					     (if yes? '("--force")))))
			      ('user-error
			       (doom-print
				(doom-print--format
				 (doom-print--class 'warn "%s")
				 (error-message-string e))))))))
		      (if (file-exists-p "~/.emacs")
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		      (doom-print
		       (doom-print--format
			(doom-print--class 'success
					   "Finished! Doom is ready to go!\n")))
		      (let
			  ((temp-buffer
			    (generate-new-buffer " *temp*" t)))
			(save-current-buffer
			  (set-buffer temp-buffer)
			  (unwind-protect
			      (progn
				(insert-file-contents
				 (doom-path doom-emacs-dir
					    "static/QUICKSTART_INTRO"))
				(doom-print
				 (doom-print--format "%s"
						     (buffer-string))))
			    (and (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))))
		 (t)])
   (context
    . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			  nil nil "doom" nil nil ("doom" "env") nil
			  ("--no-color" "install")
			  (("--deny") ("-d") ("--allow") ("-a") ("-o")
			   ("--deny-all") ("--allow-all") ("--hooks")
			   ("--fonts") ("--install") ("--env")
			   ("--config") ("--aot") ("--eval") ("-E")
			   ("--strict-load") ("--load") ("-L")
			   ("--color" . :no) ("--benchmark")
			   ("--profile") ("--pager") ("--emacsdir")
			   ("--doomdir") ("--verbose") ("-v")
			   ("--debug") ("-D") ("--force") ("-!"))
			  ((t) (("doom" "env")) (("doom") "env"))
			  #<buffer  *doom-cli stdin*> #<buffer
			  *doom-cli stdout*> #<buffer  *doom-cli
			  stderr*> nil))
   (hooks? . :yes) (fonts? . :yes) (install? . :yes) (envfile? . :yes)
   (config? . :yes) (aot?))))

;;;; 28
((while tail
   (let ((x26 (car tail)))
     (progn
       (ignore (consp x26))
       (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
	 (let ((cli x27) (bindings x28))
	   (doom-cli-execute cli bindings))))
     (setq tail (cdr tail))))
 nil)

;;;; 29
((let ((tail (nreverse runners)))
   (while tail
     (let ((x26 (car tail)))
       (progn
	 (ignore (consp x26))
	 (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
	   (let ((cli x27) (bindings x28))
	     (doom-cli-execute cli bindings))))
       (setq tail (cdr tail)))))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom") (seen t)
  (runners
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))
  (tail
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))))

;;;; 30
((let ((seen '(t)) runners)
   (let
       ((tail
	 (doom-cli-find command
			(let* ((cl-x cli))
			  (progn
			    (or
			     (let* ((cl-x cl-x))
			       (progn
				 (and
				  (memq (type-of cl-x)
					cl-struct-doom-cli-tags)
				  t)))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cl-x)))
			    (aref cl-x 2))))))
     (while tail
       (let ((cli (car tail)))
	 (setq runners
	       (cons
		(cons (doom-cli-get cli)
		      (doom-cli--bindings cli context seen))
		runners))
	 (setq tail (cdr tail)))))
   (let ((tail (nreverse runners)))
     (while tail
       (let ((x26 (car tail)))
	 (progn
	   (ignore (consp x26))
	   (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
	     (let ((cli x27) (bindings x28))
	       (doom-cli-execute cli bindings))))
	 (setq tail (cdr tail)))))
   context)
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom") (seen t)
  (runners
   (#s(doom-cli ("doom" "install") nil
		(("SUMMARY"
		  . "Installs and sets up Doom Emacs for the first time.")
		 ("MAIN" . "")
		 ("This command does the following"
		  . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		nil nil
		(#s(doom-cli-option aot?
				    "Enable ahead-of-time native-compilation (if available)"
				    nil nil ("--aot") nil nil)
		   #s(doom-cli-option config?
				      "Create `$DOOMDIR' or dummy files therein?"
				      nil t ("--config") nil :yes)
		   #s(doom-cli-option envfile?
				      "(Re)generate an envvars file? (see `$ doom help env`)"
				      nil t ("--env") nil :yes)
		   #s(doom-cli-option install?
				      "Auto-install packages?" nil t
				      ("--install") nil :yes)
		   #s(doom-cli-option fonts?
				      "Install (or prompt to install) nerd-icons fonts?"
				      nil t ("--fonts") nil :yes)
		   #s(doom-cli-option hooks?
				      "Deploy Doom's git hooks to itself?"
				      nil t ("--hooks") nil :yes))
		((&context context))
		(:prefix (doom) :group "Config Management" :docs
			 "Commands for maintaining your Doom Emacs configuration."
			 :hide nil)
		#[(cli alist)
		  ((let
		       ((aot? (cdr (assq 'aot? alist)))
			(config? (cdr (assq 'config? alist)))
			(envfile? (cdr (assq 'envfile? alist)))
			(install? (cdr (assq 'install? alist)))
			(fonts? (cdr (assq 'fonts? alist)))
			(hooks? (cdr (assq 'hooks? alist)))
			(context (cdr (assq 'context alist))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'green
					  "Installing Doom Emacs!\n")))
		     (let
			 ((default-directory doom-emacs-dir)
			  (yes?
			   (let* ((cl-x context))
			     (progn
			       (or
				(let* ((cl-x cl-x))
				  (progn
				    (and
				     (memq (type-of cl-x)
					   cl-struct-doom-cli-context-tags)
				     t)))
				(signal 'wrong-type-argument
					(list 'doom-cli-context cl-x)))
			       (aref cl-x 6)))))
		       (if (eq config? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not copying private config template, as requested")))
			 (if
			     (and
			      (not (file-directory-p doom-user-dir))
			      (not (getenv "DOOMDIR")))
			     (progn
			       (let
				   ((xdg-config-dir
				     (or (getenv "XDG_CONFIG_HOME")
					 "~/.config")))
				 (if
				     (file-in-directory-p
				      doom-emacs-dir xdg-config-dir)
				     (progn
				       (setq doom-user-dir
					     (expand-file-name "doom/"
							       xdg-config-dir)))))))
			 (if (file-directory-p doom-user-dir)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Skipping %s (already exists)")
			       (doom-print--class 'path doom-user-dir)))
			   (make-directory doom-user-dir 'parents)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'success "Created %s")
			     (doom-print--class 'path doom-user-dir))))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (mapc
			      #'(lambda (file)
				  (let*
				      ((template file)
				       (filename
					(if template
					    (car-safe
					     (prog1 template
					       (setq template
						     (cdr template))))
					  (signal
					   'wrong-number-of-arguments
					   (list
					    '(filename . template)
					    (length template))))))
				    (progn
				      (setq filename
					    (doom-path doom-user-dir
						       filename))
				      (if (file-exists-p filename)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'item
							       "Skipping %s (already exists)...")
					    (doom-print--class 'path
							       filename)))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item
							     "Creating %s...")
					  (doom-print--class 'path
							     filename)))
					(let
					    ((temp-file filename)
					     (temp-buffer
					      (generate-new-buffer
					       " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer
						     temp-buffer)
						    (insert-file-contents
						     template))
						(save-current-buffer
						  (set-buffer
						   temp-buffer)
						  (write-region nil
								nil
								temp-file
								nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))
					(doom-print
					 (doom-print--format
					  (doom-print--class 'success
							     "Done!")))))))
			      (let
				  ((template-dir
				    (doom-path doom-emacs-dir
					       "static/")))
				(list
				 (cons doom-module-init-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-init-file)
					".example.el"))
				 (cons doom-module-config-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-config-file)
					".example.el"))
				 (cons doom-module-packages-file
				       (file-name-with-extension
					(doom-path template-dir
						   doom-module-packages-file)
					".example.el"))))))))
		       (doom-load
			(doom-path doom-user-dir doom-module-init-file)
			t)
		       (doom-load (doom-path doom-user-dir "cli.el") t)
		       (if (eq envfile? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not generating envvars file, as requested")))
			 (if (file-exists-p doom-env-file)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'item
						  "Envvar file already exists, skipping")))
			   (if
			       (or yes?
				   (y-or-n-p
				    "Generate an envvar file? (see `doom help env` for details)"))
			       (progn (call! '(env))))))
		       (if aot?
			   (progn
			     (progn
			       (eval-after-load 'straight
				 #'(lambda nil
				     (setq
				      straight--native-comp-available
				      t))))))
		       (if (eq install? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not installing plugins, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Installing plugins")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (doom-packages-ensure))))
		       (if (doom-profiles-bootloadable-p)
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'start
						  "Initializing profile bootstrapper...")))
			     (call! '(profiles sync "--reload"))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'start
					    "Synchronizing default profile...")))
		       (progn
			 (let
			     ((doom-print-level
			       (or nil doom-print-level))
			      (doom-print-indent
			       (+
				(if t
				    (or nil
					doom-print-indent-increment)
				  0)
				doom-print-indent)))
			   (doom-profile-generate)))
		       (if (eq hooks? :no)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn
						"Not deploying commit-msg and pre-push git hooks, as requested")))
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'start
					      "Deploying commit-msg and pre-push git hooks")))
			 (progn
			   (let
			       ((doom-print-level
				 (or nil doom-print-level))
				(doom-print-indent
				 (+
				  (if t
				      (or nil
					  doom-print-indent-increment)
				    0)
				  doom-print-indent)))
			     (condition-case e
				 (call!
				  (cons 'ci
					(cons 'deploy-hooks
					      (if yes? '("--force")))))
			       ('user-error
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "%s")
				  (error-message-string e))))))))
		       (if (file-exists-p "~/.emacs")
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn
						  "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
		       (doom-print
			(doom-print--format
			 (doom-print--class 'success
					    "Finished! Doom is ready to go!\n")))
		       (let
			   ((temp-buffer
			     (generate-new-buffer " *temp*" t)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (unwind-protect
			       (progn
				 (insert-file-contents
				  (doom-path doom-emacs-dir
					     "static/QUICKSTART_INTRO"))
				 (doom-print
				  (doom-print--format "%s"
						      (buffer-string))))
			     (and (buffer-name temp-buffer)
				  (kill-buffer temp-buffer))))))))
		  (t)])
      (context
       . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
      (hooks? . :yes) (fonts? . :yes) (install? . :yes)
      (envfile? . :yes) (config? . :yes) (aot?)))))

;;;; 31
((cond
  ((null (or command (doom-cli-get (list prefix) t)))
   (signal 'doom-cli-invalid-prefix-error (list prefix)))
  ((let* ((cl-x context))
     (progn
       (or
	(let* ((cl-x cl-x))
	  (progn
	    (and (memq (type-of cl-x) cl-struct-doom-cli-context-tags)
		 t)))
	(signal 'wrong-type-argument (list 'doom-cli-context cl-x)))
       (aref cl-x 8)))
   (let*
       ((val
	 (let* ((cl-x context))
	   (progn
	     (or
	      (let* ((cl-x cl-x))
		(progn
		  (and
		   (memq (type-of cl-x)
			 cl-struct-doom-cli-context-tags)
		   t)))
	      (signal 'wrong-type-argument
		      (list 'doom-cli-context cl-x)))
	     (aref cl-x 8)))))
     (cond
      ((equal val '"--version")
       (let nil
	 (doom-cli-call (cons ':version (cdr command)) context) t))
      ((member val '("--help" "-?"))
       (let nil (doom-cli-call (cons ':help (cdr command)) context) t))
      (t (let nil (error "In meta mode with no destination!"))))))
  ((not
    (and cli
	 (let* ((cl-x (doom-cli-get cli)))
	   (progn
	     (or
	      (let* ((cl-x cl-x))
		(progn
		  (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)))
	      (signal 'wrong-type-argument (list 'doom-cli cl-x)))
	     (aref cl-x 9)))))
   (signal 'doom-cli-command-not-found-error
	   (append command
		   (alist-get t
			      (let* ((cl-x context))
				(progn
				  (or
				   (let* ((cl-x cl-x))
				     (progn
				       (and
					(memq (type-of cl-x)
					      cl-struct-doom-cli-context-tags)
					t)))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context
						 cl-x)))
				  (aref cl-x 14)))))))
  ((let ((seen '(t)) runners)
     (let
	 ((tail
	   (doom-cli-find command
			  (let* ((cl-x cli))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cl-x)))
			      (aref cl-x 2))))))
       (while tail
	 (let ((cli (car tail)))
	   (setq runners
		 (cons
		  (cons (doom-cli-get cli)
			(doom-cli--bindings cli context seen))
		  runners))
	   (setq tail (cdr tail)))))
     (let ((tail (nreverse runners)))
       (while tail
	 (let ((x26 (car tail)))
	   (progn
	     (ignore (consp x26))
	     (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
	       (let ((cli x27) (bindings x28))
		 (doom-cli-execute cli bindings))))
	   (setq tail (cdr tail)))))
     context)))
 nil)

;;;; 32
((let*
     ((command
       (let* ((cl-x context))
	 (progn
	   (or
	    (let* ((cl-x cl-x))
	      (progn
		(and
		 (memq (type-of cl-x) cl-struct-doom-cli-context-tags)
		 t)))
	    (signal 'wrong-type-argument (list 'doom-cli-context cl-x)))
	   (aref cl-x 10))))
      (cli (doom-cli-get command t))
      (prefix
       (let* ((cl-x context))
	 (progn
	   (or
	    (let* ((cl-x cl-x))
	      (progn
		(and
		 (memq (type-of cl-x) cl-struct-doom-cli-context-tags)
		 t)))
	    (signal 'wrong-type-argument (list 'doom-cli-context cl-x)))
	   (aref cl-x 7)))))
   (if
       (and (not doom-inhibit-log)
	    (or (not noninteractive) (<= 2 doom-log-level)))
       (progn
	 (doom--log 2 "context-execute: %s"
		    (mapconcat #'doom-cli-command-string
			       (delq nil
				     (list
				      (car
				       (let* ((cl-x context))
					 (progn
					   (or
					    (let* ((cl-x cl-x))
					      (progn
						(and
						 (memq (type-of cl-x)
						       cl-struct-doom-cli-context-tags)
						 t)))
					    (signal
					     'wrong-type-argument
					     (list 'doom-cli-context
						   cl-x)))
					   (aref cl-x 11))))
				      command))
			       " -> "))))
   (cond
    ((null (or command (doom-cli-get (list prefix) t)))
     (signal 'doom-cli-invalid-prefix-error (list prefix)))
    ((let* ((cl-x context))
       (progn
	 (or
	  (let* ((cl-x cl-x))
	    (progn
	      (and
	       (memq (type-of cl-x) cl-struct-doom-cli-context-tags) t)))
	  (signal 'wrong-type-argument (list 'doom-cli-context cl-x)))
	 (aref cl-x 8)))
     (let*
	 ((val
	   (let* ((cl-x context))
	     (progn
	       (or
		(let* ((cl-x cl-x))
		  (progn
		    (and
		     (memq (type-of cl-x)
			   cl-struct-doom-cli-context-tags)
		     t)))
		(signal 'wrong-type-argument
			(list 'doom-cli-context cl-x)))
	       (aref cl-x 8)))))
       (cond
	((equal val '"--version")
	 (let nil
	   (doom-cli-call (cons ':version (cdr command)) context) t))
	((member val '("--help" "-?"))
	 (let nil
	   (doom-cli-call (cons ':help (cdr command)) context) t))
	(t (let nil (error "In meta mode with no destination!"))))))
    ((not
      (and cli
	   (let* ((cl-x (doom-cli-get cli)))
	     (progn
	       (or
		(let* ((cl-x cl-x))
		  (progn
		    (and (memq (type-of cl-x) cl-struct-doom-cli-tags)
			 t)))
		(signal 'wrong-type-argument (list 'doom-cli cl-x)))
	       (aref cl-x 9)))))
     (signal 'doom-cli-command-not-found-error
	     (append command
		     (alist-get t
				(let* ((cl-x context))
				  (progn
				    (or
				     (let* ((cl-x cl-x))
				       (progn
					 (and
					  (memq (type-of cl-x)
						cl-struct-doom-cli-context-tags)
					  t)))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context
						   cl-x)))
				    (aref cl-x 14)))))))
    ((let ((seen '(t)) runners)
       (let
	   ((tail
	     (doom-cli-find command
			    (let* ((cl-x cli))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli cl-x)))
				(aref cl-x 2))))))
	 (while tail
	   (let ((cli (car tail)))
	     (setq runners
		   (cons
		    (cons (doom-cli-get cli)
			  (doom-cli--bindings cli context seen))
		    runners))
	     (setq tail (cdr tail)))))
       (let ((tail (nreverse runners)))
	 (while tail
	   (let ((x26 (car tail)))
	     (progn
	       (ignore (consp x26))
	       (let* ((x27 (car-safe x26)) (x28 (cdr-safe x26)))
		 (let ((cli x27) (bindings x28))
		   (doom-cli-execute cli bindings))))
	     (setq tail (cdr tail)))))
       context))))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (command "doom" "install")
  (cli
   . #s(doom-cli ("doom" "install") nil
		 (("SUMMARY"
		   . "Installs and sets up Doom Emacs for the first time.")
		  ("MAIN" . "")
		  ("This command does the following"
		   . "\n  1. Creates `$DOOMDIR' at ~/.config/doom (if it or ~/.doom.d doesn't exist),\n  2. Copies ~/.config/emacs/static/init.example.el to `$DOOMDIR'/init.el (if\n     it doesn't exist),\n  3. Creates dummy files for `$DOOMDIR'/{config,packages}.el,\n  4. Prompts you to generate an envvar file (same as `$ doom env`),\n  5. Installs any dependencies of enabled modules (specified by `$DOOMDIR'/init.el),\n  6. And prompts to install nerd-icons' fonts\n\nThis command is idempotent and safe to reuse.\n\nChange `$DOOMDIR' with the `--doomdir' option, e.g.\n\n  ```\n  $ doom --doomdir /other/doom/config install\n  ```"))
		 nil nil
		 (#s(doom-cli-option aot?
				     "Enable ahead-of-time native-compilation (if available)"
				     nil nil ("--aot") nil nil)
		    #s(doom-cli-option config?
				       "Create `$DOOMDIR' or dummy files therein?"
				       nil t ("--config") nil :yes)
		    #s(doom-cli-option envfile?
				       "(Re)generate an envvars file? (see `$ doom help env`)"
				       nil t ("--env") nil :yes)
		    #s(doom-cli-option install?
				       "Auto-install packages?" nil t
				       ("--install") nil :yes)
		    #s(doom-cli-option fonts?
				       "Install (or prompt to install) nerd-icons fonts?"
				       nil t ("--fonts") nil :yes)
		    #s(doom-cli-option hooks?
				       "Deploy Doom's git hooks to itself?"
				       nil t ("--hooks") nil :yes))
		 ((&context context))
		 (:prefix (doom) :group "Config Management" :docs
			  "Commands for maintaining your Doom Emacs configuration."
			  :hide nil)
		 #[(cli alist)
		   ((let
			((aot? (cdr (assq 'aot? alist)))
			 (config? (cdr (assq 'config? alist)))
			 (envfile? (cdr (assq 'envfile? alist)))
			 (install? (cdr (assq 'install? alist)))
			 (fonts? (cdr (assq 'fonts? alist)))
			 (hooks? (cdr (assq 'hooks? alist)))
			 (context (cdr (assq 'context alist))))
		      (doom-print
		       (doom-print--format
			(doom-print--style 'green
					   "Installing Doom Emacs!\n")))
		      (let
			  ((default-directory doom-emacs-dir)
			   (yes?
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 6)))))
			(if (eq config? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not copying private config template, as requested")))
			  (if
			      (and
			       (not (file-directory-p doom-user-dir))
			       (not (getenv "DOOMDIR")))
			      (progn
				(let
				    ((xdg-config-dir
				      (or (getenv "XDG_CONFIG_HOME")
					  "~/.config")))
				  (if
				      (file-in-directory-p
				       doom-emacs-dir xdg-config-dir)
				      (progn
					(setq doom-user-dir
					      (expand-file-name
					       "doom/" xdg-config-dir)))))))
			  (if (file-directory-p doom-user-dir)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Skipping %s (already exists)")
				(doom-print--class 'path doom-user-dir)))
			    (make-directory doom-user-dir 'parents)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'success "Created %s")
			      (doom-print--class 'path doom-user-dir))))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (mapc
			       #'(lambda (file)
				   (let*
				       ((template file)
					(filename
					 (if template
					     (car-safe
					      (prog1 template
						(setq template
						      (cdr template))))
					   (signal
					    'wrong-number-of-arguments
					    (list
					     '(filename . template)
					     (length template))))))
				     (progn
				       (setq filename
					     (doom-path doom-user-dir
							filename))
				       (if (file-exists-p filename)
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"Skipping %s (already exists)...")
					     (doom-print--class 'path
								filename)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "Creating %s...")
					   (doom-print--class 'path
							      filename)))
					 (let
					     ((temp-file filename)
					      (temp-buffer
					       (generate-new-buffer
						" *temp file*" t)))
					   (unwind-protect
					       (prog1
						   (save-current-buffer
						     (set-buffer
						      temp-buffer)
						     (insert-file-contents
						      template))
						 (save-current-buffer
						   (set-buffer
						    temp-buffer)
						   (write-region nil
								 nil
								 temp-file
								 nil 0)))
					     (and
					      (buffer-name temp-buffer)
					      (kill-buffer temp-buffer))))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'success
							      "Done!")))))))
			       (let
				   ((template-dir
				     (doom-path doom-emacs-dir
						"static/")))
				 (list
				  (cons doom-module-init-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-init-file)
					 ".example.el"))
				  (cons doom-module-config-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-config-file)
					 ".example.el"))
				  (cons doom-module-packages-file
					(file-name-with-extension
					 (doom-path template-dir
						    doom-module-packages-file)
					 ".example.el"))))))))
			(doom-load
			 (doom-path doom-user-dir
				    doom-module-init-file)
			 t)
			(doom-load (doom-path doom-user-dir "cli.el")
				   t)
			(if (eq envfile? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not generating envvars file, as requested")))
			  (if (file-exists-p doom-env-file)
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item
						   "Envvar file already exists, skipping")))
			    (if
				(or yes?
				    (y-or-n-p
				     "Generate an envvar file? (see `doom help env` for details)"))
				(progn (call! '(env))))))
			(if aot?
			    (progn
			      (progn
				(eval-after-load 'straight
				  #'(lambda nil
				      (setq
				       straight--native-comp-available
				       t))))))
			(if (eq install? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not installing plugins, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Installing plugins")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (doom-packages-ensure))))
			(if (doom-profiles-bootloadable-p)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'start
						   "Initializing profile bootstrapper...")))
			      (call! '(profiles sync "--reload"))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'start
					     "Synchronizing default profile...")))
			(progn
			  (let
			      ((doom-print-level
				(or nil doom-print-level))
			       (doom-print-indent
				(+
				 (if t
				     (or nil
					 doom-print-indent-increment)
				   0)
				 doom-print-indent)))
			    (doom-profile-generate)))
			(if (eq hooks? :no)
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'warn
						 "Not deploying commit-msg and pre-push git hooks, as requested")))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start
					       "Deploying commit-msg and pre-push git hooks")))
			  (progn
			    (let
				((doom-print-level
				  (or nil doom-print-level))
				 (doom-print-indent
				  (+
				   (if t
				       (or nil
					   doom-print-indent-increment)
				     0)
				   doom-print-indent)))
			      (condition-case e
				  (call!
				   (cons 'ci
					 (cons 'deploy-hooks
					       (if yes? '("--force")))))
				('user-error
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "%s")
				   (error-message-string e))))))))
			(if (file-exists-p "~/.emacs")
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn
						   "A ~/.emacs file was detected. This conflicts with Doom and should be deleted!")))))
			(doom-print
			 (doom-print--format
			  (doom-print--class 'success
					     "Finished! Doom is ready to go!\n")))
			(let
			    ((temp-buffer
			      (generate-new-buffer " *temp*" t)))
			  (save-current-buffer
			    (set-buffer temp-buffer)
			    (unwind-protect
				(progn
				  (insert-file-contents
				   (doom-path doom-emacs-dir
					      "static/QUICKSTART_INTRO"))
				  (doom-print
				   (doom-print--format "%s"
						       (buffer-string))))
			      (and (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))))
		   (t)]))
  (prefix . "doom")))

;;;; 33
((doom-cli-context-execute
  #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
		      nil "doom" nil nil ("doom" "env") nil
		      ("--no-color" "install")
		      (("--deny") ("-d") ("--allow") ("-a") ("-o")
		       ("--deny-all") ("--allow-all") ("--hooks")
		       ("--fonts") ("--install") ("--env")
		       ("--config") ("--aot") ("--eval") ("-E")
		       ("--strict-load") ("--load") ("-L")
		       ("--color" . :no) ("--benchmark") ("--profile")
		       ("--pager") ("--emacsdir") ("--doomdir")
		       ("--verbose") ("-v") ("--debug") ("-D")
		       ("--force") ("-!"))
		      ((t) (("doom" "env")) (("doom") "env")) #<buffer
		      *doom-cli stdin*> #<buffer  *doom-cli stdout*>
		      #<buffer  *doom-cli stderr*> nil))
 ((context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))))

;;;; 34
((let ((result (doom-cli-context-execute context)))
   (run-hook-with-args 'doom-cli-after-run-functions context result))
 nil)

;;;; 35
((let*
     ((args (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
      (context
       (doom-cli-context-restore (getenv "__DOOMCONTEXT") context))
      (context (doom-cli-context-parse args context)))
   (run-hook-with-args 'doom-cli-before-run-functions context)
   (let ((result (doom-cli-context-execute context)))
     (run-hook-with-args 'doom-cli-after-run-functions context result))
   0)
 ((prefix . "doom") (args ("--no-color" "install"))
  (args "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (write-logs-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-write-logs-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-benchmark-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (streamspec (>= notice #<buffer  *doom-cli stdout*>)
	      (t . #<buffer  *doom-cli stderr*>))
  (vnew
   . #[(message &rest args)
       ((if message
	    (progn
	      (let
		  ((output (apply #'doom-print--format message args)))
		(if (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let ((tail streams))
		  (while tail
		    (let ((stream (car tail)))
		      (if
			  (or (eq (car stream) t)
			      (funcall (car stream)))
			  (progn
			    (doom-print output :stream (cdr stream))))
		      (setq tail (cdr tail))))))
	      message)))
       ((streams
	 (#[128 "\302\301\303\300\4\"\"\207" [(0 2) >= apply append] 6
		"\n\n(fn &rest ARGS2)"]
	  . #<buffer  *doom-cli stdout*>)
	 (t . #<buffer  *doom-cli stderr*>))
	(old . #<subr message>) (level . debug))])
  (old . #<subr message>) (args "doom" "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))))

;;;; 36
((condition-case e
     (let*
	 ((args (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
	  (context
	   (doom-cli-context-restore (getenv "__DOOMCONTEXT") context))
	  (context (doom-cli-context-parse args context)))
       (run-hook-with-args 'doom-cli-before-run-functions context)
       (let ((result (doom-cli-context-execute context)))
	 (run-hook-with-args 'doom-cli-after-run-functions context
			     result))
       0)
   (doom-cli-wrong-number-of-arguments-error
    (let* ((val (cdr e)))
      (progn
	(ignore (consp val))
	(let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
	  (progn
	    (ignore (consp x39))
	    (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
	      (progn
		(ignore (consp x41))
		(let* ((x42 (car-safe x41)) (x43 (cdr-safe x41)))
		  (progn
		    (ignore (consp x43))
		    (let* ((x44 (car-safe x43)) (x45 (cdr-safe x43)))
		      (progn
			(ignore (consp x45))
			(let*
			    ((x46 (car-safe x45)) (x47 (cdr-safe x45)))
			  (progn
			    (ignore (null x47))
			    (let
				((command x38) (flag x40) (args x42)
				 (min x44) (max x46))
			      (progn
				(doom-print
				 (doom-print--format
				  (doom-print--style 'red
						     "Error: %S expected %s argument%s, but got %d")
				  (or flag
				      (doom-cli-command-string
				       (if (keywordp (car command))
					   command
					 (cdr command))))
				  (if
				      (or (= min max)
					  (= max most-positive-fixnum))
				      min
				    (format "%d-%d" min max))
				  (if (or (= min 0) (> min 1)) "s" "")
				  (length args)))
				(doom-cli-call
				 (cons ':help
				       (cons "--synopsis"
					     (cons "--postamble"
						   (cdr
						    (doom-cli--command
						     context)))))
				 context e)))))))))))))))
    5)
   (doom-cli-unrecognized-option-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: unknown option %s")
      (car (cdr e))))
    (doom-cli-call
     (cons ':help
	   (cons "--synopsis"
		 (cons "--postamble" (cdr (doom-cli--command context)))))
     context e)
    5)
   (doom-cli-invalid-option-error
    (let* ((val (cdr e)))
      (progn
	(ignore (consp val))
	(let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
	  (progn
	    (ignore (consp x49))
	    (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
	      (progn
		(ignore (consp x51))
		(let* ((x52 (car-safe x51)) (x53 (cdr-safe x51)))
		  (progn
		    (ignore (consp x53))
		    (let* ((x54 (car-safe x53)) (x55 (cdr-safe x53)))
		      (progn
			(ignore (null x55))
			(let
			    ((_types x48) (option x50) (value x52)
			     (errors x54))
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'red
						 "Error: %s received invalid value %S")
			      (string-join
			       (let* ((cl-x option))
				 (progn
				   (or
				    (let* ((cl-x cl-x))
				      (progn
					(and
					 (memq (type-of cl-x)
					       cl-struct-doom-cli-option-tags)
					 t)))
				    (signal 'wrong-type-argument
					    (list 'doom-cli-option
						  cl-x)))
				   (aref cl-x 5)))
			       "/")
			      value))
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'bold
						 "\nValidation errors:")))
			    (let ((tail errors))
			      (while tail
				(let ((err (car tail)))
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'item "%s."
						       (doom-print--class
							'fill err))))
				  (setq tail (cdr tail)))))))))))))))))
    (doom-cli-call
     (cons ':help
	   (cons "--postamble" (cdr (doom-cli--command context))))
     context e)
    5)
   (doom-cli-command-not-found-error
    (let* ((command (cdr e)) (cli (doom-cli-get command)))
      (cond
       ((null cli)
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: unrecognized command: %s")
	  (doom-cli-command-string command)))
	(doom-cli-call
	 (cons ':help
	       (cons "--similar" (cons "--postamble" (cdr command))))
	 context e))
       ((null
	 (let* ((cl-x cli))
	   (progn
	     (or
	      (let* ((cl-x cl-x))
		(progn
		  (and (memq (type-of cl-x) cl-struct-doom-cli-tags) t)))
	      (signal 'wrong-type-argument (list 'doom-cli cl-x)))
	     (aref cl-x 9))))
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: a subcommand is required")))
	(doom-cli-call
	 (cons ':help
	       (cons "--subcommands"
		     (cons "--postamble" (cdr command))))
	 context e))))
    4)
   (doom-cli-invalid-prefix-error
    (let ((prefix (car (cdr e))))
      (doom-print
       (doom-print--format
	(doom-print--style 'red
			   "Error: `run!' called with invalid prefix %S")
	prefix))
      (let*
	  ((suggested
	    (and t
		 (let* ((--cl-var-- t) --cl-var--)
		   (catch '--cl-block---cl-finish----
		     (maphash
		      #'(lambda (--cl-var-- cli)
			  (or
			   (if
			       (let* ((cl-x cli))
				 (progn
				   (or
				    (let* ((cl-x cl-x))
				      (progn
					(and
					 (memq (type-of cl-x)
					       cl-struct-doom-cli-tags)
					 t)))
				    (signal 'wrong-type-argument
					    (list 'doom-cli cl-x)))
				   (aref cl-x 2)))
			       t
			     (progn
			       (setq --cl-var--
				     (car
				      (let* ((cl-x cli))
					(progn
					  (or
					   (let* ((cl-x cl-x))
					     (progn
					       (and
						(memq (type-of cl-x)
						      cl-struct-doom-cli-tags)
						t)))
					   (signal
					    'wrong-type-argument
					    (list 'doom-cli cl-x)))
					  (aref cl-x 1)))))
			       (setq --cl-var-- nil)))
			   (throw '--cl-block---cl-finish---- nil)))
		      doom-cli--table))
		   --cl-var--))))
	(if suggested
	    (doom-print
	     (doom-print--format "Did you mean %S?" suggested))
	  (doom-print
	   (doom-print--format
	    "There are no commands defined under %S." prefix)))))
    4)
   (user-error
    (doom-print
     (doom-print--format (doom-print--style 'red "Error: %s")
			 (car (cdr e))))
    (doom-print (doom-print--format "\nAborting...")) 3))
 nil)

;;;; 37
((catch 'exit
   (condition-case e
       (let*
	   ((args (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
	    (context
	     (doom-cli-context-restore (getenv "__DOOMCONTEXT")
				       context))
	    (context (doom-cli-context-parse args context)))
	 (run-hook-with-args 'doom-cli-before-run-functions context)
	 (let ((result (doom-cli-context-execute context)))
	   (run-hook-with-args 'doom-cli-after-run-functions context
			       result))
	 0)
     (doom-cli-wrong-number-of-arguments-error
      (let* ((val (cdr e)))
	(progn
	  (ignore (consp val))
	  (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
	    (progn
	      (ignore (consp x39))
	      (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
		(progn
		  (ignore (consp x41))
		  (let* ((x42 (car-safe x41)) (x43 (cdr-safe x41)))
		    (progn
		      (ignore (consp x43))
		      (let*
			  ((x44 (car-safe x43)) (x45 (cdr-safe x43)))
			(progn
			  (ignore (consp x45))
			  (let*
			      ((x46 (car-safe x45))
			       (x47 (cdr-safe x45)))
			    (progn
			      (ignore (null x47))
			      (let
				  ((command x38) (flag x40) (args x42)
				   (min x44) (max x46))
				(progn
				  (doom-print
				   (doom-print--format
				    (doom-print--style 'red
						       "Error: %S expected %s argument%s, but got %d")
				    (or flag
					(doom-cli-command-string
					 (if (keywordp (car command))
					     command
					   (cdr command))))
				    (if
					(or (= min max)
					    (= max
					       most-positive-fixnum))
					min
				      (format "%d-%d" min max))
				    (if (or (= min 0) (> min 1)) "s"
				      "")
				    (length args)))
				  (doom-cli-call
				   (cons ':help
					 (cons "--synopsis"
					       (cons "--postamble"
						     (cdr
						      (doom-cli--command
						       context)))))
				   context e)))))))))))))))
      5)
     (doom-cli-unrecognized-option-error
      (doom-print
       (doom-print--format
	(doom-print--style 'red "Error: unknown option %s")
	(car (cdr e))))
      (doom-cli-call
       (cons ':help
	     (cons "--synopsis"
		   (cons "--postamble"
			 (cdr (doom-cli--command context)))))
       context e)
      5)
     (doom-cli-invalid-option-error
      (let* ((val (cdr e)))
	(progn
	  (ignore (consp val))
	  (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
	    (progn
	      (ignore (consp x49))
	      (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
		(progn
		  (ignore (consp x51))
		  (let* ((x52 (car-safe x51)) (x53 (cdr-safe x51)))
		    (progn
		      (ignore (consp x53))
		      (let*
			  ((x54 (car-safe x53)) (x55 (cdr-safe x53)))
			(progn
			  (ignore (null x55))
			  (let
			      ((_types x48) (option x50) (value x52)
			       (errors x54))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--style 'red
						   "Error: %s received invalid value %S")
				(string-join
				 (let* ((cl-x option))
				   (progn
				     (or
				      (let* ((cl-x cl-x))
					(progn
					  (and
					   (memq (type-of cl-x)
						 cl-struct-doom-cli-option-tags)
					   t)))
				      (signal 'wrong-type-argument
					      (list 'doom-cli-option
						    cl-x)))
				     (aref cl-x 5)))
				 "/")
				value))
			      (doom-print
			       (doom-print--format
				(doom-print--style 'bold
						   "\nValidation errors:")))
			      (let ((tail errors))
				(while tail
				  (let ((err (car tail)))
				    (doom-print
				     (doom-print--format
				      (doom-print--class 'item "%s."
							 (doom-print--class
							  'fill err))))
				    (setq tail (cdr tail)))))))))))))))))
      (doom-cli-call
       (cons ':help
	     (cons "--postamble" (cdr (doom-cli--command context))))
       context e)
      5)
     (doom-cli-command-not-found-error
      (let* ((command (cdr e)) (cli (doom-cli-get command)))
	(cond
	 ((null cli)
	  (doom-print
	   (doom-print--format
	    (doom-print--style 'red "Error: unrecognized command: %s")
	    (doom-cli-command-string command)))
	  (doom-cli-call
	   (cons ':help
		 (cons "--similar" (cons "--postamble" (cdr command))))
	   context e))
	 ((null
	   (let* ((cl-x cli))
	     (progn
	       (or
		(let* ((cl-x cl-x))
		  (progn
		    (and (memq (type-of cl-x) cl-struct-doom-cli-tags)
			 t)))
		(signal 'wrong-type-argument (list 'doom-cli cl-x)))
	       (aref cl-x 9))))
	  (doom-print
	   (doom-print--format
	    (doom-print--style 'red "Error: a subcommand is required")))
	  (doom-cli-call
	   (cons ':help
		 (cons "--subcommands"
		       (cons "--postamble" (cdr command))))
	   context e))))
      4)
     (doom-cli-invalid-prefix-error
      (let ((prefix (car (cdr e))))
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red
			     "Error: `run!' called with invalid prefix %S")
	  prefix))
	(let*
	    ((suggested
	      (and t
		   (let* ((--cl-var-- t) --cl-var--)
		     (catch '--cl-block---cl-finish----
		       (maphash
			#'(lambda (--cl-var-- cli)
			    (or
			     (if
				 (let* ((cl-x cli))
				   (progn
				     (or
				      (let* ((cl-x cl-x))
					(progn
					  (and
					   (memq (type-of cl-x)
						 cl-struct-doom-cli-tags)
					   t)))
				      (signal 'wrong-type-argument
					      (list 'doom-cli cl-x)))
				     (aref cl-x 2)))
				 t
			       (progn
				 (setq --cl-var--
				       (car
					(let* ((cl-x cli))
					  (progn
					    (or
					     (let* ((cl-x cl-x))
					       (progn
						 (and
						  (memq (type-of cl-x)
							cl-struct-doom-cli-tags)
						  t)))
					     (signal
					      'wrong-type-argument
					      (list 'doom-cli cl-x)))
					    (aref cl-x 1)))))
				 (setq --cl-var-- nil)))
			     (throw '--cl-block---cl-finish---- nil)))
			doom-cli--table))
		     --cl-var--))))
	  (if suggested
	      (doom-print
	       (doom-print--format "Did you mean %S?" suggested))
	    (doom-print
	     (doom-print--format
	      "There are no commands defined under %S." prefix)))))
      4)
     (user-error
      (doom-print
       (doom-print--format (doom-print--style 'red "Error: %s")
			   (car (cdr e))))
      (doom-print (doom-print--format "\nAborting...")) 3)))
 nil)

;;;; 38
((doom-cli--exit
  (catch 'exit
    (condition-case e
	(let*
	    ((args (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
	     (context
	      (doom-cli-context-restore (getenv "__DOOMCONTEXT")
					context))
	     (context (doom-cli-context-parse args context)))
	  (run-hook-with-args 'doom-cli-before-run-functions context)
	  (let ((result (doom-cli-context-execute context)))
	    (run-hook-with-args 'doom-cli-after-run-functions context
				result))
	  0)
      (doom-cli-wrong-number-of-arguments-error
       (let* ((val (cdr e)))
	 (progn
	   (ignore (consp val))
	   (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
	     (progn
	       (ignore (consp x39))
	       (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
		 (progn
		   (ignore (consp x41))
		   (let* ((x42 (car-safe x41)) (x43 (cdr-safe x41)))
		     (progn
		       (ignore (consp x43))
		       (let*
			   ((x44 (car-safe x43)) (x45 (cdr-safe x43)))
			 (progn
			   (ignore (consp x45))
			   (let*
			       ((x46 (car-safe x45))
				(x47 (cdr-safe x45)))
			     (progn
			       (ignore (null x47))
			       (let
				   ((command x38) (flag x40)
				    (args x42) (min x44) (max x46))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red
							"Error: %S expected %s argument%s, but got %d")
				     (or flag
					 (doom-cli-command-string
					  (if (keywordp (car command))
					      command
					    (cdr command))))
				     (if
					 (or (= min max)
					     (= max
						most-positive-fixnum))
					 min
				       (format "%d-%d" min max))
				     (if (or (= min 0) (> min 1)) "s"
				       "")
				     (length args)))
				   (doom-cli-call
				    (cons ':help
					  (cons "--synopsis"
						(cons "--postamble"
						      (cdr
						       (doom-cli--command
							context)))))
				    context e)))))))))))))))
       5)
      (doom-cli-unrecognized-option-error
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: unknown option %s")
	 (car (cdr e))))
       (doom-cli-call
	(cons ':help
	      (cons "--synopsis"
		    (cons "--postamble"
			  (cdr (doom-cli--command context)))))
	context e)
       5)
      (doom-cli-invalid-option-error
       (let* ((val (cdr e)))
	 (progn
	   (ignore (consp val))
	   (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
	     (progn
	       (ignore (consp x49))
	       (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
		 (progn
		   (ignore (consp x51))
		   (let* ((x52 (car-safe x51)) (x53 (cdr-safe x51)))
		     (progn
		       (ignore (consp x53))
		       (let*
			   ((x54 (car-safe x53)) (x55 (cdr-safe x53)))
			 (progn
			   (ignore (null x55))
			   (let
			       ((_types x48) (option x50) (value x52)
				(errors x54))
			     (progn
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red
						    "Error: %s received invalid value %S")
				 (string-join
				  (let* ((cl-x option))
				    (progn
				      (or
				       (let* ((cl-x cl-x))
					 (progn
					   (and
					    (memq (type-of cl-x)
						  cl-struct-doom-cli-option-tags)
					    t)))
				       (signal 'wrong-type-argument
					       (list 'doom-cli-option
						     cl-x)))
				      (aref cl-x 5)))
				  "/")
				 value))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'bold
						    "\nValidation errors:")))
			       (let ((tail errors))
				 (while tail
				   (let ((err (car tail)))
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'item "%s."
							  (doom-print--class
							   'fill err))))
				     (setq tail (cdr tail)))))))))))))))))
       (doom-cli-call
	(cons ':help
	      (cons "--postamble" (cdr (doom-cli--command context))))
	context e)
       5)
      (doom-cli-command-not-found-error
       (let* ((command (cdr e)) (cli (doom-cli-get command)))
	 (cond
	  ((null cli)
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unrecognized command: %s")
	     (doom-cli-command-string command)))
	   (doom-cli-call
	    (cons ':help
		  (cons "--similar" (cons "--postamble" (cdr command))))
	    context e))
	  ((null
	    (let* ((cl-x cli))
	      (progn
		(or
		 (let* ((cl-x cl-x))
		   (progn
		     (and
		      (memq (type-of cl-x) cl-struct-doom-cli-tags) t)))
		 (signal 'wrong-type-argument (list 'doom-cli cl-x)))
		(aref cl-x 9))))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: a subcommand is required")))
	   (doom-cli-call
	    (cons ':help
		  (cons "--subcommands"
			(cons "--postamble" (cdr command))))
	    context e))))
       4)
      (doom-cli-invalid-prefix-error
       (let ((prefix (car (cdr e))))
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red
			      "Error: `run!' called with invalid prefix %S")
	   prefix))
	 (let*
	     ((suggested
	       (and t
		    (let* ((--cl-var-- t) --cl-var--)
		      (catch '--cl-block---cl-finish----
			(maphash
			 #'(lambda (--cl-var-- cli)
			     (or
			      (if
				  (let* ((cl-x cli))
				    (progn
				      (or
				       (let* ((cl-x cl-x))
					 (progn
					   (and
					    (memq (type-of cl-x)
						  cl-struct-doom-cli-tags)
					    t)))
				       (signal 'wrong-type-argument
					       (list 'doom-cli cl-x)))
				      (aref cl-x 2)))
				  t
				(progn
				  (setq --cl-var--
					(car
					 (let* ((cl-x cli))
					   (progn
					     (or
					      (let* ((cl-x cl-x))
						(progn
						  (and
						   (memq
						    (type-of cl-x)
						    cl-struct-doom-cli-tags)
						   t)))
					      (signal
					       'wrong-type-argument
					       (list 'doom-cli cl-x)))
					     (aref cl-x 1)))))
				  (setq --cl-var-- nil)))
			      (throw '--cl-block---cl-finish---- nil)))
			 doom-cli--table))
		      --cl-var--))))
	   (if suggested
	       (doom-print
		(doom-print--format "Did you mean %S?" suggested))
	     (doom-print
	      (doom-print--format
	       "There are no commands defined under %S." prefix)))))
       4)
      (user-error
       (doom-print
	(doom-print--format (doom-print--style 'red "Error: %s")
			    (car (cdr e))))
       (doom-print (doom-print--format "\nAborting...")) 3)))
  context)
 nil)

;;;; 39
((progn
   (if
       (and (not doom-inhibit-log)
	    (or (not noninteractive) (<= 2 doom-log-level)))
       (progn
	 (doom--log 2 "run!: %s %s" prefix
		    (combine-and-quote-strings args))))
   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
   (add-hook 'kill-emacs-hook write-logs-fn 95)
   (if (doom-cli-context-pipe-p context :out t)
       (progn (setq doom-print-backend nil)))
   (if (doom-cli-context-pipe-p context :in)
       (progn
	 (save-current-buffer
	   (set-buffer
	    (let* ((cl-x context))
	      (progn
		(or
		 (let* ((cl-x cl-x))
		   (progn
		     (and
		      (memq (type-of cl-x)
			    cl-struct-doom-cli-context-tags)
		      t)))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context cl-x)))
		(aref cl-x 15))))
	   (while
	       (let*
		   ((in
		     (and t
			  (condition-case nil
			      (progn (read-from-minibuffer ""))
			    (error nil)))))
		 (if in (insert in "\n")
		   (condition-case nil (progn (delete-char -1))
		     (error nil))))))))
   (doom-cli--exit
    (catch 'exit
      (condition-case e
	  (let*
	      ((args
		(cons (if (getenv "__DOOMDUMP") :dump prefix) args))
	       (context
		(doom-cli-context-restore (getenv "__DOOMCONTEXT")
					  context))
	       (context (doom-cli-context-parse args context)))
	    (run-hook-with-args 'doom-cli-before-run-functions context)
	    (let ((result (doom-cli-context-execute context)))
	      (run-hook-with-args 'doom-cli-after-run-functions
				  context result))
	    0)
	(doom-cli-wrong-number-of-arguments-error
	 (let* ((val (cdr e)))
	   (progn
	     (ignore (consp val))
	     (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
	       (progn
		 (ignore (consp x39))
		 (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
		   (progn
		     (ignore (consp x41))
		     (let* ((x42 (car-safe x41)) (x43 (cdr-safe x41)))
		       (progn
			 (ignore (consp x43))
			 (let*
			     ((x44 (car-safe x43))
			      (x45 (cdr-safe x43)))
			   (progn
			     (ignore (consp x45))
			     (let*
				 ((x46 (car-safe x45))
				  (x47 (cdr-safe x45)))
			       (progn
				 (ignore (null x47))
				 (let
				     ((command x38) (flag x40)
				      (args x42) (min x44) (max x46))
				   (progn
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'red
							  "Error: %S expected %s argument%s, but got %d")
				       (or flag
					   (doom-cli-command-string
					    (if
						(keywordp
						 (car command))
						command
					      (cdr command))))
				       (if
					   (or (= min max)
					       (= max
						  most-positive-fixnum))
					   min
					 (format "%d-%d" min max))
				       (if (or (= min 0) (> min 1))
					   "s"
					 "")
				       (length args)))
				     (doom-cli-call
				      (cons ':help
					    (cons "--synopsis"
						  (cons "--postamble"
							(cdr
							 (doom-cli--command
							  context)))))
				      context e)))))))))))))))
	 5)
	(doom-cli-unrecognized-option-error
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: unknown option %s")
	   (car (cdr e))))
	 (doom-cli-call
	  (cons ':help
		(cons "--synopsis"
		      (cons "--postamble"
			    (cdr (doom-cli--command context)))))
	  context e)
	 5)
	(doom-cli-invalid-option-error
	 (let* ((val (cdr e)))
	   (progn
	     (ignore (consp val))
	     (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
	       (progn
		 (ignore (consp x49))
		 (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
		   (progn
		     (ignore (consp x51))
		     (let* ((x52 (car-safe x51)) (x53 (cdr-safe x51)))
		       (progn
			 (ignore (consp x53))
			 (let*
			     ((x54 (car-safe x53))
			      (x55 (cdr-safe x53)))
			   (progn
			     (ignore (null x55))
			     (let
				 ((_types x48) (option x50)
				  (value x52) (errors x54))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red
						      "Error: %s received invalid value %S")
				   (string-join
				    (let* ((cl-x option))
				      (progn
					(or
					 (let* ((cl-x cl-x))
					   (progn
					     (and
					      (memq (type-of cl-x)
						    cl-struct-doom-cli-option-tags)
					      t)))
					 (signal 'wrong-type-argument
						 (list
						  'doom-cli-option
						  cl-x)))
					(aref cl-x 5)))
				    "/")
				   value))
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'bold
						      "\nValidation errors:")))
				 (let ((tail errors))
				   (while tail
				     (let ((err (car tail)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item
							    "%s."
							    (doom-print--class
							     'fill err))))
				       (setq tail (cdr tail)))))))))))))))))
	 (doom-cli-call
	  (cons ':help
		(cons "--postamble" (cdr (doom-cli--command context))))
	  context e)
	 5)
	(doom-cli-command-not-found-error
	 (let* ((command (cdr e)) (cli (doom-cli-get command)))
	   (cond
	    ((null cli)
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red
				  "Error: unrecognized command: %s")
	       (doom-cli-command-string command)))
	     (doom-cli-call
	      (cons ':help
		    (cons "--similar"
			  (cons "--postamble" (cdr command))))
	      context e))
	    ((null
	      (let* ((cl-x cli))
		(progn
		  (or
		   (let* ((cl-x cl-x))
		     (progn
		       (and
			(memq (type-of cl-x) cl-struct-doom-cli-tags)
			t)))
		   (signal 'wrong-type-argument (list 'doom-cli cl-x)))
		  (aref cl-x 9))))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red
				  "Error: a subcommand is required")))
	     (doom-cli-call
	      (cons ':help
		    (cons "--subcommands"
			  (cons "--postamble" (cdr command))))
	      context e))))
	 4)
	(doom-cli-invalid-prefix-error
	 (let ((prefix (car (cdr e))))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red
				"Error: `run!' called with invalid prefix %S")
	     prefix))
	   (let*
	       ((suggested
		 (and t
		      (let* ((--cl-var-- t) --cl-var--)
			(catch '--cl-block---cl-finish----
			  (maphash
			   #'(lambda (--cl-var-- cli)
			       (or
				(if
				    (let* ((cl-x cli))
				      (progn
					(or
					 (let* ((cl-x cl-x))
					   (progn
					     (and
					      (memq (type-of cl-x)
						    cl-struct-doom-cli-tags)
					      t)))
					 (signal 'wrong-type-argument
						 (list 'doom-cli cl-x)))
					(aref cl-x 2)))
				    t
				  (progn
				    (setq --cl-var--
					  (car
					   (let* ((cl-x cli))
					     (progn
					       (or
						(let* ((cl-x cl-x))
						  (progn
						    (and
						     (memq
						      (type-of cl-x)
						      cl-struct-doom-cli-tags)
						     t)))
						(signal
						 'wrong-type-argument
						 (list 'doom-cli cl-x)))
					       (aref cl-x 1)))))
				    (setq --cl-var-- nil)))
				(throw '--cl-block---cl-finish---- nil)))
			   doom-cli--table))
			--cl-var--))))
	     (if suggested
		 (doom-print
		  (doom-print--format "Did you mean %S?" suggested))
	       (doom-print
		(doom-print--format
		 "There are no commands defined under %S." prefix)))))
	 4)
	(user-error
	 (doom-print
	  (doom-print--format (doom-print--style 'red "Error: %s")
			      (car (cdr e))))
	 (doom-print (doom-print--format "\nAborting...")) 3)))
    context))
 nil)

;;;; 40
((let ((doom-print-stream standard-output))
   (progn
     (if
	 (and (not doom-inhibit-log)
	      (or (not noninteractive) (<= 2 doom-log-level)))
	 (progn
	   (doom--log 2 "run!: %s %s" prefix
		      (combine-and-quote-strings args))))
     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
     (add-hook 'kill-emacs-hook write-logs-fn 95)
     (if (doom-cli-context-pipe-p context :out t)
	 (progn (setq doom-print-backend nil)))
     (if (doom-cli-context-pipe-p context :in)
	 (progn
	   (save-current-buffer
	     (set-buffer
	      (let* ((cl-x context))
		(progn
		  (or
		   (let* ((cl-x cl-x))
		     (progn
		       (and
			(memq (type-of cl-x)
			      cl-struct-doom-cli-context-tags)
			t)))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context cl-x)))
		  (aref cl-x 15))))
	     (while
		 (let*
		     ((in
		       (and t
			    (condition-case nil
				(progn (read-from-minibuffer ""))
			      (error nil)))))
		   (if in (insert in "\n")
		     (condition-case nil (progn (delete-char -1))
		       (error nil))))))))
     (doom-cli--exit
      (catch 'exit
	(condition-case e
	    (let*
		((args
		  (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
		 (context
		  (doom-cli-context-restore (getenv "__DOOMCONTEXT")
					    context))
		 (context (doom-cli-context-parse args context)))
	      (run-hook-with-args 'doom-cli-before-run-functions
				  context)
	      (let ((result (doom-cli-context-execute context)))
		(run-hook-with-args 'doom-cli-after-run-functions
				    context result))
	      0)
	  (doom-cli-wrong-number-of-arguments-error
	   (let* ((val (cdr e)))
	     (progn
	       (ignore (consp val))
	       (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
		 (progn
		   (ignore (consp x39))
		   (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
		     (progn
		       (ignore (consp x41))
		       (let*
			   ((x42 (car-safe x41)) (x43 (cdr-safe x41)))
			 (progn
			   (ignore (consp x43))
			   (let*
			       ((x44 (car-safe x43))
				(x45 (cdr-safe x43)))
			     (progn
			       (ignore (consp x45))
			       (let*
				   ((x46 (car-safe x45))
				    (x47 (cdr-safe x45)))
				 (progn
				   (ignore (null x47))
				   (let
				       ((command x38) (flag x40)
					(args x42) (min x44) (max x46))
				     (progn
				       (doom-print
					(doom-print--format
					 (doom-print--style 'red
							    "Error: %S expected %s argument%s, but got %d")
					 (or flag
					     (doom-cli-command-string
					      (if
						  (keywordp
						   (car command))
						  command
						(cdr command))))
					 (if
					     (or (= min max)
						 (= max
						    most-positive-fixnum))
					     min
					   (format "%d-%d" min max))
					 (if (or (= min 0) (> min 1))
					     "s"
					   "")
					 (length args)))
				       (doom-cli-call
					(cons ':help
					      (cons "--synopsis"
						    (cons
						     "--postamble"
						     (cdr
						      (doom-cli--command
						       context)))))
					context e)))))))))))))))
	   5)
	  (doom-cli-unrecognized-option-error
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unknown option %s")
	     (car (cdr e))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--synopsis"
			(cons "--postamble"
			      (cdr (doom-cli--command context)))))
	    context e)
	   5)
	  (doom-cli-invalid-option-error
	   (let* ((val (cdr e)))
	     (progn
	       (ignore (consp val))
	       (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
		 (progn
		   (ignore (consp x49))
		   (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
		     (progn
		       (ignore (consp x51))
		       (let*
			   ((x52 (car-safe x51)) (x53 (cdr-safe x51)))
			 (progn
			   (ignore (consp x53))
			   (let*
			       ((x54 (car-safe x53))
				(x55 (cdr-safe x53)))
			     (progn
			       (ignore (null x55))
			       (let
				   ((_types x48) (option x50)
				    (value x52) (errors x54))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red
							"Error: %s received invalid value %S")
				     (string-join
				      (let* ((cl-x option))
					(progn
					  (or
					   (let* ((cl-x cl-x))
					     (progn
					       (and
						(memq (type-of cl-x)
						      cl-struct-doom-cli-option-tags)
						t)))
					   (signal
					    'wrong-type-argument
					    (list 'doom-cli-option
						  cl-x)))
					  (aref cl-x 5)))
				      "/")
				     value))
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'bold
							"\nValidation errors:")))
				   (let ((tail errors))
				     (while tail
				       (let ((err (car tail)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item
							      "%s."
							      (doom-print--class
							       'fill
							       err))))
					 (setq tail (cdr tail)))))))))))))))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--postamble"
			(cdr (doom-cli--command context))))
	    context e)
	   5)
	  (doom-cli-command-not-found-error
	   (let* ((command (cdr e)) (cli (doom-cli-get command)))
	     (cond
	      ((null cli)
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red
				    "Error: unrecognized command: %s")
		 (doom-cli-command-string command)))
	       (doom-cli-call
		(cons ':help
		      (cons "--similar"
			    (cons "--postamble" (cdr command))))
		context e))
	      ((null
		(let* ((cl-x cli))
		  (progn
		    (or
		     (let* ((cl-x cl-x))
		       (progn
			 (and
			  (memq (type-of cl-x) cl-struct-doom-cli-tags)
			  t)))
		     (signal 'wrong-type-argument
			     (list 'doom-cli cl-x)))
		    (aref cl-x 9))))
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red
				    "Error: a subcommand is required")))
	       (doom-cli-call
		(cons ':help
		      (cons "--subcommands"
			    (cons "--postamble" (cdr command))))
		context e))))
	   4)
	  (doom-cli-invalid-prefix-error
	   (let ((prefix (car (cdr e))))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red
				  "Error: `run!' called with invalid prefix %S")
	       prefix))
	     (let*
		 ((suggested
		   (and t
			(let* ((--cl-var-- t) --cl-var--)
			  (catch '--cl-block---cl-finish----
			    (maphash
			     #'(lambda (--cl-var-- cli)
				 (or
				  (if
				      (let* ((cl-x cli))
					(progn
					  (or
					   (let* ((cl-x cl-x))
					     (progn
					       (and
						(memq (type-of cl-x)
						      cl-struct-doom-cli-tags)
						t)))
					   (signal
					    'wrong-type-argument
					    (list 'doom-cli cl-x)))
					  (aref cl-x 2)))
				      t
				    (progn
				      (setq --cl-var--
					    (car
					     (let* ((cl-x cli))
					       (progn
						 (or
						  (let* ((cl-x cl-x))
						    (progn
						      (and
						       (memq
							(type-of cl-x)
							cl-struct-doom-cli-tags)
						       t)))
						  (signal
						   'wrong-type-argument
						   (list 'doom-cli
							 cl-x)))
						 (aref cl-x 1)))))
				      (setq --cl-var-- nil)))
				  (throw '--cl-block---cl-finish----
					 nil)))
			     doom-cli--table))
			  --cl-var--))))
	       (if suggested
		   (doom-print
		    (doom-print--format "Did you mean %S?" suggested))
		 (doom-print
		  (doom-print--format
		   "There are no commands defined under %S." prefix)))))
	   4)
	  (user-error
	   (doom-print
	    (doom-print--format (doom-print--style 'red "Error: %s")
				(car (cdr e))))
	   (doom-print (doom-print--format "\nAborting...")) 3)))
      context)))
 ((doom-print-stream
   . #[(ch)
       ((let ((str (char-to-string ch)))
	  (let ((tail streams))
	    (while tail
	      (let ((stream (car tail)))
		(if (or (eq (car stream) t) (funcall (car stream)))
		    (progn
		      (doom-print str :newline nil :stream
				  (cdr stream))))
		(setq tail (cdr tail)))))
	  (doom-print str :newline nil :stream t :level level)))
       ((streams (t . #<buffer  *doom-cli stdout*>)
		 (t . #<buffer  *doom-cli stderr*>))
	(level . t))])))

;;;; 41
((progn
   (fset #'message vnew)
   (let ((doom-print-stream standard-output))
     (progn
       (if
	   (and (not doom-inhibit-log)
		(or (not noninteractive) (<= 2 doom-log-level)))
	   (progn
	     (doom--log 2 "run!: %s %s" prefix
			(combine-and-quote-strings args))))
       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
       (add-hook 'kill-emacs-hook write-logs-fn 95)
       (if (doom-cli-context-pipe-p context :out t)
	   (progn (setq doom-print-backend nil)))
       (if (doom-cli-context-pipe-p context :in)
	   (progn
	     (save-current-buffer
	       (set-buffer
		(let* ((cl-x context))
		  (progn
		    (or
		     (let* ((cl-x cl-x))
		       (progn
			 (and
			  (memq (type-of cl-x)
				cl-struct-doom-cli-context-tags)
			  t)))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context cl-x)))
		    (aref cl-x 15))))
	       (while
		   (let*
		       ((in
			 (and t
			      (condition-case nil
				  (progn (read-from-minibuffer ""))
				(error nil)))))
		     (if in (insert in "\n")
		       (condition-case nil (progn (delete-char -1))
			 (error nil))))))))
       (doom-cli--exit
	(catch 'exit
	  (condition-case e
	      (let*
		  ((args
		    (cons (if (getenv "__DOOMDUMP") :dump prefix) args))
		   (context
		    (doom-cli-context-restore (getenv "__DOOMCONTEXT")
					      context))
		   (context (doom-cli-context-parse args context)))
		(run-hook-with-args 'doom-cli-before-run-functions
				    context)
		(let ((result (doom-cli-context-execute context)))
		  (run-hook-with-args 'doom-cli-after-run-functions
				      context result))
		0)
	    (doom-cli-wrong-number-of-arguments-error
	     (let* ((val (cdr e)))
	       (progn
		 (ignore (consp val))
		 (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
		   (progn
		     (ignore (consp x39))
		     (let* ((x40 (car-safe x39)) (x41 (cdr-safe x39)))
		       (progn
			 (ignore (consp x41))
			 (let*
			     ((x42 (car-safe x41))
			      (x43 (cdr-safe x41)))
			   (progn
			     (ignore (consp x43))
			     (let*
				 ((x44 (car-safe x43))
				  (x45 (cdr-safe x43)))
			       (progn
				 (ignore (consp x45))
				 (let*
				     ((x46 (car-safe x45))
				      (x47 (cdr-safe x45)))
				   (progn
				     (ignore (null x47))
				     (let
					 ((command x38) (flag x40)
					  (args x42) (min x44)
					  (max x46))
				       (progn
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'red
							      "Error: %S expected %s argument%s, but got %d")
					   (or flag
					       (doom-cli-command-string
						(if
						    (keywordp
						     (car command))
						    command
						  (cdr command))))
					   (if
					       (or (= min max)
						   (= max
						      most-positive-fixnum))
					       min
					     (format "%d-%d" min max))
					   (if
					       (or (= min 0) (> min 1))
					       "s"
					     "")
					   (length args)))
					 (doom-cli-call
					  (cons ':help
						(cons "--synopsis"
						      (cons
						       "--postamble"
						       (cdr
							(doom-cli--command
							 context)))))
					  context e)))))))))))))))
	     5)
	    (doom-cli-unrecognized-option-error
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: unknown option %s")
	       (car (cdr e))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--synopsis"
			  (cons "--postamble"
				(cdr (doom-cli--command context)))))
	      context e)
	     5)
	    (doom-cli-invalid-option-error
	     (let* ((val (cdr e)))
	       (progn
		 (ignore (consp val))
		 (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
		   (progn
		     (ignore (consp x49))
		     (let* ((x50 (car-safe x49)) (x51 (cdr-safe x49)))
		       (progn
			 (ignore (consp x51))
			 (let*
			     ((x52 (car-safe x51))
			      (x53 (cdr-safe x51)))
			   (progn
			     (ignore (consp x53))
			     (let*
				 ((x54 (car-safe x53))
				  (x55 (cdr-safe x53)))
			       (progn
				 (ignore (null x55))
				 (let
				     ((_types x48) (option x50)
				      (value x52) (errors x54))
				   (progn
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'red
							  "Error: %s received invalid value %S")
				       (string-join
					(let* ((cl-x option))
					  (progn
					    (or
					     (let* ((cl-x cl-x))
					       (progn
						 (and
						  (memq (type-of cl-x)
							cl-struct-doom-cli-option-tags)
						  t)))
					     (signal
					      'wrong-type-argument
					      (list 'doom-cli-option
						    cl-x)))
					    (aref cl-x 5)))
					"/")
				       value))
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'bold
							  "\nValidation errors:")))
				     (let ((tail errors))
				       (while tail
					 (let ((err (car tail)))
					   (doom-print
					    (doom-print--format
					     (doom-print--class 'item
								"%s."
								(doom-print--class
								 'fill
								 err))))
					   (setq tail (cdr tail)))))))))))))))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--postamble"
			  (cdr (doom-cli--command context))))
	      context e)
	     5)
	    (doom-cli-command-not-found-error
	     (let* ((command (cdr e)) (cli (doom-cli-get command)))
	       (cond
		((null cli)
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red
				      "Error: unrecognized command: %s")
		   (doom-cli-command-string command)))
		 (doom-cli-call
		  (cons ':help
			(cons "--similar"
			      (cons "--postamble" (cdr command))))
		  context e))
		((null
		  (let* ((cl-x cli))
		    (progn
		      (or
		       (let* ((cl-x cl-x))
			 (progn
			   (and
			    (memq (type-of cl-x)
				  cl-struct-doom-cli-tags)
			    t)))
		       (signal 'wrong-type-argument
			       (list 'doom-cli cl-x)))
		      (aref cl-x 9))))
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red
				      "Error: a subcommand is required")))
		 (doom-cli-call
		  (cons ':help
			(cons "--subcommands"
			      (cons "--postamble" (cdr command))))
		  context e))))
	     4)
	    (doom-cli-invalid-prefix-error
	     (let ((prefix (car (cdr e))))
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red
				    "Error: `run!' called with invalid prefix %S")
		 prefix))
	       (let*
		   ((suggested
		     (and t
			  (let* ((--cl-var-- t) --cl-var--)
			    (catch '--cl-block---cl-finish----
			      (maphash
			       #'(lambda (--cl-var-- cli)
				   (or
				    (if
					(let* ((cl-x cli))
					  (progn
					    (or
					     (let* ((cl-x cl-x))
					       (progn
						 (and
						  (memq (type-of cl-x)
							cl-struct-doom-cli-tags)
						  t)))
					     (signal
					      'wrong-type-argument
					      (list 'doom-cli cl-x)))
					    (aref cl-x 2)))
					t
				      (progn
					(setq --cl-var--
					      (car
					       (let* ((cl-x cli))
						 (progn
						   (or
						    (let*
							((cl-x cl-x))
						      (progn
							(and
							 (memq
							  (type-of
							   cl-x)
							  cl-struct-doom-cli-tags)
							 t)))
						    (signal
						     'wrong-type-argument
						     (list 'doom-cli
							   cl-x)))
						   (aref cl-x 1)))))
					(setq --cl-var-- nil)))
				    (throw '--cl-block---cl-finish----
					   nil)))
			       doom-cli--table))
			    --cl-var--))))
		 (if suggested
		     (doom-print
		      (doom-print--format "Did you mean %S?" suggested))
		   (doom-print
		    (doom-print--format
		     "There are no commands defined under %S." prefix)))))
	     4)
	    (user-error
	     (doom-print
	      (doom-print--format (doom-print--style 'red "Error: %s")
				  (car (cdr e))))
	     (doom-print (doom-print--format "\nAborting...")) 3)))
	context))))
 nil)

;;;; 42
((unwind-protect
     (progn
       (fset #'message vnew)
       (let ((doom-print-stream standard-output))
	 (progn
	   (if
	       (and (not doom-inhibit-log)
		    (or (not noninteractive) (<= 2 doom-log-level)))
	       (progn
		 (doom--log 2 "run!: %s %s" prefix
			    (combine-and-quote-strings args))))
	   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	   (add-hook 'kill-emacs-hook write-logs-fn 95)
	   (if (doom-cli-context-pipe-p context :out t)
	       (progn (setq doom-print-backend nil)))
	   (if (doom-cli-context-pipe-p context :in)
	       (progn
		 (save-current-buffer
		   (set-buffer
		    (let* ((cl-x context))
		      (progn
			(or
			 (let* ((cl-x cl-x))
			   (progn
			     (and
			      (memq (type-of cl-x)
				    cl-struct-doom-cli-context-tags)
			      t)))
			 (signal 'wrong-type-argument
				 (list 'doom-cli-context cl-x)))
			(aref cl-x 15))))
		   (while
		       (let*
			   ((in
			     (and t
				  (condition-case nil
				      (progn
					(read-from-minibuffer ""))
				    (error nil)))))
			 (if in (insert in "\n")
			   (condition-case nil
			       (progn (delete-char -1))
			     (error nil))))))))
	   (doom-cli--exit
	    (catch 'exit
	      (condition-case e
		  (let*
		      ((args
			(cons (if (getenv "__DOOMDUMP") :dump prefix)
			      args))
		       (context
			(doom-cli-context-restore
			 (getenv "__DOOMCONTEXT") context))
		       (context (doom-cli-context-parse args context)))
		    (run-hook-with-args 'doom-cli-before-run-functions
					context)
		    (let ((result (doom-cli-context-execute context)))
		      (run-hook-with-args
		       'doom-cli-after-run-functions context result))
		    0)
		(doom-cli-wrong-number-of-arguments-error
		 (let* ((val (cdr e)))
		   (progn
		     (ignore (consp val))
		     (let* ((x38 (car-safe val)) (x39 (cdr-safe val)))
		       (progn
			 (ignore (consp x39))
			 (let*
			     ((x40 (car-safe x39))
			      (x41 (cdr-safe x39)))
			   (progn
			     (ignore (consp x41))
			     (let*
				 ((x42 (car-safe x41))
				  (x43 (cdr-safe x41)))
			       (progn
				 (ignore (consp x43))
				 (let*
				     ((x44 (car-safe x43))
				      (x45 (cdr-safe x43)))
				   (progn
				     (ignore (consp x45))
				     (let*
					 ((x46 (car-safe x45))
					  (x47 (cdr-safe x45)))
				       (progn
					 (ignore (null x47))
					 (let
					     ((command x38) (flag x40)
					      (args x42) (min x44)
					      (max x46))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red
								  "Error: %S expected %s argument%s, but got %d")
					       (or flag
						   (doom-cli-command-string
						    (if
							(keywordp
							 (car command))
							command
						      (cdr command))))
					       (if
						   (or (= min max)
						       (= max
							  most-positive-fixnum))
						   min
						 (format "%d-%d" min
							 max))
					       (if
						   (or (= min 0)
						       (> min 1))
						   "s"
						 "")
					       (length args)))
					     (doom-cli-call
					      (cons ':help
						    (cons "--synopsis"
							  (cons
							   "--postamble"
							   (cdr
							    (doom-cli--command
							     context)))))
					      context e)))))))))))))))
		 5)
		(doom-cli-unrecognized-option-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: unknown option %s")
		   (car (cdr e))))
		 (doom-cli-call
		  (cons ':help
			(cons "--synopsis"
			      (cons "--postamble"
				    (cdr (doom-cli--command context)))))
		  context e)
		 5)
		(doom-cli-invalid-option-error
		 (let* ((val (cdr e)))
		   (progn
		     (ignore (consp val))
		     (let* ((x48 (car-safe val)) (x49 (cdr-safe val)))
		       (progn
			 (ignore (consp x49))
			 (let*
			     ((x50 (car-safe x49))
			      (x51 (cdr-safe x49)))
			   (progn
			     (ignore (consp x51))
			     (let*
				 ((x52 (car-safe x51))
				  (x53 (cdr-safe x51)))
			       (progn
				 (ignore (consp x53))
				 (let*
				     ((x54 (car-safe x53))
				      (x55 (cdr-safe x53)))
				   (progn
				     (ignore (null x55))
				     (let
					 ((_types x48) (option x50)
					  (value x52) (errors x54))
				       (progn
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'red
							      "Error: %s received invalid value %S")
					   (string-join
					    (let* ((cl-x option))
					      (progn
						(or
						 (let* ((cl-x cl-x))
						   (progn
						     (and
						      (memq
						       (type-of cl-x)
						       cl-struct-doom-cli-option-tags)
						      t)))
						 (signal
						  'wrong-type-argument
						  (list
						   'doom-cli-option
						   cl-x)))
						(aref cl-x 5)))
					    "/")
					   value))
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'bold
							      "\nValidation errors:")))
					 (let ((tail errors))
					   (while tail
					     (let ((err (car tail)))
					       (doom-print
						(doom-print--format
						 (doom-print--class
						  'item "%s."
						  (doom-print--class
						   'fill err))))
					       (setq tail (cdr tail)))))))))))))))))
		 (doom-cli-call
		  (cons ':help
			(cons "--postamble"
			      (cdr (doom-cli--command context))))
		  context e)
		 5)
		(doom-cli-command-not-found-error
		 (let*
		     ((command (cdr e)) (cli (doom-cli-get command)))
		   (cond
		    ((null cli)
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red
					  "Error: unrecognized command: %s")
		       (doom-cli-command-string command)))
		     (doom-cli-call
		      (cons ':help
			    (cons "--similar"
				  (cons "--postamble" (cdr command))))
		      context e))
		    ((null
		      (let* ((cl-x cli))
			(progn
			  (or
			   (let* ((cl-x cl-x))
			     (progn
			       (and
				(memq (type-of cl-x)
				      cl-struct-doom-cli-tags)
				t)))
			   (signal 'wrong-type-argument
				   (list 'doom-cli cl-x)))
			  (aref cl-x 9))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red
					  "Error: a subcommand is required")))
		     (doom-cli-call
		      (cons ':help
			    (cons "--subcommands"
				  (cons "--postamble" (cdr command))))
		      context e))))
		 4)
		(doom-cli-invalid-prefix-error
		 (let ((prefix (car (cdr e))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red
					"Error: `run!' called with invalid prefix %S")
		     prefix))
		   (let*
		       ((suggested
			 (and t
			      (let* ((--cl-var-- t) --cl-var--)
				(catch '--cl-block---cl-finish----
				  (maphash
				   #'(lambda (--cl-var-- cli)
				       (or
					(if
					    (let* ((cl-x cli))
					      (progn
						(or
						 (let* ((cl-x cl-x))
						   (progn
						     (and
						      (memq
						       (type-of cl-x)
						       cl-struct-doom-cli-tags)
						      t)))
						 (signal
						  'wrong-type-argument
						  (list 'doom-cli cl-x)))
						(aref cl-x 2)))
					    t
					  (progn
					    (setq --cl-var--
						  (car
						   (let* ((cl-x cli))
						     (progn
						       (or
							(let*
							    ((cl-x
							      cl-x))
							  (progn
							    (and
							     (memq
							      (type-of
							       cl-x)
							      cl-struct-doom-cli-tags)
							     t)))
							(signal
							 'wrong-type-argument
							 (list
							  'doom-cli
							  cl-x)))
						       (aref cl-x 1)))))
					    (setq --cl-var-- nil)))
					(throw
					 '--cl-block---cl-finish----
					 nil)))
				   doom-cli--table))
				--cl-var--))))
		     (if suggested
			 (doom-print
			  (doom-print--format "Did you mean %S?"
					      suggested))
		       (doom-print
			(doom-print--format
			 "There are no commands defined under %S."
			 prefix)))))
		 4)
		(user-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: %s") (car (cdr e))))
		 (doom-print (doom-print--format "\nAborting...")) 3)))
	    context))))
   (fset #'message old))
 nil)

;;;; 43
((let*
     ((vnew
       (doom-print--redirect-message streamspec
				     (if noninteractive 'debug
				       'notice)))
      (old (symbol-function #'message)))
   (unwind-protect
       (progn
	 (fset #'message vnew)
	 (let ((doom-print-stream standard-output))
	   (progn
	     (if
		 (and (not doom-inhibit-log)
		      (or (not noninteractive) (<= 2 doom-log-level)))
		 (progn
		   (doom--log 2 "run!: %s %s" prefix
			      (combine-and-quote-strings args))))
	     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	     (add-hook 'kill-emacs-hook write-logs-fn 95)
	     (if (doom-cli-context-pipe-p context :out t)
		 (progn (setq doom-print-backend nil)))
	     (if (doom-cli-context-pipe-p context :in)
		 (progn
		   (save-current-buffer
		     (set-buffer
		      (let* ((cl-x context))
			(progn
			  (or
			   (let* ((cl-x cl-x))
			     (progn
			       (and
				(memq (type-of cl-x)
				      cl-struct-doom-cli-context-tags)
				t)))
			   (signal 'wrong-type-argument
				   (list 'doom-cli-context cl-x)))
			  (aref cl-x 15))))
		     (while
			 (let*
			     ((in
			       (and t
				    (condition-case nil
					(progn
					  (read-from-minibuffer ""))
				      (error nil)))))
			   (if in (insert in "\n")
			     (condition-case nil
				 (progn (delete-char -1))
			       (error nil))))))))
	     (doom-cli--exit
	      (catch 'exit
		(condition-case e
		    (let*
			((args
			  (cons
			   (if (getenv "__DOOMDUMP") :dump prefix)
			   args))
			 (context
			  (doom-cli-context-restore
			   (getenv "__DOOMCONTEXT") context))
			 (context
			  (doom-cli-context-parse args context)))
		      (run-hook-with-args
		       'doom-cli-before-run-functions context)
		      (let
			  ((result (doom-cli-context-execute context)))
			(run-hook-with-args
			 'doom-cli-after-run-functions context result))
		      0)
		  (doom-cli-wrong-number-of-arguments-error
		   (let* ((val (cdr e)))
		     (progn
		       (ignore (consp val))
		       (let*
			   ((x38 (car-safe val)) (x39 (cdr-safe val)))
			 (progn
			   (ignore (consp x39))
			   (let*
			       ((x40 (car-safe x39))
				(x41 (cdr-safe x39)))
			     (progn
			       (ignore (consp x41))
			       (let*
				   ((x42 (car-safe x41))
				    (x43 (cdr-safe x41)))
				 (progn
				   (ignore (consp x43))
				   (let*
				       ((x44 (car-safe x43))
					(x45 (cdr-safe x43)))
				     (progn
				       (ignore (consp x45))
				       (let*
					   ((x46 (car-safe x45))
					    (x47 (cdr-safe x45)))
					 (progn
					   (ignore (null x47))
					   (let
					       ((command x38)
						(flag x40) (args x42)
						(min x44) (max x46))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style
						  'red
						  "Error: %S expected %s argument%s, but got %d")
						 (or flag
						     (doom-cli-command-string
						      (if
							  (keywordp
							   (car
							    command))
							  command
							(cdr command))))
						 (if
						     (or (= min max)
							 (= max
							    most-positive-fixnum))
						     min
						   (format "%d-%d" min
							   max))
						 (if
						     (or (= min 0)
							 (> min 1))
						     "s"
						   "")
						 (length args)))
					       (doom-cli-call
						(cons ':help
						      (cons
						       "--synopsis"
						       (cons
							"--postamble"
							(cdr
							 (doom-cli--command
							  context)))))
						context e)))))))))))))))
		   5)
		  (doom-cli-unrecognized-option-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red
					"Error: unknown option %s")
		     (car (cdr e))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--synopsis"
				(cons "--postamble"
				      (cdr (doom-cli--command context)))))
		    context e)
		   5)
		  (doom-cli-invalid-option-error
		   (let* ((val (cdr e)))
		     (progn
		       (ignore (consp val))
		       (let*
			   ((x48 (car-safe val)) (x49 (cdr-safe val)))
			 (progn
			   (ignore (consp x49))
			   (let*
			       ((x50 (car-safe x49))
				(x51 (cdr-safe x49)))
			     (progn
			       (ignore (consp x51))
			       (let*
				   ((x52 (car-safe x51))
				    (x53 (cdr-safe x51)))
				 (progn
				   (ignore (consp x53))
				   (let*
				       ((x54 (car-safe x53))
					(x55 (cdr-safe x53)))
				     (progn
				       (ignore (null x55))
				       (let
					   ((_types x48) (option x50)
					    (value x52) (errors x54))
					 (progn
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'red
								"Error: %s received invalid value %S")
					     (string-join
					      (let* ((cl-x option))
						(progn
						  (or
						   (let* ((cl-x cl-x))
						     (progn
						       (and
							(memq
							 (type-of cl-x)
							 cl-struct-doom-cli-option-tags)
							t)))
						   (signal
						    'wrong-type-argument
						    (list
						     'doom-cli-option
						     cl-x)))
						  (aref cl-x 5)))
					      "/")
					     value))
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'bold
								"\nValidation errors:")))
					   (let ((tail errors))
					     (while tail
					       (let ((err (car tail)))
						 (doom-print
						  (doom-print--format
						   (doom-print--class
						    'item "%s."
						    (doom-print--class
						     'fill err))))
						 (setq tail (cdr tail)))))))))))))))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--postamble"
				(cdr (doom-cli--command context))))
		    context e)
		   5)
		  (doom-cli-command-not-found-error
		   (let*
		       ((command (cdr e)) (cli (doom-cli-get command)))
		     (cond
		      ((null cli)
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red
					    "Error: unrecognized command: %s")
			 (doom-cli-command-string command)))
		       (doom-cli-call
			(cons ':help
			      (cons "--similar"
				    (cons "--postamble" (cdr command))))
			context e))
		      ((null
			(let* ((cl-x cli))
			  (progn
			    (or
			     (let* ((cl-x cl-x))
			       (progn
				 (and
				  (memq (type-of cl-x)
					cl-struct-doom-cli-tags)
				  t)))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cl-x)))
			    (aref cl-x 9))))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red
					    "Error: a subcommand is required")))
		       (doom-cli-call
			(cons ':help
			      (cons "--subcommands"
				    (cons "--postamble" (cdr command))))
			context e))))
		   4)
		  (doom-cli-invalid-prefix-error
		   (let ((prefix (car (cdr e))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red
					  "Error: `run!' called with invalid prefix %S")
		       prefix))
		     (let*
			 ((suggested
			   (and t
				(let* ((--cl-var-- t) --cl-var--)
				  (catch '--cl-block---cl-finish----
				    (maphash
				     #'(lambda (--cl-var-- cli)
					 (or
					  (if
					      (let* ((cl-x cli))
						(progn
						  (or
						   (let* ((cl-x cl-x))
						     (progn
						       (and
							(memq
							 (type-of cl-x)
							 cl-struct-doom-cli-tags)
							t)))
						   (signal
						    'wrong-type-argument
						    (list 'doom-cli
							  cl-x)))
						  (aref cl-x 2)))
					      t
					    (progn
					      (setq --cl-var--
						    (car
						     (let*
							 ((cl-x cli))
						       (progn
							 (or
							  (let*
							      ((cl-x
								cl-x))
							    (progn
							      (and
							       (memq
								(type-of
								 cl-x)
								cl-struct-doom-cli-tags)
							       t)))
							  (signal
							   'wrong-type-argument
							   (list
							    'doom-cli
							    cl-x)))
							 (aref cl-x 1)))))
					      (setq --cl-var-- nil)))
					  (throw
					   '--cl-block---cl-finish----
					   nil)))
				     doom-cli--table))
				  --cl-var--))))
		       (if suggested
			   (doom-print
			    (doom-print--format "Did you mean %S?"
						suggested))
			 (doom-print
			  (doom-print--format
			   "There are no commands defined under %S."
			   prefix)))))
		   4)
		  (user-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: %s")
		     (car (cdr e))))
		   (doom-print (doom-print--format "\nAborting...")) 3)))
	      context))))
     (fset #'message old)))
 ((prefix . "doom") (args ("--no-color" "install"))
  (args "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (write-logs-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-write-logs-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-benchmark-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (streamspec (>= notice #<buffer  *doom-cli stdout*>)
	      (t . #<buffer  *doom-cli stderr*>))
  (vnew
   . #[(message &rest args)
       ((if message
	    (progn
	      (let
		  ((output (apply #'doom-print--format message args)))
		(if (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let ((tail streams))
		  (while tail
		    (let ((stream (car tail)))
		      (if
			  (or (eq (car stream) t)
			      (funcall (car stream)))
			  (progn
			    (doom-print output :stream (cdr stream))))
		      (setq tail (cdr tail))))))
	      message)))
       ((streams
	 (#[128 "\302\301\303\300\4\"\"\207" [(0 2) >= apply append] 6
		"\n\n(fn &rest ARGS2)"]
	  . #<buffer  *doom-cli stdout*>)
	 (t . #<buffer  *doom-cli stderr*>))
	(old . #<subr message>) (level . debug))])
  (old . #<subr message>)))

;;;; 44
((let
     ((standard-output
       (doom-print--redirect-standard-output streamspec t)))
   (let*
       ((vnew
	 (doom-print--redirect-message streamspec
				       (if noninteractive 'debug
					 'notice)))
	(old (symbol-function #'message)))
     (unwind-protect
	 (progn
	   (fset #'message vnew)
	   (let ((doom-print-stream standard-output))
	     (progn
	       (if
		   (and (not doom-inhibit-log)
			(or (not noninteractive) (<= 2 doom-log-level)))
		   (progn
		     (doom--log 2 "run!: %s %s" prefix
				(combine-and-quote-strings args))))
	       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	       (add-hook 'kill-emacs-hook write-logs-fn 95)
	       (if (doom-cli-context-pipe-p context :out t)
		   (progn (setq doom-print-backend nil)))
	       (if (doom-cli-context-pipe-p context :in)
		   (progn
		     (save-current-buffer
		       (set-buffer
			(let* ((cl-x context))
			  (progn
			    (or
			     (let* ((cl-x cl-x))
			       (progn
				 (and
				  (memq (type-of cl-x)
					cl-struct-doom-cli-context-tags)
				  t)))
			     (signal 'wrong-type-argument
				     (list 'doom-cli-context cl-x)))
			    (aref cl-x 15))))
		       (while
			   (let*
			       ((in
				 (and t
				      (condition-case nil
					  (progn
					    (read-from-minibuffer ""))
					(error nil)))))
			     (if in (insert in "\n")
			       (condition-case nil
				   (progn (delete-char -1))
				 (error nil))))))))
	       (doom-cli--exit
		(catch 'exit
		  (condition-case e
		      (let*
			  ((args
			    (cons
			     (if (getenv "__DOOMDUMP") :dump prefix)
			     args))
			   (context
			    (doom-cli-context-restore
			     (getenv "__DOOMCONTEXT") context))
			   (context
			    (doom-cli-context-parse args context)))
			(run-hook-with-args
			 'doom-cli-before-run-functions context)
			(let
			    ((result
			      (doom-cli-context-execute context)))
			  (run-hook-with-args
			   'doom-cli-after-run-functions context
			   result))
			0)
		    (doom-cli-wrong-number-of-arguments-error
		     (let* ((val (cdr e)))
		       (progn
			 (ignore (consp val))
			 (let*
			     ((x38 (car-safe val))
			      (x39 (cdr-safe val)))
			   (progn
			     (ignore (consp x39))
			     (let*
				 ((x40 (car-safe x39))
				  (x41 (cdr-safe x39)))
			       (progn
				 (ignore (consp x41))
				 (let*
				     ((x42 (car-safe x41))
				      (x43 (cdr-safe x41)))
				   (progn
				     (ignore (consp x43))
				     (let*
					 ((x44 (car-safe x43))
					  (x45 (cdr-safe x43)))
				       (progn
					 (ignore (consp x45))
					 (let*
					     ((x46 (car-safe x45))
					      (x47 (cdr-safe x45)))
					   (progn
					     (ignore (null x47))
					     (let
						 ((command x38)
						  (flag x40)
						  (args x42) (min x44)
						  (max x46))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style
						    'red
						    "Error: %S expected %s argument%s, but got %d")
						   (or flag
						       (doom-cli-command-string
							(if
							    (keywordp
							     (car
							      command))
							    command
							  (cdr command))))
						   (if
						       (or (= min max)
							   (= max
							      most-positive-fixnum))
						       min
						     (format "%d-%d"
							     min max))
						   (if
						       (or (= min 0)
							   (> min 1))
						       "s"
						     "")
						   (length args)))
						 (doom-cli-call
						  (cons ':help
							(cons
							 "--synopsis"
							 (cons
							  "--postamble"
							  (cdr
							   (doom-cli--command
							    context)))))
						  context e)))))))))))))))
		     5)
		    (doom-cli-unrecognized-option-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red
					  "Error: unknown option %s")
		       (car (cdr e))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--synopsis"
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context)))))
		      context e)
		     5)
		    (doom-cli-invalid-option-error
		     (let* ((val (cdr e)))
		       (progn
			 (ignore (consp val))
			 (let*
			     ((x48 (car-safe val))
			      (x49 (cdr-safe val)))
			   (progn
			     (ignore (consp x49))
			     (let*
				 ((x50 (car-safe x49))
				  (x51 (cdr-safe x49)))
			       (progn
				 (ignore (consp x51))
				 (let*
				     ((x52 (car-safe x51))
				      (x53 (cdr-safe x51)))
				   (progn
				     (ignore (consp x53))
				     (let*
					 ((x54 (car-safe x53))
					  (x55 (cdr-safe x53)))
				       (progn
					 (ignore (null x55))
					 (let
					     ((_types x48)
					      (option x50) (value x52)
					      (errors x54))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red
								  "Error: %s received invalid value %S")
					       (string-join
						(let* ((cl-x option))
						  (progn
						    (or
						     (let*
							 ((cl-x cl-x))
						       (progn
							 (and
							  (memq
							   (type-of
							    cl-x)
							   cl-struct-doom-cli-option-tags)
							  t)))
						     (signal
						      'wrong-type-argument
						      (list
						       'doom-cli-option
						       cl-x)))
						    (aref cl-x 5)))
						"/")
					       value))
					     (doom-print
					      (doom-print--format
					       (doom-print--style
						'bold
						"\nValidation errors:")))
					     (let ((tail errors))
					       (while tail
						 (let
						     ((err (car tail)))
						   (doom-print
						    (doom-print--format
						     (doom-print--class
						      'item "%s."
						      (doom-print--class
						       'fill err))))
						   (setq tail
							 (cdr tail)))))))))))))))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--postamble"
				  (cdr (doom-cli--command context))))
		      context e)
		     5)
		    (doom-cli-command-not-found-error
		     (let*
			 ((command (cdr e))
			  (cli (doom-cli-get command)))
		       (cond
			((null cli)
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red
					      "Error: unrecognized command: %s")
			   (doom-cli-command-string command)))
			 (doom-cli-call
			  (cons ':help
				(cons "--similar"
				      (cons "--postamble"
					    (cdr command))))
			  context e))
			((null
			  (let* ((cl-x cli))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cl-x)))
			      (aref cl-x 9))))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red
					      "Error: a subcommand is required")))
			 (doom-cli-call
			  (cons ':help
				(cons "--subcommands"
				      (cons "--postamble"
					    (cdr command))))
			  context e))))
		     4)
		    (doom-cli-invalid-prefix-error
		     (let ((prefix (car (cdr e))))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red
					    "Error: `run!' called with invalid prefix %S")
			 prefix))
		       (let*
			   ((suggested
			     (and t
				  (let* ((--cl-var-- t) --cl-var--)
				    (catch '--cl-block---cl-finish----
				      (maphash
				       #'(lambda (--cl-var-- cli)
					   (or
					    (if
						(let* ((cl-x cli))
						  (progn
						    (or
						     (let*
							 ((cl-x cl-x))
						       (progn
							 (and
							  (memq
							   (type-of
							    cl-x)
							   cl-struct-doom-cli-tags)
							  t)))
						     (signal
						      'wrong-type-argument
						      (list 'doom-cli
							    cl-x)))
						    (aref cl-x 2)))
						t
					      (progn
						(setq --cl-var--
						      (car
						       (let*
							   ((cl-x cli))
							 (progn
							   (or
							    (let*
								((cl-x
								  cl-x))
							      (progn
								(and
								 (memq
								  (type-of
								   cl-x)
								  cl-struct-doom-cli-tags)
								 t)))
							    (signal
							     'wrong-type-argument
							     (list
							      'doom-cli
							      cl-x)))
							   (aref cl-x
								 1)))))
						(setq --cl-var-- nil)))
					    (throw
					     '--cl-block---cl-finish----
					     nil)))
				       doom-cli--table))
				    --cl-var--))))
			 (if suggested
			     (doom-print
			      (doom-print--format "Did you mean %S?"
						  suggested))
			   (doom-print
			    (doom-print--format
			     "There are no commands defined under %S."
			     prefix)))))
		     4)
		    (user-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: %s")
		       (car (cdr e))))
		     (doom-print (doom-print--format "\nAborting..."))
		     3)))
		context))))
       (fset #'message old))))
 ((standard-output
   . #[(ch)
       ((let ((str (char-to-string ch)))
	  (let ((tail streams))
	    (while tail
	      (let ((stream (car tail)))
		(if (or (eq (car stream) t) (funcall (car stream)))
		    (progn
		      (doom-print str :newline nil :stream
				  (cdr stream))))
		(setq tail (cdr tail)))))
	  (doom-print str :newline nil :stream t :level level)))
       ((streams (t . #<buffer  *doom-cli stdout*>)
		 (t . #<buffer  *doom-cli stderr*>))
	(level . t))])))

;;;; 45
((let
     ((streamspec
       (list
	(list '>= 'notice
	      (let* ((cl-x doomctxt))
		(progn
		  (or
		   (let* ((cl-x cl-x))
		     (progn
		       (and
			(memq (type-of cl-x)
			      cl-struct-doom-cli-context-tags)
			t)))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context cl-x)))
		  (aref cl-x 16))))
	(cons t
	      (let* ((cl-x doomctxt))
		(progn
		  (or
		   (let* ((cl-x cl-x))
		     (progn
		       (and
			(memq (type-of cl-x)
			      cl-struct-doom-cli-context-tags)
			t)))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context cl-x)))
		  (aref cl-x 17)))))))
   (let
       ((standard-output
	 (doom-print--redirect-standard-output streamspec t)))
     (let*
	 ((vnew
	   (doom-print--redirect-message streamspec
					 (if noninteractive 'debug
					   'notice)))
	  (old (symbol-function #'message)))
       (unwind-protect
	   (progn
	     (fset #'message vnew)
	     (let ((doom-print-stream standard-output))
	       (progn
		 (if
		     (and (not doom-inhibit-log)
			  (or (not noninteractive)
			      (<= 2 doom-log-level)))
		     (progn
		       (doom--log 2 "run!: %s %s" prefix
				  (combine-and-quote-strings args))))
		 (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		 (add-hook 'kill-emacs-hook write-logs-fn 95)
		 (if (doom-cli-context-pipe-p context :out t)
		     (progn (setq doom-print-backend nil)))
		 (if (doom-cli-context-pipe-p context :in)
		     (progn
		       (save-current-buffer
			 (set-buffer
			  (let* ((cl-x context))
			    (progn
			      (or
			       (let* ((cl-x cl-x))
				 (progn
				   (and
				    (memq (type-of cl-x)
					  cl-struct-doom-cli-context-tags)
				    t)))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context cl-x)))
			      (aref cl-x 15))))
			 (while
			     (let*
				 ((in
				   (and t
					(condition-case nil
					    (progn
					      (read-from-minibuffer ""))
					  (error nil)))))
			       (if in (insert in "\n")
				 (condition-case nil
				     (progn (delete-char -1))
				   (error nil))))))))
		 (doom-cli--exit
		  (catch 'exit
		    (condition-case e
			(let*
			    ((args
			      (cons
			       (if (getenv "__DOOMDUMP") :dump prefix)
			       args))
			     (context
			      (doom-cli-context-restore
			       (getenv "__DOOMCONTEXT") context))
			     (context
			      (doom-cli-context-parse args context)))
			  (run-hook-with-args
			   'doom-cli-before-run-functions context)
			  (let
			      ((result
				(doom-cli-context-execute context)))
			    (run-hook-with-args
			     'doom-cli-after-run-functions context
			     result))
			  0)
		      (doom-cli-wrong-number-of-arguments-error
		       (let* ((val (cdr e)))
			 (progn
			   (ignore (consp val))
			   (let*
			       ((x38 (car-safe val))
				(x39 (cdr-safe val)))
			     (progn
			       (ignore (consp x39))
			       (let*
				   ((x40 (car-safe x39))
				    (x41 (cdr-safe x39)))
				 (progn
				   (ignore (consp x41))
				   (let*
				       ((x42 (car-safe x41))
					(x43 (cdr-safe x41)))
				     (progn
				       (ignore (consp x43))
				       (let*
					   ((x44 (car-safe x43))
					    (x45 (cdr-safe x43)))
					 (progn
					   (ignore (consp x45))
					   (let*
					       ((x46 (car-safe x45))
						(x47 (cdr-safe x45)))
					     (progn
					       (ignore (null x47))
					       (let
						   ((command x38)
						    (flag x40)
						    (args x42)
						    (min x44)
						    (max x46))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style
						      'red
						      "Error: %S expected %s argument%s, but got %d")
						     (or flag
							 (doom-cli-command-string
							  (if
							      (keywordp
							       (car
								command))
							      command
							    (cdr
							     command))))
						     (if
							 (or
							  (= min max)
							  (= max
							     most-positive-fixnum))
							 min
						       (format "%d-%d"
							       min max))
						     (if
							 (or (= min 0)
							     (> min 1))
							 "s"
						       "")
						     (length args)))
						   (doom-cli-call
						    (cons ':help
							  (cons
							   "--synopsis"
							   (cons
							    "--postamble"
							    (cdr
							     (doom-cli--command
							      context)))))
						    context e)))))))))))))))
		       5)
		      (doom-cli-unrecognized-option-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red
					    "Error: unknown option %s")
			 (car (cdr e))))
		       (doom-cli-call
			(cons ':help
			      (cons "--synopsis"
				    (cons "--postamble"
					  (cdr
					   (doom-cli--command context)))))
			context e)
		       5)
		      (doom-cli-invalid-option-error
		       (let* ((val (cdr e)))
			 (progn
			   (ignore (consp val))
			   (let*
			       ((x48 (car-safe val))
				(x49 (cdr-safe val)))
			     (progn
			       (ignore (consp x49))
			       (let*
				   ((x50 (car-safe x49))
				    (x51 (cdr-safe x49)))
				 (progn
				   (ignore (consp x51))
				   (let*
				       ((x52 (car-safe x51))
					(x53 (cdr-safe x51)))
				     (progn
				       (ignore (consp x53))
				       (let*
					   ((x54 (car-safe x53))
					    (x55 (cdr-safe x53)))
					 (progn
					   (ignore (null x55))
					   (let
					       ((_types x48)
						(option x50)
						(value x52)
						(errors x54))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style
						  'red
						  "Error: %s received invalid value %S")
						 (string-join
						  (let*
						      ((cl-x option))
						    (progn
						      (or
						       (let*
							   ((cl-x cl-x))
							 (progn
							   (and
							    (memq
							     (type-of
							      cl-x)
							     cl-struct-doom-cli-option-tags)
							    t)))
						       (signal
							'wrong-type-argument
							(list
							 'doom-cli-option
							 cl-x)))
						      (aref cl-x 5)))
						  "/")
						 value))
					       (doom-print
						(doom-print--format
						 (doom-print--style
						  'bold
						  "\nValidation errors:")))
					       (let ((tail errors))
						 (while tail
						   (let
						       ((err
							 (car tail)))
						     (doom-print
						      (doom-print--format
						       (doom-print--class
							'item "%s."
							(doom-print--class
							 'fill err))))
						     (setq tail
							   (cdr tail)))))))))))))))))
		       (doom-cli-call
			(cons ':help
			      (cons "--postamble"
				    (cdr (doom-cli--command context))))
			context e)
		       5)
		      (doom-cli-command-not-found-error
		       (let*
			   ((command (cdr e))
			    (cli (doom-cli-get command)))
			 (cond
			  ((null cli)
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red
						"Error: unrecognized command: %s")
			     (doom-cli-command-string command)))
			   (doom-cli-call
			    (cons ':help
				  (cons "--similar"
					(cons "--postamble"
					      (cdr command))))
			    context e))
			  ((null
			    (let* ((cl-x cli))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli cl-x)))
				(aref cl-x 9))))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red
						"Error: a subcommand is required")))
			   (doom-cli-call
			    (cons ':help
				  (cons "--subcommands"
					(cons "--postamble"
					      (cdr command))))
			    context e))))
		       4)
		      (doom-cli-invalid-prefix-error
		       (let ((prefix (car (cdr e))))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red
					      "Error: `run!' called with invalid prefix %S")
			   prefix))
			 (let*
			     ((suggested
			       (and t
				    (let* ((--cl-var-- t) --cl-var--)
				      (catch
					  '--cl-block---cl-finish----
					(maphash
					 #'(lambda (--cl-var-- cli)
					     (or
					      (if
						  (let* ((cl-x cli))
						    (progn
						      (or
						       (let*
							   ((cl-x cl-x))
							 (progn
							   (and
							    (memq
							     (type-of
							      cl-x)
							     cl-struct-doom-cli-tags)
							    t)))
						       (signal
							'wrong-type-argument
							(list
							 'doom-cli
							 cl-x)))
						      (aref cl-x 2)))
						  t
						(progn
						  (setq --cl-var--
							(car
							 (let*
							     ((cl-x
							       cli))
							   (progn
							     (or
							      (let*
								  ((cl-x
								    cl-x))
								(progn
								  (and
								   (memq
								    (type-of
								     cl-x)
								    cl-struct-doom-cli-tags)
								   t)))
							      (signal
							       'wrong-type-argument
							       (list
								'doom-cli
								cl-x)))
							     (aref
							      cl-x 1)))))
						  (setq --cl-var-- nil)))
					      (throw
					       '--cl-block---cl-finish----
					       nil)))
					 doom-cli--table))
				      --cl-var--))))
			   (if suggested
			       (doom-print
				(doom-print--format "Did you mean %S?"
						    suggested))
			     (doom-print
			      (doom-print--format
			       "There are no commands defined under %S."
			       prefix)))))
		       4)
		      (user-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: %s")
			 (car (cdr e))))
		       (doom-print
			(doom-print--format "\nAborting..."))
		       3)))
		  context))))
	 (fset #'message old)))))
 ((prefix . "doom") (args ("--no-color" "install"))
  (args "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (write-logs-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-write-logs-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-benchmark-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (streamspec (>= notice #<buffer  *doom-cli stdout*>)
	      (t . #<buffer  *doom-cli stderr*>))))

;;;; 46
((let*
     ((doomctxt context)
      (debugger (doom-rpartial #'doom-cli-debugger doomctxt))
      (debug-on-error t))
   (let
       ((streamspec
	 (list
	  (list '>= 'notice
		(let* ((cl-x doomctxt))
		  (progn
		    (or
		     (let* ((cl-x cl-x))
		       (progn
			 (and
			  (memq (type-of cl-x)
				cl-struct-doom-cli-context-tags)
			  t)))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context cl-x)))
		    (aref cl-x 16))))
	  (cons t
		(let* ((cl-x doomctxt))
		  (progn
		    (or
		     (let* ((cl-x cl-x))
		       (progn
			 (and
			  (memq (type-of cl-x)
				cl-struct-doom-cli-context-tags)
			  t)))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context cl-x)))
		    (aref cl-x 17)))))))
     (let
	 ((standard-output
	   (doom-print--redirect-standard-output streamspec t)))
       (let*
	   ((vnew
	     (doom-print--redirect-message streamspec
					   (if noninteractive 'debug
					     'notice)))
	    (old (symbol-function #'message)))
	 (unwind-protect
	     (progn
	       (fset #'message vnew)
	       (let ((doom-print-stream standard-output))
		 (progn
		   (if
		       (and (not doom-inhibit-log)
			    (or (not noninteractive)
				(<= 2 doom-log-level)))
		       (progn
			 (doom--log 2 "run!: %s %s" prefix
				    (combine-and-quote-strings args))))
		   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		   (add-hook 'kill-emacs-hook write-logs-fn 95)
		   (if (doom-cli-context-pipe-p context :out t)
		       (progn (setq doom-print-backend nil)))
		   (if (doom-cli-context-pipe-p context :in)
		       (progn
			 (save-current-buffer
			   (set-buffer
			    (let* ((cl-x context))
			      (progn
				(or
				 (let* ((cl-x cl-x))
				   (progn
				     (and
				      (memq (type-of cl-x)
					    cl-struct-doom-cli-context-tags)
				      t)))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context cl-x)))
				(aref cl-x 15))))
			   (while
			       (let*
				   ((in
				     (and t
					  (condition-case nil
					      (progn
						(read-from-minibuffer
						 ""))
					    (error nil)))))
				 (if in (insert in "\n")
				   (condition-case nil
				       (progn (delete-char -1))
				     (error nil))))))))
		   (doom-cli--exit
		    (catch 'exit
		      (condition-case e
			  (let*
			      ((args
				(cons
				 (if (getenv "__DOOMDUMP") :dump
				   prefix)
				 args))
			       (context
				(doom-cli-context-restore
				 (getenv "__DOOMCONTEXT") context))
			       (context
				(doom-cli-context-parse args context)))
			    (run-hook-with-args
			     'doom-cli-before-run-functions context)
			    (let
				((result
				  (doom-cli-context-execute context)))
			      (run-hook-with-args
			       'doom-cli-after-run-functions context
			       result))
			    0)
			(doom-cli-wrong-number-of-arguments-error
			 (let* ((val (cdr e)))
			   (progn
			     (ignore (consp val))
			     (let*
				 ((x38 (car-safe val))
				  (x39 (cdr-safe val)))
			       (progn
				 (ignore (consp x39))
				 (let*
				     ((x40 (car-safe x39))
				      (x41 (cdr-safe x39)))
				   (progn
				     (ignore (consp x41))
				     (let*
					 ((x42 (car-safe x41))
					  (x43 (cdr-safe x41)))
				       (progn
					 (ignore (consp x43))
					 (let*
					     ((x44 (car-safe x43))
					      (x45 (cdr-safe x43)))
					   (progn
					     (ignore (consp x45))
					     (let*
						 ((x46 (car-safe x45))
						  (x47 (cdr-safe x45)))
					       (progn
						 (ignore (null x47))
						 (let
						     ((command x38)
						      (flag x40)
						      (args x42)
						      (min x44)
						      (max x46))
						   (progn
						     (doom-print
						      (doom-print--format
						       (doom-print--style
							'red
							"Error: %S expected %s argument%s, but got %d")
						       (or flag
							   (doom-cli-command-string
							    (if
								(keywordp
								 (car
								  command))
								command
							      (cdr
							       command))))
						       (if
							   (or
							    (= min max)
							    (= max
							       most-positive-fixnum))
							   min
							 (format
							  "%d-%d" min
							  max))
						       (if
							   (or
							    (= min 0)
							    (> min 1))
							   "s"
							 "")
						       (length args)))
						     (doom-cli-call
						      (cons ':help
							    (cons
							     "--synopsis"
							     (cons
							      "--postamble"
							      (cdr
							       (doom-cli--command
								context)))))
						      context e)))))))))))))))
			 5)
			(doom-cli-unrecognized-option-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red
					      "Error: unknown option %s")
			   (car (cdr e))))
			 (doom-cli-call
			  (cons ':help
				(cons "--synopsis"
				      (cons "--postamble"
					    (cdr
					     (doom-cli--command
					      context)))))
			  context e)
			 5)
			(doom-cli-invalid-option-error
			 (let* ((val (cdr e)))
			   (progn
			     (ignore (consp val))
			     (let*
				 ((x48 (car-safe val))
				  (x49 (cdr-safe val)))
			       (progn
				 (ignore (consp x49))
				 (let*
				     ((x50 (car-safe x49))
				      (x51 (cdr-safe x49)))
				   (progn
				     (ignore (consp x51))
				     (let*
					 ((x52 (car-safe x51))
					  (x53 (cdr-safe x51)))
				       (progn
					 (ignore (consp x53))
					 (let*
					     ((x54 (car-safe x53))
					      (x55 (cdr-safe x53)))
					   (progn
					     (ignore (null x55))
					     (let
						 ((_types x48)
						  (option x50)
						  (value x52)
						  (errors x54))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style
						    'red
						    "Error: %s received invalid value %S")
						   (string-join
						    (let*
							((cl-x option))
						      (progn
							(or
							 (let*
							     ((cl-x
							       cl-x))
							   (progn
							     (and
							      (memq
							       (type-of
								cl-x)
							       cl-struct-doom-cli-option-tags)
							      t)))
							 (signal
							  'wrong-type-argument
							  (list
							   'doom-cli-option
							   cl-x)))
							(aref cl-x 5)))
						    "/")
						   value))
						 (doom-print
						  (doom-print--format
						   (doom-print--style
						    'bold
						    "\nValidation errors:")))
						 (let ((tail errors))
						   (while tail
						     (let
							 ((err
							   (car tail)))
						       (doom-print
							(doom-print--format
							 (doom-print--class
							  'item "%s."
							  (doom-print--class
							   'fill err))))
						       (setq tail
							     (cdr tail)))))))))))))))))
			 (doom-cli-call
			  (cons ':help
				(cons "--postamble"
				      (cdr (doom-cli--command context))))
			  context e)
			 5)
			(doom-cli-command-not-found-error
			 (let*
			     ((command (cdr e))
			      (cli (doom-cli-get command)))
			   (cond
			    ((null cli)
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red
						  "Error: unrecognized command: %s")
			       (doom-cli-command-string command)))
			     (doom-cli-call
			      (cons ':help
				    (cons "--similar"
					  (cons "--postamble"
						(cdr command))))
			      context e))
			    ((null
			      (let* ((cl-x cli))
				(progn
				  (or
				   (let* ((cl-x cl-x))
				     (progn
				       (and
					(memq (type-of cl-x)
					      cl-struct-doom-cli-tags)
					t)))
				   (signal 'wrong-type-argument
					   (list 'doom-cli cl-x)))
				  (aref cl-x 9))))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red
						  "Error: a subcommand is required")))
			     (doom-cli-call
			      (cons ':help
				    (cons "--subcommands"
					  (cons "--postamble"
						(cdr command))))
			      context e))))
			 4)
			(doom-cli-invalid-prefix-error
			 (let ((prefix (car (cdr e))))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red
						"Error: `run!' called with invalid prefix %S")
			     prefix))
			   (let*
			       ((suggested
				 (and t
				      (let*
					  ((--cl-var-- t) --cl-var--)
					(catch
					    '--cl-block---cl-finish----
					  (maphash
					   #'(lambda (--cl-var-- cli)
					       (or
						(if
						    (let* ((cl-x cli))
						      (progn
							(or
							 (let*
							     ((cl-x
							       cl-x))
							   (progn
							     (and
							      (memq
							       (type-of
								cl-x)
							       cl-struct-doom-cli-tags)
							      t)))
							 (signal
							  'wrong-type-argument
							  (list
							   'doom-cli
							   cl-x)))
							(aref cl-x 2)))
						    t
						  (progn
						    (setq --cl-var--
							  (car
							   (let*
							       ((cl-x
								 cli))
							     (progn
							       (or
								(let*
								    ((cl-x
								      cl-x))
								  (progn
								    (and
								     (memq
								      (type-of
								       cl-x)
								      cl-struct-doom-cli-tags)
								     t)))
								(signal
								 'wrong-type-argument
								 (list
								  'doom-cli
								  cl-x)))
							       (aref
								cl-x 1)))))
						    (setq --cl-var--
							  nil)))
						(throw
						 '--cl-block---cl-finish----
						 nil)))
					   doom-cli--table))
					--cl-var--))))
			     (if suggested
				 (doom-print
				  (doom-print--format
				   "Did you mean %S?" suggested))
			       (doom-print
				(doom-print--format
				 "There are no commands defined under %S."
				 prefix)))))
			 4)
			(user-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: %s")
			   (car (cdr e))))
			 (doom-print
			  (doom-print--format "\nAborting..."))
			 3)))
		    context))))
	   (fset #'message old))))))
 ((prefix . "doom") (args ("--no-color" "install"))
  (args "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (write-logs-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-write-logs-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-benchmark-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (debugger
   . #[(&rest pre-args) ((apply fn (append pre-args args)))
       ((args
	 #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30)
			     nil nil "doom" nil nil ("doom" "env") nil
			     ("--no-color" "install")
			     (("--deny") ("-d") ("--allow") ("-a")
			      ("-o") ("--deny-all") ("--allow-all")
			      ("--hooks") ("--fonts") ("--install")
			      ("--env") ("--config") ("--aot")
			      ("--eval") ("-E") ("--strict-load")
			      ("--load") ("-L") ("--color" . :no)
			      ("--benchmark") ("--profile")
			      ("--pager") ("--emacsdir") ("--doomdir")
			      ("--verbose") ("-v") ("--debug") ("-D")
			      ("--force") ("-!"))
			     ((t) (("doom" "env")) (("doom") "env"))
			     #<buffer  *doom-cli stdin*> #<buffer
			     *doom-cli stdout*> #<buffer  *doom-cli
			     stderr*> nil))
	(fn . doom-cli-debugger))])
  (debug-on-error . t)))

;;;; 47
((let*
     ((args (flatten-list args))
      (context (make-doom-cli-context :prefix prefix :whole args))
      (doom-cli--context context)
      (write-logs-fn
       (doom-partial #'doom-cli--output-write-logs-h context))
      (show-benchmark-fn
       (doom-partial #'doom-cli--output-benchmark-h context)))
   (let*
       ((doomctxt context)
	(debugger (doom-rpartial #'doom-cli-debugger doomctxt))
	(debug-on-error t))
     (let
	 ((streamspec
	   (list
	    (list '>= 'notice
		  (let* ((cl-x doomctxt))
		    (progn
		      (or
		       (let* ((cl-x cl-x))
			 (progn
			   (and
			    (memq (type-of cl-x)
				  cl-struct-doom-cli-context-tags)
			    t)))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context cl-x)))
		      (aref cl-x 16))))
	    (cons t
		  (let* ((cl-x doomctxt))
		    (progn
		      (or
		       (let* ((cl-x cl-x))
			 (progn
			   (and
			    (memq (type-of cl-x)
				  cl-struct-doom-cli-context-tags)
			    t)))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context cl-x)))
		      (aref cl-x 17)))))))
       (let
	   ((standard-output
	     (doom-print--redirect-standard-output streamspec t)))
	 (let*
	     ((vnew
	       (doom-print--redirect-message streamspec
					     (if noninteractive 'debug
					       'notice)))
	      (old (symbol-function #'message)))
	   (unwind-protect
	       (progn
		 (fset #'message vnew)
		 (let ((doom-print-stream standard-output))
		   (progn
		     (if
			 (and (not doom-inhibit-log)
			      (or (not noninteractive)
				  (<= 2 doom-log-level)))
			 (progn
			   (doom--log 2 "run!: %s %s" prefix
				      (combine-and-quote-strings args))))
		     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		     (add-hook 'kill-emacs-hook write-logs-fn 95)
		     (if (doom-cli-context-pipe-p context :out t)
			 (progn (setq doom-print-backend nil)))
		     (if (doom-cli-context-pipe-p context :in)
			 (progn
			   (save-current-buffer
			     (set-buffer
			      (let* ((cl-x context))
				(progn
				  (or
				   (let* ((cl-x cl-x))
				     (progn
				       (and
					(memq (type-of cl-x)
					      cl-struct-doom-cli-context-tags)
					t)))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context
						 cl-x)))
				  (aref cl-x 15))))
			     (while
				 (let*
				     ((in
				       (and t
					    (condition-case nil
						(progn
						  (read-from-minibuffer
						   ""))
					      (error nil)))))
				   (if in (insert in "\n")
				     (condition-case nil
					 (progn (delete-char -1))
				       (error nil))))))))
		     (doom-cli--exit
		      (catch 'exit
			(condition-case e
			    (let*
				((args
				  (cons
				   (if (getenv "__DOOMDUMP") :dump
				     prefix)
				   args))
				 (context
				  (doom-cli-context-restore
				   (getenv "__DOOMCONTEXT") context))
				 (context
				  (doom-cli-context-parse args context)))
			      (run-hook-with-args
			       'doom-cli-before-run-functions context)
			      (let
				  ((result
				    (doom-cli-context-execute context)))
				(run-hook-with-args
				 'doom-cli-after-run-functions context
				 result))
			      0)
			  (doom-cli-wrong-number-of-arguments-error
			   (let* ((val (cdr e)))
			     (progn
			       (ignore (consp val))
			       (let*
				   ((x38 (car-safe val))
				    (x39 (cdr-safe val)))
				 (progn
				   (ignore (consp x39))
				   (let*
				       ((x40 (car-safe x39))
					(x41 (cdr-safe x39)))
				     (progn
				       (ignore (consp x41))
				       (let*
					   ((x42 (car-safe x41))
					    (x43 (cdr-safe x41)))
					 (progn
					   (ignore (consp x43))
					   (let*
					       ((x44 (car-safe x43))
						(x45 (cdr-safe x43)))
					     (progn
					       (ignore (consp x45))
					       (let*
						   ((x46
						     (car-safe x45))
						    (x47
						     (cdr-safe x45)))
						 (progn
						   (ignore (null x47))
						   (let
						       ((command x38)
							(flag x40)
							(args x42)
							(min x44)
							(max x46))
						     (progn
						       (doom-print
							(doom-print--format
							 (doom-print--style
							  'red
							  "Error: %S expected %s argument%s, but got %d")
							 (or flag
							     (doom-cli-command-string
							      (if
								  (keywordp
								   (car
								    command))
								  command
								(cdr
								 command))))
							 (if
							     (or
							      (= min
								 max)
							      (= max
								 most-positive-fixnum))
							     min
							   (format
							    "%d-%d"
							    min max))
							 (if
							     (or
							      (= min 0)
							      (> min 1))
							     "s"
							   "")
							 (length args)))
						       (doom-cli-call
							(cons ':help
							      (cons
							       "--synopsis"
							       (cons
								"--postamble"
								(cdr
								 (doom-cli--command
								  context)))))
							context e)))))))))))))))
			   5)
			  (doom-cli-unrecognized-option-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red
						"Error: unknown option %s")
			     (car (cdr e))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--synopsis"
					(cons "--postamble"
					      (cdr
					       (doom-cli--command
						context)))))
			    context e)
			   5)
			  (doom-cli-invalid-option-error
			   (let* ((val (cdr e)))
			     (progn
			       (ignore (consp val))
			       (let*
				   ((x48 (car-safe val))
				    (x49 (cdr-safe val)))
				 (progn
				   (ignore (consp x49))
				   (let*
				       ((x50 (car-safe x49))
					(x51 (cdr-safe x49)))
				     (progn
				       (ignore (consp x51))
				       (let*
					   ((x52 (car-safe x51))
					    (x53 (cdr-safe x51)))
					 (progn
					   (ignore (consp x53))
					   (let*
					       ((x54 (car-safe x53))
						(x55 (cdr-safe x53)))
					     (progn
					       (ignore (null x55))
					       (let
						   ((_types x48)
						    (option x50)
						    (value x52)
						    (errors x54))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style
						      'red
						      "Error: %s received invalid value %S")
						     (string-join
						      (let*
							  ((cl-x
							    option))
							(progn
							  (or
							   (let*
							       ((cl-x
								 cl-x))
							     (progn
							       (and
								(memq
								 (type-of
								  cl-x)
								 cl-struct-doom-cli-option-tags)
								t)))
							   (signal
							    'wrong-type-argument
							    (list
							     'doom-cli-option
							     cl-x)))
							  (aref cl-x 5)))
						      "/")
						     value))
						   (doom-print
						    (doom-print--format
						     (doom-print--style
						      'bold
						      "\nValidation errors:")))
						   (let
						       ((tail errors))
						     (while tail
						       (let
							   ((err
							     (car tail)))
							 (doom-print
							  (doom-print--format
							   (doom-print--class
							    'item
							    "%s."
							    (doom-print--class
							     'fill err))))
							 (setq tail
							       (cdr
								tail)))))))))))))))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context))))
			    context e)
			   5)
			  (doom-cli-command-not-found-error
			   (let*
			       ((command (cdr e))
				(cli (doom-cli-get command)))
			     (cond
			      ((null cli)
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red
						    "Error: unrecognized command: %s")
				 (doom-cli-command-string command)))
			       (doom-cli-call
				(cons ':help
				      (cons "--similar"
					    (cons "--postamble"
						  (cdr command))))
				context e))
			      ((null
				(let* ((cl-x cli))
				  (progn
				    (or
				     (let* ((cl-x cl-x))
				       (progn
					 (and
					  (memq (type-of cl-x)
						cl-struct-doom-cli-tags)
					  t)))
				     (signal 'wrong-type-argument
					     (list 'doom-cli cl-x)))
				    (aref cl-x 9))))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red
						    "Error: a subcommand is required")))
			       (doom-cli-call
				(cons ':help
				      (cons "--subcommands"
					    (cons "--postamble"
						  (cdr command))))
				context e))))
			   4)
			  (doom-cli-invalid-prefix-error
			   (let ((prefix (car (cdr e))))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red
						  "Error: `run!' called with invalid prefix %S")
			       prefix))
			     (let*
				 ((suggested
				   (and t
					(let*
					    ((--cl-var-- t) --cl-var--)
					  (catch
					      '--cl-block---cl-finish----
					    (maphash
					     #'(lambda
						 (--cl-var-- cli)
						 (or
						  (if
						      (let*
							  ((cl-x cli))
							(progn
							  (or
							   (let*
							       ((cl-x
								 cl-x))
							     (progn
							       (and
								(memq
								 (type-of
								  cl-x)
								 cl-struct-doom-cli-tags)
								t)))
							   (signal
							    'wrong-type-argument
							    (list
							     'doom-cli
							     cl-x)))
							  (aref cl-x 2)))
						      t
						    (progn
						      (setq --cl-var--
							    (car
							     (let*
								 ((cl-x
								   cli))
							       (progn
								 (or
								  (let*
								      ((cl-x
									cl-x))
								    (progn
								      (and
								       (memq
									(type-of
									 cl-x)
									cl-struct-doom-cli-tags)
								       t)))
								  (signal
								   'wrong-type-argument
								   (list
								    'doom-cli
								    cl-x)))
								 (aref
								  cl-x
								  1)))))
						      (setq --cl-var--
							    nil)))
						  (throw
						   '--cl-block---cl-finish----
						   nil)))
					     doom-cli--table))
					  --cl-var--))))
			       (if suggested
				   (doom-print
				    (doom-print--format
				     "Did you mean %S?" suggested))
				 (doom-print
				  (doom-print--format
				   "There are no commands defined under %S."
				   prefix)))))
			   4)
			  (user-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: %s")
			     (car (cdr e))))
			   (doom-print
			    (doom-print--format "\nAborting..."))
			   3)))
		      context))))
	     (fset #'message old)))))))
 ((prefix . "doom") (args ("--no-color" "install"))
  (args "--no-color" "install")
  (context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))
  (write-logs-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-write-logs-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn
   . #[128 "\302\301\303\300\4\"\"\207"
	   [(#s(doom-cli-context (26702 22153 864305 0) 10776 0
				 (120 . 30) nil nil "doom" nil nil
				 ("doom" "env") nil
				 ("--no-color" "install")
				 (("--deny") ("-d") ("--allow") ("-a")
				  ("-o") ("--deny-all")
				  ("--allow-all") ("--hooks")
				  ("--fonts") ("--install") ("--env")
				  ("--config") ("--aot") ("--eval")
				  ("-E") ("--strict-load") ("--load")
				  ("-L") ("--color" . :no)
				  ("--benchmark") ("--profile")
				  ("--pager") ("--emacsdir")
				  ("--doomdir") ("--verbose") ("-v")
				  ("--debug") ("-D") ("--force")
				  ("-!"))
				 ((t) (("doom" "env"))
				  (("doom") "env"))
				 #<buffer  *doom-cli stdin*> #<buffer
				 *doom-cli stdout*> #<buffer
				 *doom-cli stderr*> nil))
	    doom-cli--output-benchmark-h apply append]
	   6 "\n\n(fn &rest ARGS2)"])
  (doom-cli--context
   . #s(doom-cli-context (26702 22153 864305 0) 10776 0 (120 . 30) nil
			 nil "doom" nil nil ("doom" "env") nil
			 ("--no-color" "install")
			 (("--deny") ("-d") ("--allow") ("-a") ("-o")
			  ("--deny-all") ("--allow-all") ("--hooks")
			  ("--fonts") ("--install") ("--env")
			  ("--config") ("--aot") ("--eval") ("-E")
			  ("--strict-load") ("--load") ("-L")
			  ("--color" . :no) ("--benchmark")
			  ("--profile") ("--pager") ("--emacsdir")
			  ("--doomdir") ("--verbose") ("-v")
			  ("--debug") ("-D") ("--force") ("-!"))
			 ((t) (("doom" "env")) (("doom") "env"))
			 #<buffer  *doom-cli stdin*> #<buffer
			 *doom-cli stdout*> #<buffer  *doom-cli
			 stderr*> nil))))

;;;; 48
((let ((doom-context doom-context))
   (doom-context-push 'run)
   (let*
       ((args (flatten-list args))
	(context (make-doom-cli-context :prefix prefix :whole args))
	(doom-cli--context context)
	(write-logs-fn
	 (doom-partial #'doom-cli--output-write-logs-h context))
	(show-benchmark-fn
	 (doom-partial #'doom-cli--output-benchmark-h context)))
     (let*
	 ((doomctxt context)
	  (debugger (doom-rpartial #'doom-cli-debugger doomctxt))
	  (debug-on-error t))
       (let
	   ((streamspec
	     (list
	      (list '>= 'notice
		    (let* ((cl-x doomctxt))
		      (progn
			(or
			 (let* ((cl-x cl-x))
			   (progn
			     (and
			      (memq (type-of cl-x)
				    cl-struct-doom-cli-context-tags)
			      t)))
			 (signal 'wrong-type-argument
				 (list 'doom-cli-context cl-x)))
			(aref cl-x 16))))
	      (cons t
		    (let* ((cl-x doomctxt))
		      (progn
			(or
			 (let* ((cl-x cl-x))
			   (progn
			     (and
			      (memq (type-of cl-x)
				    cl-struct-doom-cli-context-tags)
			      t)))
			 (signal 'wrong-type-argument
				 (list 'doom-cli-context cl-x)))
			(aref cl-x 17)))))))
	 (let
	     ((standard-output
	       (doom-print--redirect-standard-output streamspec t)))
	   (let*
	       ((vnew
		 (doom-print--redirect-message streamspec
					       (if noninteractive
						   'debug
						 'notice)))
		(old (symbol-function #'message)))
	     (unwind-protect
		 (progn
		   (fset #'message vnew)
		   (let ((doom-print-stream standard-output))
		     (progn
		       (if
			   (and (not doom-inhibit-log)
				(or (not noninteractive)
				    (<= 2 doom-log-level)))
			   (progn
			     (doom--log 2 "run!: %s %s" prefix
					(combine-and-quote-strings
					 args))))
		       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		       (add-hook 'kill-emacs-hook write-logs-fn 95)
		       (if (doom-cli-context-pipe-p context :out t)
			   (progn (setq doom-print-backend nil)))
		       (if (doom-cli-context-pipe-p context :in)
			   (progn
			     (save-current-buffer
			       (set-buffer
				(let* ((cl-x context))
				  (progn
				    (or
				     (let* ((cl-x cl-x))
				       (progn
					 (and
					  (memq (type-of cl-x)
						cl-struct-doom-cli-context-tags)
					  t)))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context
						   cl-x)))
				    (aref cl-x 15))))
			       (while
				   (let*
				       ((in
					 (and t
					      (condition-case nil
						  (progn
						    (read-from-minibuffer
						     ""))
						(error nil)))))
				     (if in (insert in "\n")
				       (condition-case nil
					   (progn (delete-char -1))
					 (error nil))))))))
		       (doom-cli--exit
			(catch 'exit
			  (condition-case e
			      (let*
				  ((args
				    (cons
				     (if (getenv "__DOOMDUMP") :dump
				       prefix)
				     args))
				   (context
				    (doom-cli-context-restore
				     (getenv "__DOOMCONTEXT") context))
				   (context
				    (doom-cli-context-parse args
							    context)))
				(run-hook-with-args
				 'doom-cli-before-run-functions
				 context)
				(let
				    ((result
				      (doom-cli-context-execute
				       context)))
				  (run-hook-with-args
				   'doom-cli-after-run-functions
				   context result))
				0)
			    (doom-cli-wrong-number-of-arguments-error
			     (let* ((val (cdr e)))
			       (progn
				 (ignore (consp val))
				 (let*
				     ((x38 (car-safe val))
				      (x39 (cdr-safe val)))
				   (progn
				     (ignore (consp x39))
				     (let*
					 ((x40 (car-safe x39))
					  (x41 (cdr-safe x39)))
				       (progn
					 (ignore (consp x41))
					 (let*
					     ((x42 (car-safe x41))
					      (x43 (cdr-safe x41)))
					   (progn
					     (ignore (consp x43))
					     (let*
						 ((x44 (car-safe x43))
						  (x45 (cdr-safe x43)))
					       (progn
						 (ignore (consp x45))
						 (let*
						     ((x46
						       (car-safe x45))
						      (x47
						       (cdr-safe x45)))
						   (progn
						     (ignore
						      (null x47))
						     (let
							 ((command x38)
							  (flag x40)
							  (args x42)
							  (min x44)
							  (max x46))
						       (progn
							 (doom-print
							  (doom-print--format
							   (doom-print--style
							    'red
							    "Error: %S expected %s argument%s, but got %d")
							   (or flag
							       (doom-cli-command-string
								(if
								    (keywordp
								     (car
								      command))
								    command
								  (cdr
								   command))))
							   (if
							       (or
								(= min
								   max)
								(= max
								   most-positive-fixnum))
							       min
							     (format
							      "%d-%d"
							      min max))
							   (if
							       (or
								(= min
								   0)
								(> min
								   1))
							       "s"
							     "")
							   (length
							    args)))
							 (doom-cli-call
							  (cons ':help
								(cons
								 "--synopsis"
								 (cons
								  "--postamble"
								  (cdr
								   (doom-cli--command
								    context)))))
							  context e)))))))))))))))
			     5)
			    (doom-cli-unrecognized-option-error
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red
						  "Error: unknown option %s")
			       (car (cdr e))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--synopsis"
					  (cons "--postamble"
						(cdr
						 (doom-cli--command
						  context)))))
			      context e)
			     5)
			    (doom-cli-invalid-option-error
			     (let* ((val (cdr e)))
			       (progn
				 (ignore (consp val))
				 (let*
				     ((x48 (car-safe val))
				      (x49 (cdr-safe val)))
				   (progn
				     (ignore (consp x49))
				     (let*
					 ((x50 (car-safe x49))
					  (x51 (cdr-safe x49)))
				       (progn
					 (ignore (consp x51))
					 (let*
					     ((x52 (car-safe x51))
					      (x53 (cdr-safe x51)))
					   (progn
					     (ignore (consp x53))
					     (let*
						 ((x54 (car-safe x53))
						  (x55 (cdr-safe x53)))
					       (progn
						 (ignore (null x55))
						 (let
						     ((_types x48)
						      (option x50)
						      (value x52)
						      (errors x54))
						   (progn
						     (doom-print
						      (doom-print--format
						       (doom-print--style
							'red
							"Error: %s received invalid value %S")
						       (string-join
							(let*
							    ((cl-x
							      option))
							  (progn
							    (or
							     (let*
								 ((cl-x
								   cl-x))
							       (progn
								 (and
								  (memq
								   (type-of
								    cl-x)
								   cl-struct-doom-cli-option-tags)
								  t)))
							     (signal
							      'wrong-type-argument
							      (list
							       'doom-cli-option
							       cl-x)))
							    (aref cl-x
								  5)))
							"/")
						       value))
						     (doom-print
						      (doom-print--format
						       (doom-print--style
							'bold
							"\nValidation errors:")))
						     (let
							 ((tail errors))
						       (while tail
							 (let
							     ((err
							       (car
								tail)))
							   (doom-print
							    (doom-print--format
							     (doom-print--class
							      'item
							      "%s."
							      (doom-print--class
							       'fill
							       err))))
							   (setq tail
								 (cdr
								  tail)))))))))))))))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--postamble"
					  (cdr
					   (doom-cli--command context))))
			      context e)
			     5)
			    (doom-cli-command-not-found-error
			     (let*
				 ((command (cdr e))
				  (cli (doom-cli-get command)))
			       (cond
				((null cli)
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red
						      "Error: unrecognized command: %s")
				   (doom-cli-command-string command)))
				 (doom-cli-call
				  (cons ':help
					(cons "--similar"
					      (cons "--postamble"
						    (cdr command))))
				  context e))
				((null
				  (let* ((cl-x cli))
				    (progn
				      (or
				       (let* ((cl-x cl-x))
					 (progn
					   (and
					    (memq (type-of cl-x)
						  cl-struct-doom-cli-tags)
					    t)))
				       (signal 'wrong-type-argument
					       (list 'doom-cli cl-x)))
				      (aref cl-x 9))))
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red
						      "Error: a subcommand is required")))
				 (doom-cli-call
				  (cons ':help
					(cons "--subcommands"
					      (cons "--postamble"
						    (cdr command))))
				  context e))))
			     4)
			    (doom-cli-invalid-prefix-error
			     (let ((prefix (car (cdr e))))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red
						    "Error: `run!' called with invalid prefix %S")
				 prefix))
			       (let*
				   ((suggested
				     (and t
					  (let*
					      ((--cl-var-- t)
					       --cl-var--)
					    (catch
						'--cl-block---cl-finish----
					      (maphash
					       #'(lambda
						   (--cl-var-- cli)
						   (or
						    (if
							(let*
							    ((cl-x cli))
							  (progn
							    (or
							     (let*
								 ((cl-x
								   cl-x))
							       (progn
								 (and
								  (memq
								   (type-of
								    cl-x)
								   cl-struct-doom-cli-tags)
								  t)))
							     (signal
							      'wrong-type-argument
							      (list
							       'doom-cli
							       cl-x)))
							    (aref cl-x
								  2)))
							t
						      (progn
							(setq
							 --cl-var--
							 (car
							  (let*
							      ((cl-x
								cli))
							    (progn
							      (or
							       (let*
								   ((cl-x
								     cl-x))
								 (progn
								   (and
								    (memq
								     (type-of
								      cl-x)
								     cl-struct-doom-cli-tags)
								    t)))
							       (signal
								'wrong-type-argument
								(list
								 'doom-cli
								 cl-x)))
							      (aref
							       cl-x 1)))))
							(setq
							 --cl-var--
							 nil)))
						    (throw
						     '--cl-block---cl-finish----
						     nil)))
					       doom-cli--table))
					    --cl-var--))))
				 (if suggested
				     (doom-print
				      (doom-print--format
				       "Did you mean %S?" suggested))
				   (doom-print
				    (doom-print--format
				     "There are no commands defined under %S."
				     prefix)))))
			     4)
			    (user-error
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: %s")
			       (car (cdr e))))
			     (doom-print
			      (doom-print--format "\nAborting..."))
			     3)))
			context))))
	       (fset #'message old))))))))
 ((doom-context run cli t)))

;;;; 49
((run! "doom" ("--no-color" "install"))
 ((prefix . "doom") (args ("--no-color" "install"))))

;;;; 50
((load-with-code-conversion
  "c:/Users/jiacs/AppData/Roaming/.emacs.d/bin/doom"
  "c:/Users/jiacs/AppData/Roaming/.emacs.d/bin/doom" nil t)
 ((load-in-progress . t) (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "c:/Users/jiacs/AppData/Roaming/.emacs.d/bin/doom")
  (load-true-file-name
   . "c:/Users/jiacs/AppData/Roaming/.emacs.d/bin/doom")
  (read-symbol-shorthands) (eval-buffer-list #<buffer  *load*>)
  (standard-output) (lexical-binding)
  (standard-input . #<buffer  *load*>) (macroexp--dynvars)
  (current-load-list (require . cl-print) (require . finder-inf)
		     (defun . doom-transient-hook6)
		     (require . package) (require . doom-straight)
		     (require . straight)
		     "c:/Users/jiacs/AppData/Roaming/.emacs.d/bin/doom")))

;;;; 51
((command-line-1
  ("--load" "C:\\Users\\jiacs\\AppData\\Roaming\\.emacs.d\\bin/doom"
   "--" "--no-color" "install"))
 ((command-line-args-left "--" "--no-color" "install")
  (argi . "-load") (lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 52
((command-line) nil)

;;;; 53
((normal-top-level) nil)

